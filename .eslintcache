[{"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\index.js":"1","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\App.js":"2","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\authContext.js":"3","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\themes\\theme.js":"4","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\workspace\\Workspace.js":"5","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\workspace\\ProtectedWorkspace.js":"6","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\routes\\InitialRouter.js":"7","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\user\\Login.js":"8","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\userApi.js":"9","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\Controls.js":"10","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\Navbar.js":"11","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\SideMenu.js":"12","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\AddMenu.js":"13","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\UserItem.js":"14","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\Assets.js":"15","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\assetsApi.js":"16","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\Asset.js":"17","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\user\\UserItem.js":"18","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\AssetsControls.js":"19","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\AssetControls.js":"20","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\AlertDialoge.js":"21","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\UpdateAsset.js":"22","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\SortBy.js":"23","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\FiltersContext.js":"24","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\AuthContext.js":"25","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\genericApi.js":"26","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\customHooks\\useQuery.js":"27","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\SearchBox.js":"28","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\FilterBySelect.js":"29","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\UpdateAssetOwner.js":"30","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\FilterByMultiSelect.js":"31","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\LanguageContext.js":"32","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\i18n.js":"33","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\Systems.js":"34","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemsControls.js":"35","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\SearchBoxSelect.js":"36","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\systemsApi.js":"37","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\System.js":"38","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\UpdateSystemOwner.js":"39","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemName.js":"40","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\AddLinkedUser.js":"41","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemsHeader.js":"42","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemControls.js":"43","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemLinkedUsers.js":"44","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\Faults.js":"45","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultsControls.js":"46","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\faultsApi.js":"47","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultListView.js":"48","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultMinified.js":"49","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\StatusTag.js":"50","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultLink.js":"51","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultView.js":"52","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\Carousel.js":"53","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultViewControls.js":"54","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\UserList.js":"55","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\CommentSection.js":"56","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultViews.js":"57"},{"size":569,"mtime":1612721733308,"results":"58","hashOfConfig":"59"},{"size":1652,"mtime":1612719602814,"results":"60","hashOfConfig":"59"},{"size":457,"mtime":1612222036105,"results":"61","hashOfConfig":"59"},{"size":790,"mtime":1613198868176,"results":"62","hashOfConfig":"59"},{"size":2800,"mtime":1613589997095,"results":"63","hashOfConfig":"59"},{"size":1383,"mtime":1612140660414,"results":"64","hashOfConfig":"59"},{"size":1448,"mtime":1612592795916,"results":"65","hashOfConfig":"59"},{"size":9718,"mtime":1612221364508,"results":"66","hashOfConfig":"59"},{"size":2547,"mtime":1613248247179,"results":"67","hashOfConfig":"59"},{"size":1597,"mtime":1612762968121,"results":"68","hashOfConfig":"59"},{"size":5208,"mtime":1612765399602,"results":"69","hashOfConfig":"59"},{"size":7500,"mtime":1612941896528,"results":"70","hashOfConfig":"59"},{"size":4723,"mtime":1612811924775,"results":"71","hashOfConfig":"59"},{"size":1815,"mtime":1611698984067,"results":"72","hashOfConfig":"59"},{"size":3617,"mtime":1613339507565,"results":"73","hashOfConfig":"59"},{"size":3533,"mtime":1613450371589,"results":"74","hashOfConfig":"59"},{"size":14436,"mtime":1613339507565,"results":"75","hashOfConfig":"59"},{"size":2858,"mtime":1613445782432,"results":"76","hashOfConfig":"59"},{"size":4604,"mtime":1613282044486,"results":"77","hashOfConfig":"59"},{"size":2303,"mtime":1612730801613,"results":"78","hashOfConfig":"59"},{"size":3234,"mtime":1613240835325,"results":"79","hashOfConfig":"59"},{"size":11017,"mtime":1612810155978,"results":"80","hashOfConfig":"59"},{"size":5216,"mtime":1613281720174,"results":"81","hashOfConfig":"59"},{"size":474,"mtime":1612077675310,"results":"82","hashOfConfig":"59"},{"size":457,"mtime":1612222036105,"results":"83","hashOfConfig":"59"},{"size":3301,"mtime":1613585429189,"results":"84","hashOfConfig":"59"},{"size":164,"mtime":1612245702093,"results":"85","hashOfConfig":"59"},{"size":3685,"mtime":1613353209720,"results":"86","hashOfConfig":"59"},{"size":6779,"mtime":1613345281720,"results":"87","hashOfConfig":"59"},{"size":4054,"mtime":1612924950951,"results":"88","hashOfConfig":"59"},{"size":8804,"mtime":1613409439913,"results":"89","hashOfConfig":"59"},{"size":686,"mtime":1613539198764,"results":"90","hashOfConfig":"59"},{"size":744,"mtime":1612722345758,"results":"91","hashOfConfig":"59"},{"size":3626,"mtime":1613260088151,"results":"92","hashOfConfig":"59"},{"size":5615,"mtime":1613353229551,"results":"93","hashOfConfig":"59"},{"size":8339,"mtime":1613345287951,"results":"94","hashOfConfig":"59"},{"size":3587,"mtime":1613339507565,"results":"95","hashOfConfig":"59"},{"size":7026,"mtime":1613717306678,"results":"96","hashOfConfig":"59"},{"size":7680,"mtime":1613240236265,"results":"97","hashOfConfig":"59"},{"size":5213,"mtime":1612941646899,"results":"98","hashOfConfig":"59"},{"size":7686,"mtime":1613205337883,"results":"99","hashOfConfig":"59"},{"size":2633,"mtime":1613238039396,"results":"100","hashOfConfig":"59"},{"size":4958,"mtime":1613238131805,"results":"101","hashOfConfig":"59"},{"size":8130,"mtime":1613244496317,"results":"102","hashOfConfig":"59"},{"size":1110,"mtime":1613589946595,"results":"103","hashOfConfig":"59"},{"size":8769,"mtime":1613353067070,"results":"104","hashOfConfig":"59"},{"size":2337,"mtime":1613591065534,"results":"105","hashOfConfig":"59"},{"size":2473,"mtime":1613590815800,"results":"106","hashOfConfig":"59"},{"size":2558,"mtime":1613447458254,"results":"107","hashOfConfig":"59"},{"size":2531,"mtime":1613594967084,"results":"108","hashOfConfig":"59"},{"size":493,"mtime":1613518131737,"results":"109","hashOfConfig":"59"},{"size":7591,"mtime":1613714441499,"results":"110","hashOfConfig":"59"},{"size":2964,"mtime":1613507856350,"results":"111","hashOfConfig":"59"},{"size":2338,"mtime":1613591764017,"results":"112","hashOfConfig":"59"},{"size":4750,"mtime":1613591552993,"results":"113","hashOfConfig":"59"},{"size":7970,"mtime":1613587536458,"results":"114","hashOfConfig":"59"},{"size":3161,"mtime":1613591097643,"results":"115","hashOfConfig":"59"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"2s6085",{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"118"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"118"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"118"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"118"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"118"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"118"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"118"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"118"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"118"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"118"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"118"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"118"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"118"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"118"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"118"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"118"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"118"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"118"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"118"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"118"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"213","messages":"214","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"118"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"118"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"118"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"118"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"118"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"118"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"233","messages":"234","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"118"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"238","messages":"239","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"240","messages":"241","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"242","messages":"243","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"244","messages":"245","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"246","messages":"247","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"248","messages":"249","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"250","messages":"251","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"252","messages":"253","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"254","messages":"255","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"256","messages":"257","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\index.js",[],["258","259"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\App.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\authContext.js",["260"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\themes\\theme.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\workspace\\Workspace.js",["261","262","263"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\workspace\\ProtectedWorkspace.js",["264"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { AuthContext } from '../../context/authContext';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { authenticate, handleLS } from '../../api/userApi';\r\n\r\nexport const ProtectedWorkspace = ({ children, isAuthenticated,...rest}) => {\r\n    \r\n    const { auth, setAuth } = useContext(AuthContext);\r\n    const [ isLoading, setIsLoading ] = useState(true);\r\n\r\n    const checkUserAuthentication = async () => {\r\n        let token = await handleLS('wb_token', 'get');\r\n        if (!token) {\r\n            setIsLoading(false);\r\n            return;\r\n        };\r\n        let res = await authenticate(token);\r\n        if (res.auth) {\r\n           setAuth({\r\n                isAuth: res.auth,\r\n                user: res.user,\r\n                token: res.token.token,\r\n                refreshToken: res.token.refreshToken\r\n            });\r\n              \r\n        }\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n    useEffect(() => {\r\n        checkUserAuthentication();\r\n    }, []);\r\n\r\n    return (\r\n        <Route {...rest}\r\n          render={() => isLoading ? \r\n            'loading' : \r\n            auth.isAuth\r\n            ? children\r\n            :   <Redirect\r\n                    to={{\r\n                    pathname: \"/login\"\r\n                }}/>\r\n            }      \r\n        />\r\n      );\r\n}\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\routes\\InitialRouter.js",["265"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { AuthContext } from '../../context/AuthContext';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { authenticate, handleLS } from '../../api/userApi';\r\n\r\nexport const InitialRouter = ({...rest}) => {\r\n    \r\n    const { auth, setAuth } = useContext(AuthContext);\r\n    const [ isLoading, setIsLoading ] = useState(true);\r\n\r\n    const checkUserAuthentication = async () => {\r\n        let token = await handleLS('wb_token', 'get');\r\n        if (!token) {\r\n            setIsLoading(false);\r\n            return;\r\n        };\r\n        let res = await authenticate(token);\r\n        \r\n        if (res.auth) {\r\n           setAuth({\r\n                isAuth: res.auth,\r\n                user: res.user,\r\n                token: res.token.token,\r\n                refreshToken: res.token.refreshToken\r\n            });\r\n              \r\n        }\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n    useEffect(() => {\r\n        checkUserAuthentication();\r\n    }, []);\r\n\r\n    return (\r\n        <Route {...rest}\r\n          render={() => isLoading ? \r\n            'loading' : \r\n            auth.isAuth\r\n            ? <Redirect\r\n                to={{\r\n                    pathname: \"/workspace\"\r\n            }}/> \r\n            :   <Redirect\r\n                    to={{\r\n                    pathname: \"/login\"\r\n                }}/>\r\n            }      \r\n        />\r\n      );\r\n}\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\user\\Login.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\userApi.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\Controls.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\Navbar.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\SideMenu.js",["266"],"import React, { useContext } from 'react'\r\nimport { makeStyles, List, ListItem, ListItemIcon, ListItemText, Grow, ClickAwayListener, useMediaQuery } from '@material-ui/core'\r\nimport BusinessRoundedIcon from '@material-ui/icons/BusinessRounded';\r\nimport AssignmentRoundedIcon from '@material-ui/icons/AssignmentRounded';\r\nimport WarningRoundedIcon from '@material-ui/icons/WarningRounded';\r\nimport DescriptionRoundedIcon from '@material-ui/icons/DescriptionRounded';\r\nimport BlurOnRoundedIcon from '@material-ui/icons/BlurOnRounded';\r\nimport { UserItem } from '../../user/UserItem'\r\nimport ExitToAppRoundedIcon from '@material-ui/icons/ExitToAppRounded';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport { useHistory } from 'react-router-dom'; \r\nimport { useTranslation } from 'react-i18next';\r\nimport { AuthContext } from '../../../context/AuthContext';\r\n\r\nexport const SideMenu = ({toggleMenu}) => {\r\n\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const { t, i18n } = useTranslation();\r\n    const matches = useMediaQuery(theme => theme.breakpoints.up('sm'));\r\n    const { auth } = useContext(AuthContext);\r\n\r\n    const closeMenu = () => {\r\n        if (matches) {\r\n            toggleMenu()\r\n        }\r\n    }\r\n    \r\n    const handleClick = type => event => {\r\n        toggleMenu();\r\n        history.push(`/workspace/${type}`)\r\n    }\r\n\r\n    return (\r\n        <ClickAwayListener onClickAway={closeMenu}>\r\n            <Grow in={true}>\r\n                <div className={classes.sidemenuContainer}>\r\n                    <div className={classes.userContainer}>   \r\n                        <UserItem \r\n                            showTitle\r\n                            user={auth.user}\r\n                        />\r\n                    </div>\r\n                    <List className= { classes.list}>\r\n                        <ListItem button={true} className={classes.listItem}\r\n                            onClick={handleClick('assets')}\r\n                        >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <BusinessRoundedIcon fontSize={'medium'} className={classes.icon}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"sideMenu.assets\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem button={true} className={classes.listItem}\r\n                            onClick={handleClick('systems')}\r\n                        >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <BlurOnRoundedIcon fontSize={'medium'} className={classes.icon}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"sideMenu.systems\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem button={true} className={classes.listItem}\r\n                            onClick={handleClick('tasks')}\r\n                        >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <AssignmentRoundedIcon fontSize={'medium'}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"sideMenu.myTasks\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem button={true} className={classes.listItem}\r\n                            onClick={handleClick('faults')}\r\n                        >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <WarningRoundedIcon fontSize={'medium'}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"sideMenu.faults\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem button={true} className={classes.listItem}\r\n                            onClick={handleClick('docs')}\r\n                        >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <DescriptionRoundedIcon fontSize={'medium'}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"sideMenu.documents\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                    </List>\r\n                    <List className={classes.bottomList}>\r\n                        <ListItem button={true} >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <SettingsIcon fontSize={'medium'} />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"sideMenu.settings\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem button={true} >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <ExitToAppRoundedIcon fontSize={'medium'} />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"sideMenu.logout\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                    </List>\r\n                </div>\r\n            </Grow>\r\n        </ClickAwayListener>\r\n        \r\n        \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    userContainer: {\r\n        width: '85%',\r\n        margin: '20px auto',\r\n        padding: '15px 10px',\r\n        borderRadius: '10px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        background: 'rgba(0,0,0,0.7)',\r\n        boxShadow: '0 8px 32px 0 rgb(0 0 0 / 37%)',\r\n        '&:hover' :{\r\n            background: 'black',\r\n            transition: 'background 0.2s ease',\r\n            boxShadow: '0 8px 32px 0 rgb(0 0 0 / 80%)',\r\n        }\r\n    },\r\n    sidemenuContainer: {\r\n        zIndex: 2,\r\n        width: '300px',\r\n        background: theme.palette.primary.main,\r\n        backdropFilter: 'blur(10px)',\r\n        boxShadow: 'rgba(0,0,0,0.25) 0px 0px 6px 3px',\r\n        position: 'absolute',\r\n        top: '80px',\r\n        left: '10px',\r\n        borderRadius: '10px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        [theme.breakpoints.down('sm')]: {\r\n            maxHeight: '70vh',\r\n            overflow: 'scroll'\r\n        }\r\n\r\n    },\r\n    list: {\r\n        width: '90%',\r\n        borderTop: '1px solid rgba(255,255,255,0.3)',\r\n        borderBottom: '1px solid rgba(255,255,255,0.3)',\r\n        margin: '0px auto',\r\n        padding: '20px 0'\r\n    },\r\n    listItem: {\r\n        color: 'theme.palette.primary.main',\r\n        margin: '7px auto',\r\n        borderRadius: '10px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        transition: 'background box-shadow 0.3s ease-in-out',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.6)',\r\n            transition: 'background box-shadow 0.2s ease-in-out',\r\n            boxShadow: '0 8px 32px 0 rgb(0 0 0 / 80%)',\r\n        }\r\n    }, \r\n    listItemIcon: {\r\n        color: 'white'\r\n    },\r\n    listItemText: {     \r\n        fontSize: '14px',\r\n        color: 'white'\r\n        \r\n    },\r\n    bottomList: {\r\n        padding: '10px 0'\r\n    }\r\n\r\n}));","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\AddMenu.js",["267"],"import React from 'react'\r\nimport { makeStyles, List, ListItem, ListItemIcon, ListItemText, Grow, ClickAwayListener, useMediaQuery } from '@material-ui/core'\r\nimport AddLocationOutlinedIcon from '@material-ui/icons/AddLocationOutlined';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport QueueIcon from '@material-ui/icons/Queue';\r\nimport PostAddIcon from '@material-ui/icons/PostAdd';\r\nimport NoteAddOutlinedIcon from '@material-ui/icons/NoteAddOutlined';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport const AddMenu = ({toggleAddMenu}) => {\r\n\r\n    const classes = useStyles();\r\n    const { t, i18n } = useTranslation();\r\n    const matches = useMediaQuery(theme => theme.breakpoints.up('sm'));\r\n\r\n    const closeMenu = () => {\r\n        if (matches) {\r\n            toggleAddMenu()\r\n        }\r\n    }  \r\n\r\n    return (\r\n        <ClickAwayListener onClickAway={closeMenu}>\r\n            <Grow in={true}>\r\n                <div className={classes.addMenuContainer}>\r\n                    <List className= { classes.list}>\r\n                        <ListItem button={true} className={classes.listItem}>\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <AddLocationOutlinedIcon fontSize={'medium'} className={classes.icon}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"createMenu.addAsset\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem button={true} className={classes.listItem}>\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <GroupAddIcon fontSize={'medium'}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"createMenu.createUser\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem button={true} className={classes.listItem}>\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <PostAddIcon fontSize={'medium'}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"createMenu.createTask\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem button={true} className={classes.listItem}>\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <QueueIcon fontSize={'medium'}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"createMenu.createFault\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem button={true} className={classes.listItem}>\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <NoteAddOutlinedIcon fontSize={'medium'}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"createMenu.addDocument\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                    </List>  \r\n                </div>\r\n            </Grow>\r\n        </ClickAwayListener>\r\n        \r\n        \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    addMenuContainer: {\r\n        zIndex: 2,\r\n        width: '240px',\r\n        background: theme.palette.primary.main,\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        backdropFilter: 'blur(10px)',\r\n        boxShadow: 'rgba(0,0,0,0.25) 0px 0px 6px 3px',\r\n        position: 'absolute',\r\n        top: '80px',\r\n        right: '2%',\r\n        borderRadius: '10px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            maxHeight: '70vh',\r\n            overflow: 'scroll'\r\n        }\r\n\r\n    },\r\n    list: {\r\n        width: '90%',\r\n        margin: '0px auto'\r\n    },\r\n    listItem: {\r\n        color: 'theme.palette.primary.main',\r\n        margin: '7px auto',\r\n        borderRadius: '10px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        transition: 'background box-shadow 0.3s ease-in-out',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.6)',\r\n            transition: 'background box-shadow 0.2s ease-in-out',\r\n            boxShadow: '0 8px 32px 0 rgb(0 0 0 / 80%)',\r\n        }\r\n    }, \r\n    listItemIcon: {\r\n        color: 'white'\r\n    },\r\n    listItemText: {     \r\n        fontSize: '14px',\r\n        color: 'white'\r\n        \r\n    },\r\n    bottomList: {\r\n        padding: '10px 0'\r\n    }\r\n\r\n}));","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\UserItem.js",["268"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\Assets.js",["269","270"],"import React, { useEffect, useState } from 'react'\r\nimport { Grid, LinearProgress, makeStyles } from '@material-ui/core'\r\nimport { getSites, removeSite,getFullAddress, applyFilters } from '../../../api/assetsApi'\r\nimport { Asset } from './Asset'\r\nimport { AssetsControls } from './AssetsControls'\r\nimport { AlertDialog } from '../../reuseables/AlertDialoge'\r\nimport { queryParamsToObject } from '../../../api/genericApi';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport const Assets = () => {\r\n\r\n    const location = useLocation();\r\n    const classes = useStyles();\r\n    const { t, i18n } = useTranslation();\r\n    const [ assets, setSites ] = useState([]);\r\n    const [ isLoading, setIsLoading ] = useState(true);\r\n    const [ alertDialoge , setAlertDialoge ] = useState(null)\r\n\r\n    useEffect(() => {\r\n        if(!isLoading) return;\r\n        getSites()\r\n        .then(res => {\r\n            if (res) {\r\n                return applyFilters(queryParamsToObject(location.search), res.data)   \r\n            }\r\n        })\r\n        .then(data => {\r\n            if (data) {\r\n                setSites(data)\r\n            }\r\n        }) \r\n        .catch(e => {\r\n            console.log(e.message)\r\n        })\r\n        .finally(() => setIsLoading(false))\r\n        \r\n    }, [isLoading])\r\n\r\n    useEffect(()=> {\r\n        setIsLoading(true)\r\n    }, [location.search])\r\n\r\n    const removeAsset = (assetId, data) => {\r\n        setAlertDialoge({\r\n            handleConfirm: async () => {\r\n                const res = await removeSite(assetId);\r\n                if (res) {\r\n                    setAlertDialoge(null)\r\n                    setIsLoading(true);\r\n                } else {\r\n                    console.log(res)\r\n                }\r\n            },\r\n            handleCancel: () => setAlertDialoge(null),\r\n            text: `${t(\"assetsModule.deleteConfirmation\")} ${getFullAddress(data)}?`,\r\n            title: `${t(\"assetsModule.deleteAsset\")}`\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Grid container >\r\n                <Grid item xs={12}>\r\n                    <div className={classes.pageModule}>\r\n                        {t(\"assetsModule.assets\")}\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} md={12} >\r\n                    <AssetsControls />\r\n                </Grid>\r\n                <Grid container justify='center'>\r\n                    {\r\n                        isLoading ?\r\n                        <LinearProgress /> :\r\n                        assets.map((v,i) => \r\n                            <Asset \r\n                                assetData={v} \r\n                                key={i} \r\n                                order={i}\r\n                                removeAsset={removeAsset}\r\n                                \r\n                            />\r\n                        )    \r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n            {\r\n                Boolean(alertDialoge) &&\r\n                <AlertDialog \r\n                    open={Boolean(alertDialoge)}\r\n                    alertDialoge={alertDialoge}\r\n                />\r\n            }\r\n            \r\n        </div>\r\n            \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    pageModule: {\r\n        color: 'white',\r\n        padding: '10px 40px',\r\n        fontSize: '18px',\r\n        background: 'rgba(0,0,0,0.6)',\r\n        margin: '0px auto 5px',\r\n        width: '30%',\r\n        textAlign: 'center',\r\n        borderRadius: '0 0 25px 25px',\r\n        lineHeight: '1'\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\assetsApi.js",["271"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\Asset.js",["272"],"import React, { useEffect, useState } from 'react'\r\nimport { makeStyles, Grid, ClickAwayListener, Paper, Typography, Fade, useMediaQuery, IconButton, Tooltip } from '@material-ui/core'\r\nimport clsx from 'clsx'\r\nimport { UserItem } from '../../user/UserItem'\r\nimport { AssetControls } from './AssetControls'\r\nimport CategoryOutlinedIcon from '@material-ui/icons/CategoryOutlined';\r\nimport VerticalSplitRoundedIcon from '@material-ui/icons/VerticalSplitRounded';\r\nimport HomeRoundedIcon from '@material-ui/icons/HomeRounded';\r\nimport WarningRoundedIcon from '@material-ui/icons/WarningRounded';\r\nimport AssignmentRoundedIcon from '@material-ui/icons/AssignmentRounded';\r\nimport DescriptionRoundedIcon from '@material-ui/icons/DescriptionRounded';\r\nimport { UpdateAsset } from './UpdateAsset';\r\nimport { updateSiteAddress } from '../../../api/assetsApi'\r\nimport { UpdateAssetOwner } from './UpdateAssetOwner';\r\nimport PeopleOutlineRoundedIcon from '@material-ui/icons/PeopleOutlineRounded';\r\nimport BlurOnRoundedIcon from '@material-ui/icons/BlurOnRounded';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useHistory } from 'react-router'\r\n\r\n\r\nexport const Asset = ({assetData, order, removeAsset }) => {\r\n\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const { t, i18n } = useTranslation();\r\n    const [ controlsVisible, setControlsVisible ] = useState(false);\r\n    const [ editMode, setEditMode ] = useState(false);\r\n    const matches = useMediaQuery(theme => theme.breakpoints.up('sm'));\r\n    const [ data, setData ] = useState(assetData);\r\n    const [ transition, setTransition ] = useState({\r\n        container: {\r\n            transition: 'height 0.3s ease'\r\n        }\r\n    });\r\n    \r\n    useEffect(() => {\r\n        if (editMode){\r\n            setTransition({\r\n                container: {\r\n                    transition: 'height 0.3s ease'\r\n                }\r\n            })  \r\n        } else {\r\n            setTransition({\r\n                container: {    \r\n                    transition: 'height 0.3s ease'\r\n                }\r\n            })\r\n        }\r\n    }, [editMode]);\r\n    \r\n\r\n    const toggleControls = () => {\r\n        if(controlsVisible) {\r\n            setControlsVisible(false)\r\n        } else {\r\n            setControlsVisible(true)\r\n        }          \r\n    }\r\n\r\n    const toggleEditMode = type => event => {\r\n        if (editMode === type) {\r\n            setEditMode(false)\r\n        } else {\r\n            setEditMode(type)\r\n        }\r\n    }\r\n\r\n    const handleUpdate = async (assetId, address, addInfo, type) => {\r\n        const res = await updateSiteAddress(assetId, address, addInfo, type);\r\n        if (res) {\r\n            setEditMode(false);\r\n            setData(res.data);\r\n        }\r\n        \r\n    }\r\n\r\n    const handleReferralClick = type => event => {\r\n        history.push(`${type}/?asset=${data._id}`)\r\n    }\r\n\r\n\r\n    return (\r\n        <Fade in={true}>\r\n            <Grid item xs={12} sm={7} md={6} lg={4} xl={4} >\r\n                <ClickAwayListener onClickAway={() => editMode ? setEditMode(false) : null }>\r\n                    <Paper \r\n                        className={classes.assetContainer} \r\n                        style={{ \r\n                            background: 'rgba(0,0,0,0.2)',\r\n                            border: '1px solid rgba(255,255,255,0.2)', \r\n                            height: editMode ? transition.container.height : 'auto', \r\n                            transition: editMode ? transition.container.transition : 'height 0.3s ease'\r\n                        }} \r\n                        elevation={9}\r\n                        onMouseEnter={toggleControls}\r\n                        onMouseLeave={toggleControls}\r\n                    >\r\n                        <div className={classes.topMain} >\r\n                            <div className={classes.address}>\r\n                                <Typography className={classes.addMain}>\r\n                                    {`${data.address.street} ${data.address.streetNumber}${data.address.entrance || ''}`}\r\n                                </Typography>\r\n                                <Typography className={classes.addSec}>\r\n                                    {`${data.address.city}`}\r\n                                </Typography>\r\n                                <Typography className={classes.addZip}> \r\n                                    {`${data.address.zipcode}, ${data.address.country}`}\r\n                                </Typography>\r\n                            </div>\r\n                            <div className={classes.owner}>\r\n                                <UserItem user={data.owner} showPhone avatarSize={'50px'}/>\r\n                            </div>\r\n                            {\r\n                                (controlsVisible || !matches) &&\r\n                                <AssetControls \r\n                                    removeAsset={() => removeAsset(data._id, data)} \r\n                                    toggleEditMode={toggleEditMode}/>\r\n                            }\r\n                        </div>\r\n                        <div \r\n                            className={classes.bottomMain}\r\n                        >\r\n                            <div className={classes.extraDetails}>\r\n                                <div className={classes.type}>\r\n                                    <CategoryOutlinedIcon className={classes.typeIcon}/>\r\n                                    <div className={classes.typeDetails}>\r\n                                        <div className={classes.typeData}>\r\n                                            {data.type}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                {\r\n                                    data.addInfo.floors ? \r\n                                    <div className={clsx(classes.type, classes.floor)}>\r\n                                        <VerticalSplitRoundedIcon className={classes.typeIcon}/>\r\n                                        <div className={classes.typeDetails}>\r\n                                            <div className={classes.typeData}>\r\n                                                {`${data.addInfo.floors} ${t(\"assetsModule.floors\")}`}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    : null\r\n                                }\r\n                                {\r\n                                    data.addInfo.floor ?\r\n                                    <div className={clsx(classes.type, classes.floor)} >\r\n                                        <VerticalSplitRoundedIcon className={classes.typeIcon}/>\r\n                                        <div className={classes.typeDetails}>\r\n                                            <div className={classes.typeData}>\r\n                                            {`${t(\"assetsModule.floor\")} ${data.addInfo.floor}`}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    : null\r\n                                }\r\n                                {\r\n                                    data.addInfo.unit ?\r\n                                    <div className={clsx(classes.type, classes.unit)}>\r\n                                        <HomeRoundedIcon className={classes.typeIcon}/>\r\n                                        <div className={classes.typeDetails}>\r\n                                            <div className={classes.typeData}>\r\n                                            {`${t(\"assetsModule.unit\")} ${data.addInfo.unit}`}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    : null\r\n                                }\r\n                                {\r\n                                    data.addInfo.units ?\r\n                                    <div className={clsx(classes.type, classes.units)}>\r\n                                        <HomeRoundedIcon className={classes.typeIcon}/>\r\n                                        <div className={classes.typeDetails}>\r\n                                            <div className={classes.typeData}>\r\n                                            {`${data.addInfo.units} ${t(\"assetsModule.units\")}`}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    : null\r\n                                }\r\n                                \r\n                            </div>\r\n                            <div className={clsx(classes.buttonsContainer, Boolean(editMode) && classes.buttonsContainerRound)} >\r\n                                <Tooltip title={t(\"assetsModule.systems\")}>\r\n                                    <IconButton \r\n                                        className={classes.button}\r\n                                        onClick={handleReferralClick('systems')}\r\n                                    >\r\n                                        <BlurOnRoundedIcon className={classes.typeIcon}/>\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title={t(\"assetsModule.tasks\")}>\r\n                                    <IconButton className={classes.button}>\r\n                                        <AssignmentRoundedIcon className={classes.typeIcon}/>\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title={t(\"assetsModule.faults\")}>\r\n                                    <IconButton className={classes.button}>\r\n                                        <WarningRoundedIcon className={classes.typeIcon}/>\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title={t(\"assetsModule.documents\")}>\r\n                                    <IconButton className={classes.button}>\r\n                                        <DescriptionRoundedIcon className={classes.typeIcon}/>\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title={t(\"assetsModule.users\")}>\r\n                                    <IconButton className={classes.button}>\r\n                                        <PeopleOutlineRoundedIcon className={classes.typeIcon}/>\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                                \r\n                            </div>\r\n                        </div>\r\n                    \r\n                        <UpdateAsset \r\n                            data={data} \r\n                            open={editMode === 'address'}\r\n                            handleUpdate={handleUpdate}\r\n                            handleCancel={() => setEditMode(false)}\r\n                        />\r\n                        <UpdateAssetOwner \r\n                            currentOwner={data.owner._id}\r\n                            open={editMode === 'owner'}\r\n                            handleUpdate={handleUpdate}\r\n                            handleCancel={() => setEditMode(false)}\r\n                        />\r\n                   \r\n                    </Paper>\r\n                </ClickAwayListener>\r\n            </Grid>\r\n        </Fade>\r\n        \r\n        \r\n    )\r\n\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    assetContainer: {\r\n        margin: '10px',\r\n        background: 'white',\r\n        borderRadius: '25px',\r\n        height: 'auto',\r\n        color: 'white',\r\n        [theme.breakpoints.down('sm')] : {\r\n            margin: '10px 0'\r\n        } \r\n    },\r\n    topMain: {\r\n        height: '120px',\r\n        borderRadius: '25px',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        position: 'relative'\r\n    },\r\n    address: {\r\n        padding: `${theme.spacing(3)}px 0 0 ${theme.spacing(3)}px`,\r\n         \r\n        maxWidth: '45%'\r\n    },\r\n    addMain: {\r\n        fontSize: '20px',\r\n        lineHeight: 1\r\n    },\r\n    addSec: {\r\n        fontSize: '14px'\r\n    },\r\n    addZip: {\r\n        fontSize: '14px'\r\n    },\r\n    bottomMain: {\r\n        height: 'auto',\r\n        borderRadius: '25px',\r\n        position: 'relative',\r\n        background: 'transparent',\r\n        display: 'grid',\r\n        placeItems: 'center'\r\n    },\r\n    owner: {\r\n        width: '160px',\r\n        height: '50px',\r\n        padding: '7px',\r\n        borderRadius: '0px 25px 0px 30px',\r\n        boxShadow: '0 2px 20px 0 rgb(0 0 0 / 37%)',\r\n        '&:hover' :{\r\n            background: 'black',\r\n            transition: 'background 0.2s ease',\r\n            boxShadow: '0 8px 32px 0 rgb(0 0 0 / 80%)',\r\n        }\r\n    },\r\n    extraDetails: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        height: '30px',\r\n        borderRadius: '25px',\r\n        background: theme.palette.primary.main,\r\n        width: 'fit-content',\r\n        boxShadow: 'rgba(0,0,0,0.4) 0px 0px 5px 2px'\r\n    },\r\n    type: {\r\n        position: 'relative',\r\n        display: 'flex',\r\n        padding: '5px 10px',\r\n        width: 'fit-content',\r\n        background: 'transparent',\r\n        color: 'white',\r\n        alignItems: 'center'\r\n    },\r\n    typeIcon: {\r\n        fontSize: '20px',\r\n        color: 'white'\r\n    },\r\n    typeData: {\r\n        padding: '0 10px 0 10px',\r\n        lineHeight: 1\r\n    },\r\n    buttonsContainer: {\r\n        width: 'fit-content',\r\n        margin: '10px auto 0',\r\n        height: 'auto',\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-between',\r\n        borderRadius: '10px 10px 0 0',\r\n        transition: 'border-radius 0.5s ease',\r\n        background: theme.palette.primary.main,\r\n        boxShadow: 'rgba(0,0,0,0.4) 0px 0px 5px 2px'  \r\n    },\r\n    buttonsContainerRound: {\r\n        borderRadius: '25px',\r\n        transition: 'border-radius 0.5s ease'\r\n    },\r\n    button: {\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.5)',\r\n        }\r\n    },\r\n    \r\n    \r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\user\\UserItem.js",["273","274"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\AssetsControls.js",["275","276","277"],"import React, { useState } from 'react'\r\nimport { Grid, makeStyles,  useMediaQuery, Collapse, Button } from '@material-ui/core'\r\nimport { SortBy } from '../../reuseables/SortBy'\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\nimport { SearchBox } from '../../reuseables/SearchBox';\r\nimport { FilterBySelect } from '../../reuseables/FilterBySelect';\r\nimport PersonRoundedIcon from '@material-ui/icons/PersonRounded';\r\nimport { getUserList } from '../../../api/userApi';\r\nimport { FilterByMultiSelect } from '../../reuseables/FilterByMultiSelect';\r\nimport { useTranslation } from 'react-i18next';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport ExpandMoreRoundedIcon from '@material-ui/icons/ExpandMoreRounded';\r\nimport { ClearRounded } from '@material-ui/icons';\r\n\r\n\r\nconst sortOptions = [\r\n    {\r\n        text: 'כתובת',\r\n        field: 'street'\r\n    },\r\n    {\r\n        text: 'עיר',\r\n        field: 'city'\r\n    },\r\n    {\r\n        text: 'מנהל בניין',\r\n        field: 'owner'\r\n    },\r\n    {\r\n        text: 'כמות משימות פתוחות',\r\n        field: 'openTasksCount'\r\n    },\r\n    {\r\n        text: 'כמות תקלות פתוחות',\r\n        field: 'openFaultsCount'\r\n    },\r\n    \r\n]\r\n\r\nexport const AssetsControls = ({ components }) => {\r\n    \r\n    const classes = useStyles();\r\n    const { t, i18n } = useTranslation();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const [ collapsed, setCollapsed ] = useState(!downSm ? true : false);\r\n    \r\n\r\n    const createUserOptions = () => {\r\n        return getUserList()\r\n        .then(data => {\r\n            let userList = [];\r\n            data.forEach(user => {\r\n                userList.push({label: `${user.firstName} ${user.lastName}`, value: user._id })\r\n            });\r\n            return userList;\r\n        })\r\n    }\r\n\r\n    const toggleCollapse = () => {\r\n        if (collapsed) {\r\n            setCollapsed(false);\r\n            return;\r\n        }\r\n        setCollapsed(true)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                downSm &&\r\n                <Grid container justify='center'>\r\n                    <Grid item xs={11} className={classes.gridItem}>\r\n                        <Button\r\n                        className={classes.sortandfilter}\r\n                        startIcon={<FilterListIcon className={classes.icon} />}\r\n                        endIcon={collapsed ? <ClearRounded /> : <ExpandMoreRoundedIcon />}\r\n                        onClick={toggleCollapse}\r\n                    >\r\n                        {t(`faultsModule.${ collapsed ? 'hide' : 'show'}Filters`)}\r\n                    </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                    \r\n            }\r\n            <Collapse in={collapsed}>\r\n                <Grid container justify='center' >\r\n                    <Grid item xs={11} sm={9} md={7} lg={5} xl={4} className={classes.gridItem}>\r\n                        <SearchBox \r\n                            placeholder={t(\"assetsModule.filterByCityOrAddress\")}\r\n                            filterField={'searchText'}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={11} className={classes.gridItem}>         \r\n                        <FilterBySelect \r\n                            optionsFunc={createUserOptions}\r\n                            placeholder={t(\"assetsModule.filterByAssetOwner\")}\r\n                            filterIcon={<PersonRoundedIcon className={classes.icon }/>}\r\n                            filterField={'owner'}\r\n                        \r\n                        />\r\n                    \r\n                        <SortBy \r\n                            menuOptions={sortOptions}\r\n                        />   \r\n                    </Grid>  \r\n                </Grid>\r\n            </Collapse>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(them => ({\r\n    gridItem: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap'\r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        marginLeft: '4px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    sortandfilter: {\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        background: 'rgba(0,0,0,0.7)',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '5px 25px 5px 3px',\r\n        whiteSpace: 'nowrap',\r\n        '&:hover': {\r\n            background: 'black'\r\n        }\r\n    }\r\n}))\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\AssetControls.js",["278"],"import React from 'react'\r\nimport { makeStyles, Fade, IconButton, Tooltip } from '@material-ui/core'\r\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\r\nimport DeleteOutlineRoundedIcon from '@material-ui/icons/DeleteOutlineRounded';\r\nimport TransferWithinAStationRoundedIcon from '@material-ui/icons/TransferWithinAStationRounded';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n\r\nexport const AssetControls = ({removeAsset, toggleEditMode}) => {\r\n    \r\n    const classes = useStyles();\r\n    const { t, i18n } = useTranslation();\r\n    \r\n    return (\r\n        <Fade in={true} timeout={500}>\r\n            <div className={ classes.container}>               \r\n                <Tooltip title={t(\"assetsModule.editAddress\")}>\r\n                    <IconButton \r\n                        className={classes.iconbutton}\r\n                        onClick={toggleEditMode('address')}\r\n                    >\r\n                        <EditRoundedIcon className={classes.icon} />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title={t(\"assetsModule.editAssetManager\")}>\r\n                    <IconButton \r\n                        className={classes.iconbutton}\r\n                        onClick={toggleEditMode('owner')}\r\n                    > \r\n                        <TransferWithinAStationRoundedIcon className={classes.icon}/>\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title={t(\"assetsModule.deleteAsset\")}>\r\n                    <IconButton \r\n                        className={classes.iconbutton}\r\n                        onClick={removeAsset}    \r\n                    >\r\n                        <DeleteOutlineRoundedIcon className={classes.icon} />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            </div>\r\n        </Fade>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        display: 'flex',\r\n        position: 'absolute',\r\n        right: 0,\r\n        top: '55%',\r\n        \r\n    },\r\n    iconbutton: {\r\n        margin: '7px 5px',\r\n        boxShadow: 'rgba(0,0,0,0.2) 0px 0px 3px 3px ',\r\n        background: theme.palette.primary.main,\r\n        color: 'white',\r\n        padding: '8px'\r\n       \r\n    },\r\n    icon: {\r\n        fontSize: '20px'\r\n    }\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\AlertDialoge.js",["279"],"import React, { useContext } from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\nimport { useTranslation } from 'react-i18next';\r\nimport clsx from 'clsx';\r\n\r\nexport const AlertDialog = ({ alertDialoge , open }) => {\r\n\r\n        const classes = useStyles();\r\n        const { lang } = useContext(LanguageContext);\r\n        const { t, i18n } = useTranslation();\r\n  return (\r\n    <Dialog\r\n        open={open}\r\n        onClose={alertDialoge.handleCancel}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n        style={{ direction: lang.dir}}\r\n        classes={{\r\n            root: classes.root, \r\n            paper: classes.paper,\r\n            container: classes.container\r\n        }}\r\n        BackdropProps={{\r\n            timeout: 500,\r\n            classes: {\r\n                root: classes.root\r\n            }\r\n        }}\r\n    >\r\n    <DialogTitle id=\"alert-dialog-title\" style={{ direction: lang.dir}} className={classes.title}>\r\n        {alertDialoge.title}\r\n    </DialogTitle>\r\n    <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-description\" style={{ direction: lang.dir}} className={classes.text}>\r\n        { alertDialoge.text }\r\n        </DialogContentText>\r\n    </DialogContent>\r\n    <DialogActions className={classes.controls}>\r\n        <Button\r\n            className={clsx(classes.control, classes.save)}\r\n            onClick={alertDialoge.handleConfirm}\r\n        >\r\n            { alertDialoge.confirmText || t(\"alert.confirm\") }\r\n        </Button>\r\n        <Button\r\n            className={clsx(classes.control, classes.cancel)}\r\n            onClick={alertDialoge.handleCancel}\r\n        >\r\n            { alertDialoge.cancelText || t(\"alert.cancel\") }\r\n        </Button>\r\n    </DialogActions>\r\n    </Dialog>\r\n\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        backgroundColor: 'rgba(0,0,0,0.4)'\r\n    },\r\n    container: {\r\n        backdropFilter: 'blur(10px)',\r\n    },\r\n    paper: {\r\n        width: 'auto',\r\n        padding: '5px',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        borderRadius: '10px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        color: 'white'\r\n    },\r\n    text: {\r\n        color: 'white'\r\n    },\r\n    controls: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    control: {\r\n        width: '30%',\r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        fontSize: '16px',\r\n        margin: '5px',\r\n        padding: '5px 30px',\r\n        borderRadius: '30px',\r\n        color: 'white', \r\n    },\r\n    save: {\r\n        background: 'rgba(0,0,0,0.2)', \r\n        '&:hover': {\r\n            background: 'black'\r\n        }\r\n    },\r\n    cancel: {\r\n        border: '0px solid grey',\r\n        '&:hover': {\r\n            borderWidth: '1px'\r\n        }\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\UpdateAsset.js",["280"],"import React, {  useState } from 'react'\r\nimport { makeStyles, InputLabel, OutlinedInput, Button, Typography, Collapse, FormControl, } from '@material-ui/core'\r\nimport clsx from 'clsx'\r\n\r\n\r\n\r\n\r\nexport const UpdateAsset = ({ open, data, handleUpdate, handleCancel }) => {\r\n\r\n    const [ values, setValues ] = useState({\r\n        address: data.address || '',\r\n        addInfo: data.addInfo || '',\r\n        type: data.type || ''\r\n    });\r\n    const [ errors, setErrors ] = useState([]);\r\n\r\n    const handleChange = req => event => {\r\n        if (req.type === req.field) {\r\n            setValues({\r\n                ...values, \r\n                [req.field]: event.target.value\r\n            })\r\n        } else {\r\n            setValues({\r\n                ...values,\r\n                [req.type]: {\r\n                    ...values[req.type],\r\n                    [req.field]: event.target.value\r\n                }\r\n            })\r\n        };\r\n\r\n    }\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <Collapse in={open}>\r\n            <div className={classes.container}>\r\n                <Typography className={classes.title}>\r\n                    {`עריכת נכס`}\r\n                </Typography>\r\n                <div className={classes.inputs}>\r\n                    <div className={classes.cont}>\r\n                        <FormControl variant='outlined' className={classes.textInput} fullWidth>\r\n                            <InputLabel htmlFor='outlined-input-password' shrink>שם רחוב</InputLabel>\r\n                            <OutlinedInput\r\n                                notched\r\n                                error={ errors.filter(e => e.field === 'street').length > 0 }\r\n                                id='outlined-input-password' \r\n                                value={ values.address.street }\r\n                                onChange={handleChange({type: 'address', field: 'street'})}\r\n                                labelWidth={60} \r\n                            />\r\n                        </FormControl>\r\n                    </div>           \r\n                    <div className={classes.cont}>\r\n                        <FormControl variant='outlined' className={classes.textInput}  >\r\n                            <InputLabel htmlFor='outlined-input-password' shrink>מספר רחוב</InputLabel>\r\n                            <OutlinedInput\r\n                                notched\r\n                                error={ errors.filter(e => e.field === 'streetNumber').length > 0 }\r\n                                id='outlined-input-password' \r\n                                value={ values.address.streetNumber }\r\n                                onChange={handleChange({type: 'address', field: 'streetNumber'})}\r\n                                labelWidth={75}\r\n                            />\r\n                        </FormControl>\r\n                        <FormControl variant='outlined' className={classes.textInput} >\r\n                            <InputLabel htmlFor='outlined-input-password' shrink>כניסה</InputLabel>\r\n                            <OutlinedInput\r\n                                notched\r\n                                error={ errors.filter(e => e.field === 'entrance').length > 0 }\r\n                                id='outlined-input-password'\r\n                                value={ values.address.entrance }\r\n                                onChange={handleChange({type: 'address', field: 'entrance'})}\r\n                                labelWidth={40}\r\n                            />\r\n                        </FormControl>\r\n                        <FormControl variant='outlined' className={clsx(classes.textInput)} >\r\n                            <InputLabel htmlFor='outlined-input-password' shrink>סוג נכס</InputLabel>\r\n                            <OutlinedInput\r\n                                notched\r\n                                error={ errors.filter(e => e.field === 'type').length > 0 }\r\n                                id='outlined-input-password' \r\n                                value={ values.type }\r\n                                onChange={handleChange({type: 'type', field: 'type'})}\r\n                                labelWidth={55}\r\n                            />\r\n                        </FormControl>\r\n                    </div>\r\n                    <div className={classes.cont}>\r\n                        <FormControl variant='outlined' className={classes.textInput} >\r\n                            <InputLabel htmlFor='outlined-input-password' shrink>עיר</InputLabel>\r\n                            <OutlinedInput\r\n                                notched\r\n                                error={ errors.filter(e => e.field === 'city').length > 0 }\r\n                                id='outlined-input-password' \r\n                                value={ values.address.city }\r\n                                onChange={handleChange({type: 'address', field: 'city'})}\r\n                                labelWidth={40}\r\n                            />\r\n                        </FormControl>\r\n                        <FormControl variant='outlined' className={classes.textInput} >\r\n                            <InputLabel htmlFor='outlined-input-password' shrink>מיקוד</InputLabel>\r\n                            <OutlinedInput\r\n                                notched\r\n                                error={ errors.filter(e => e.field === 'zipcode').length > 0 }\r\n                                id='outlined-input-password' \r\n                                value={ values.address.zipcode }\r\n                                onChange={handleChange({type: 'address', field: 'zipcode'})}\r\n                                labelWidth={40}\r\n                            />\r\n                        </FormControl>\r\n                    </div>\r\n                    <div className={classes.cont}>\r\n                        {\r\n                            data.addInfo.floor ?\r\n                            <FormControl variant='outlined' className={classes.textInput}>\r\n                                <InputLabel htmlFor='outlined-input-password' shrink>קומה</InputLabel>\r\n                                <OutlinedInput\r\n                                    notched\r\n                                    error={ errors.filter(e => e.field === 'floor').length > 0 }\r\n                                    id='outlined-input-password' \r\n                                    value={ values.addInfo.floor }\r\n                                    onChange={handleChange({type: 'addInfo', field: 'floor'})}\r\n                                    labelWidth={40}\r\n                                />\r\n                            </FormControl> :\r\n                            null\r\n                        }\r\n                        {\r\n                            data.addInfo.unit ?\r\n                            <FormControl variant='outlined' className={classes.textInput}>\r\n                                <InputLabel htmlFor='outlined-input-password' shrink>דירה</InputLabel>\r\n                                <OutlinedInput\r\n                                    notched\r\n                                    error={ errors.filter(e => e.field === 'unit').length > 0 }\r\n                                    id='outlined-input-password' \r\n                                    value={ values.addInfo.unit }\r\n                                    onChange={handleChange({type: 'addInfo', field: 'unit'})}\r\n                                    labelWidth={40}\r\n                                />\r\n                            </FormControl> :\r\n                            null\r\n                        }\r\n                        {\r\n                            data.addInfo.floors ?\r\n                            <FormControl variant='outlined' className={classes.textInput}>\r\n                                <InputLabel htmlFor='outlined-input-password' shrink>קומות</InputLabel>\r\n                                <OutlinedInput\r\n                                    notched\r\n                                    error={ errors.filter(e => e.field === 'floors').length > 0 }\r\n                                    id='outlined-input-password' \r\n                                    value={ values.addInfo.floors }\r\n                                    onChange={handleChange({type: 'addInfo', field: 'floors'})}\r\n                                    labelWidth={40}\r\n                                />\r\n                            </FormControl> :\r\n                            null\r\n                        }\r\n                    </div>\r\n                    <div className={classes.controls}>\r\n                        <Button\r\n                            className={clsx(classes.control, classes.save)}\r\n                            onClick={() => handleUpdate(data._id, values.address, values.addInfo, values.type)}\r\n                        >\r\n                            שמירה\r\n                        </Button>\r\n                        <Button\r\n                            className={clsx(classes.control, classes.cancel)}\r\n                            onClick={handleCancel}\r\n                        >\r\n                            ביטול\r\n                        </Button>\r\n                    </div>\r\n                    \r\n                    \r\n                         \r\n                </div> \r\n            </div>\r\n        </Collapse>\r\n        \r\n    )\r\n\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        background: 'rgba(0,0,0,0.2)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        height: '370px',\r\n        margin: '10px',\r\n        borderRadius: '19px',\r\n        boxShadow: 'rgba(0,0,0,0.25) 0px 2px 10px 5px',\r\n    },\r\n    title: {\r\n        width: 'auto',\r\n        padding: '5px 20px',\r\n        borderBottom: `1px solid rgba(255,255,255,0.1)`,\r\n        background: 'rgba(0,0,0,0.3)',\r\n        color: theme.palette.textPrimary,\r\n        fontSize: '18px',\r\n        borderRadius: '18px 18px 0 0',\r\n        boxShadow: 'rgba(0,0,0,0.25) 0 2px 4px 1px'\r\n    },\r\n    inputs: {\r\n        padding: '10px',\r\n        \r\n    },\r\n    typeContainer: {\r\n        display: 'flex'\r\n    },\r\n    textInput: {\r\n        margin: '5px',\r\n        '& input': {\r\n            color: 'white',\r\n            paddingLeft: '20px',\r\n        },\r\n        '& label': {\r\n            color: 'white',\r\n            paddingLeft: '5px' \r\n        },\r\n        '& fieldset': {\r\n            borderColor: 'rgba(255,255,255,0.6)',\r\n            borderRadius: '42px',\r\n            \r\n        }\r\n           \r\n    },\r\n    cont: {\r\n        display: 'flex'\r\n    },\r\n    controls: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    control: {\r\n        width: '30%',\r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        fontSize: '16px',\r\n        margin: '5px',\r\n        padding: '5px 30px',\r\n        borderRadius: '30px',\r\n        color: 'white', \r\n    },\r\n    save: {\r\n        background: 'rgba(0,0,0,0.2)', \r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\SortBy.js",["281","282"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport { makeStyles, ButtonGroup, Button, Menu, MenuItem } from '@material-ui/core'\r\nimport SortRoundedIcon from '@material-ui/icons/SortRounded';\r\nimport ArrowDropUpOutlinedIcon from '@material-ui/icons/ArrowDropUpOutlined';\r\nimport ArrowDropDownOutlinedIcon from '@material-ui/icons/ArrowDropDownOutlined';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { addQueryParam } from '../../api/genericApi';\r\nimport { useQuery } from './customHooks/useQuery';\r\nimport { useTranslation } from 'react-i18next'\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\n\r\n\r\nexport const SortBy = ({menuOptions, handleSortChange}) => {\r\n    \r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const { t, i18n } = useTranslation();\r\n    const { lang } = useContext(LanguageContext);\r\n    const [ values, setValues ] = useState({\r\n        sortBy: query.sortBy || '',\r\n        sortOrder: query.sortOrder || 'asc' \r\n    })\r\n    const [ anchorEl, setAnchorEl ] = useState(null);\r\n \r\n    useEffect(() => {\r\n        if (!values.sortBy) return;\r\n        history.push({\r\n            path: location.pathname,\r\n            search: addQueryParam(location.search, [{ name: 'sortBy', value: values.sortBy}, {name: 'sortOrder', value: values.sortOrder}])\r\n        })\r\n    }, [values])\r\n\r\n    const handleClick = menuOption => event => {\r\n        setValues({\r\n            ...values, \r\n            sortBy: menuOption\r\n        })\r\n        setAnchorEl(null);\r\n    }\r\n\r\n    const handleChange = () => {\r\n        if (values.sortBy) {\r\n            setValues({\r\n                ...values, \r\n                sortOrder: values.sortOrder === 'asc' ? 'desc' : 'asc'\r\n            })\r\n        }\r\n    }\r\n    \r\n    const getOptionText = (option) => {\r\n        const result = menuOptions.find( mo => option === mo.field);\r\n        if (result) {\r\n            return result.text\r\n        }\r\n        return t(\"sort.sortBy\")\r\n    }\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <ButtonGroup \r\n                className={classes.sort}\r\n            >\r\n\r\n                <Button \r\n                    className={classes.sortBy}\r\n                    onClick={event => setAnchorEl(event.currentTarget)}\r\n                    startIcon={<SortRoundedIcon className={classes.icon}/>}\r\n                >\r\n                    {values.sortBy ? getOptionText(values.sortBy) : `${t(\"sort.sortBy\")}`}\r\n                </Button>\r\n                <Menu\r\n                    anchorEl={anchorEl}\r\n                    open={Boolean(anchorEl)}\r\n                    onClose={() => setAnchorEl(null)}\r\n                    classes={{\r\n                        paper : classes.menu\r\n                    }}\r\n                    keepMounted\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'right',\r\n                    }}\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'right',\r\n                    }}\r\n                >\r\n                    {\r\n                        menuOptions.map((v,i) => {\r\n                            return (\r\n                                <MenuItem\r\n                                    key={i}\r\n                                    onClick={handleClick(v.field)}\r\n                                    style={{ direction: lang.code === 'he' ? 'rtl' : 'ltr'}}\r\n                                >\r\n                                    {v.text}\r\n                                </MenuItem>\r\n                            )\r\n                            \r\n                        })\r\n                    }\r\n                </Menu>\r\n                <Button\r\n                    endIcon={ values.sortOrder === 'asc' ? <ArrowDropUpOutlinedIcon /> : <ArrowDropDownOutlinedIcon />}\r\n                    onClick={handleChange}\r\n                    className={classes.sortOrder}\r\n                >\r\n                    { `${ values.sortOrder === 'asc' ? `${t(\"sort.asc\")}` : `${t(\"sort.desc\")}`}`}\r\n                </Button> \r\n            </ButtonGroup>\r\n            \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    sort: {\r\n        margin: '5px',\r\n        height: '45px',\r\n        \r\n    },\r\n    sortBy: {\r\n        borderRadius: '25px 0 0 25px',\r\n        padding: '0 15px 0 3px',\r\n        color: 'white',\r\n        width: 'auto',\r\n        whiteSpace: 'nowrap',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    sortOrder: {\r\n        borderRadius: '0px 25px 25px 0px',\r\n        padding: 0,\r\n        color: 'white',\r\n       width: '100px',\r\n       border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    menu: {\r\n        marginTop: '55px',\r\n        background: 'rgba(0,0,0,0.5)',\r\n        backdropFilter: 'blur(10px)',\r\n        color: 'white'\r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        margin: '0 6px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        \r\n    }\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\FiltersContext.js",["283"],"import React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const FiltersContext = createContext();\r\n\r\nexport const FiltersContextProvider = (props) => {\r\n    const [ filters, setFilters ] = useState({\r\n        sortBy: null,\r\n        sortOrder: 'asc',\r\n        activeFilters: []\r\n    });\r\n\r\n    return (\r\n        <FiltersContext.Provider value={{ filters, setFilters }}>\r\n            { props.children }\r\n        </FiltersContext.Provider>\r\n    );\r\n}\r\n\r\n\r\n\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\AuthContext.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\genericApi.js",["284"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\customHooks\\useQuery.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\SearchBox.js",["285","286","287"],"import React, { useState, useEffect } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { addQueryParam, removeQueryParam, queryParamsToObject, specialStringPurge} from '../../api/genericApi';\r\nimport { OutlinedInput, FormControl, makeStyles, Grid, ClickAwayListener } from '@material-ui/core'\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\nimport { useQuery } from './customHooks/useQuery';\r\nimport clsx from 'clsx';\r\n\r\nexport const SearchBox = ({ placeholder, filterField }) => {\r\n    \r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const [ onFocus, setOnFocus ] = useState(false);\r\n    const [ searchText, setSearchText ] = useState(specialStringPurge(query[filterField]) || '');\r\n    \r\n    useEffect(() => {\r\n        if (Boolean(searchText) && searchText === specialStringPurge(query[filterField])) return;\r\n        const timeOutId = setTimeout(() => handleSearch(searchText), 700);\r\n        return () => clearTimeout(timeOutId);\r\n    }, [searchText])\r\n\r\n    const handleChange = event => {\r\n        setSearchText(event.target.value)\r\n    }\r\n\r\n    const handleSearch = searchText => {\r\n        if (searchText) {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: addQueryParam(location.search, [{ name: filterField, value: searchText}])\r\n            });\r\n            return; \r\n        }\r\n        history.push({\r\n            path: location.pathname,\r\n            search: removeQueryParam(location.search, filterField)\r\n        });\r\n        \r\n    }\r\n\r\n    return (\r\n        <ClickAwayListener onClickAway={() => setOnFocus(false)}>\r\n            <div className={clsx(classes.container , onFocus && classes.focused)} xs={11} sm={9} md={8} lg={6}>\r\n                    <SearchRoundedIcon className={classes.icon}/>\r\n                    <FormControl variant='outlined' className={classes.form}>\r\n                        <OutlinedInput\r\n                            value={ searchText || '' }\r\n                            onChange={handleChange}\r\n                            placeholder={placeholder}\r\n                            className={clsx(classes.searchInput)}\r\n                            onFocus={() => setOnFocus(true)}\r\n                        />\r\n                    </FormControl>\r\n            </div>\r\n        </ClickAwayListener>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        margin: '5px',\r\n        height: '45px',\r\n        maxWidth: '450px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '25px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        transition: 'box-shadow 0.2s ease-in',\r\n        '&:hover': {\r\n            boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n            transition: 'box-shadow 0.2s ease-in'\r\n        }\r\n\r\n    },\r\n    focused: {\r\n        boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n        background: 'rgba(0,0,0,0.1)',\r\n        backdropFilter: 'blur(40px)'\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        \r\n    },\r\n    searchInput: {\r\n        height: '34px',\r\n        width: '98.5%',\r\n        margin: '3px 0.75%',\r\n        borderRadius: '5px 25px 25px 5px',\r\n        color: 'white',\r\n        '& input': {\r\n            padding: '12.5px 14px',\r\n        },\r\n        '& fieldset': {\r\n            border: '0'\r\n        } \r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        margin: '0 5px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        \r\n    }\r\n}))\r\n\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\FilterBySelect.js",["288","289","290"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport { makeStyles, Button, Menu, MenuItem, IconButton } from '@material-ui/core'\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { addQueryParam, specialStringPurge, removeQueryParam } from '../../api/genericApi';\r\nimport { useQuery } from './customHooks/useQuery';\r\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded';\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\n\r\nexport const FilterBySelect = ({ filterField, placeholder, filterIcon, optionsFunc }) => {\r\n    \r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const { lang } = useContext(LanguageContext);\r\n    const [ menuOptions, setMenuOptions] = useState([]);\r\n    const [ anchorEl, setAnchorEl ] = useState(null);\r\n    const [ value, setValue ] = useState(query[filterField] || '')\r\n\r\n    useEffect(() => {\r\n        optionsFunc()\r\n        .then(data => {\r\n            setMenuOptions(data)\r\n        }) \r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (value) {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: addQueryParam(location.search, [{ name: filterField, value }])\r\n            });\r\n            return;\r\n        }\r\n        if(query[filterField]) {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: removeQueryParam(location.search, filterField)\r\n            });\r\n        }     \r\n    }, [value])\r\n\r\n    const createTag = val => {\r\n        let data = menuOptions.find(op => val === op.value);\r\n        if (!data) return;\r\n        return (\r\n            <div className={classes.tag}>\r\n                <label className={classes.tagLabel}>\r\n                    { data.label }\r\n                </label>\r\n                <IconButton \r\n                    className={classes.removeBtn}\r\n                    onClick={removeChoice(data.value)}\r\n                >\r\n                    <CloseRoundedIcon className={classes.tagRemove}/>\r\n                </IconButton>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const removeChoice = value => event => {\r\n        event.stopPropagation();\r\n        setValue('')\r\n    }\r\n\r\n    const handleClick = val => event => {\r\n        setValue(val);\r\n        setAnchorEl(null)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                Boolean(menuOptions.length) &&\r\n                    <div item className={classes.select}>\r\n                        <Button \r\n                            className={classes.filterBy}\r\n                            onClick={event => setAnchorEl(event.currentTarget)}\r\n                            startIcon={filterIcon}\r\n                        >\r\n                            { value ? createTag(value) : <label style={{ padding: '0 15px', cursor: 'pointer' }}>{placeholder}</label>}\r\n                        </Button>\r\n                        <Menu\r\n                            anchorEl={anchorEl}\r\n                            open={Boolean(anchorEl)}\r\n                            onClose={() => setAnchorEl(null)}\r\n                            classes={{\r\n                                paper : classes.menu\r\n                            }}\r\n                            keepMounted\r\n                            anchorOrigin={{\r\n                                vertical: 'bottom',\r\n                                horizontal: 'right',\r\n                            }}\r\n                            transformOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'right',\r\n                            }}\r\n                        >\r\n                            {\r\n                                menuOptions.map((v,i) => {\r\n                                    return (\r\n                                        <MenuItem\r\n                                            key={i}\r\n                                            onClick={handleClick(v.value)}\r\n                                            className={classes.menuitem}\r\n                                            style={{ direction: lang.code === 'he' ? 'rtl' : 'ltr'}}\r\n                                        >\r\n                                            {v.label}\r\n                                        </MenuItem>\r\n                                    )\r\n                                    \r\n                                })\r\n                            }\r\n                        </Menu>\r\n                    </div>\r\n            }          \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    select: {\r\n        margin: '5px',\r\n        height: '45px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    filterBy: {\r\n        textTransform: 'none',\r\n        color: 'white',\r\n        padding: '0 4px',\r\n        height: '45px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '25px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        whiteSpace: 'nowrap',\r\n        '&:hover': {\r\n            boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n            \r\n        }\r\n    },\r\n    menu: {\r\n        marginTop: '55px',\r\n        background: 'rgba(0,0,0,0.5)',\r\n        backdropFilter: 'blur(10px)',\r\n        color: 'white'\r\n    },\r\n    menuitem: {\r\n        minWidth: '200px'\r\n    },\r\n    container: {\r\n        height: '45px',\r\n        border: '1px solid rgba(0,0,0,0.25)',\r\n        borderRadius: '25px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        '&:hover': {\r\n            boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n            \r\n        }\r\n    },\r\n    focused: {\r\n        border: `2px solid ${theme.palette.primary.main}`\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        \r\n    },\r\n    searchInput: {\r\n        height: '34px',\r\n        width: '98.5%',\r\n        margin: '3px 0.75%',\r\n        borderRadius: '5px 25px 25px 5px',\r\n        color: 'white',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        '& fieldset': {\r\n            border: '0'\r\n        } \r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        margin: '0 5px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    tag: {\r\n        padding: '5px 10px',\r\n        borderRadius: '50px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    tagLabel: {\r\n        padding: '0 5px'\r\n    },\r\n    removeBtn: {\r\n        padding: '4px',\r\n        color: 'white'\r\n    },\r\n    tagRemove: {\r\n        fontSize: '16px'\r\n    }\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\UpdateAssetOwner.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\FilterByMultiSelect.js",["291","292","293","294","295","296","297","298"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport { makeStyles, Grid, ClickAwayListener, FormControl, OutlinedInput, Button, Menu, MenuItem, IconButton } from '@material-ui/core'\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { addQueryParam, specialStringPurge, removeQueryParam } from '../../api/genericApi';\r\nimport { useQuery } from './customHooks/useQuery';\r\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded';\r\nimport clsx from 'clsx';\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\n\r\nexport const FilterByMultiSelect = ({ filterField, placeholder, filterIcon, optionsFunc }) => {\r\n    \r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const { lang } = useContext(LanguageContext);\r\n    const [ menuOptions, setMenuOptions] = useState([]);\r\n    const [ orgMenuOptions, setOrgMenuOptions ] = useState([])\r\n    const [ anchorEl, setAnchorEl ] = useState(null);\r\n    const [ values, setValues ] = useState( query[filterField] || [])\r\n\r\n    useEffect(() => {\r\n        optionsFunc()\r\n        .then(data => {\r\n            setOrgMenuOptions(data);\r\n            if (query[filterField]) {\r\n                data = data.filter(op => query[filterField].indexOf(op.value) === -1 )\r\n            }\r\n            setMenuOptions(data);\r\n            \r\n        }) \r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (values.length) {\r\n            \r\n            history.push({\r\n                path: location.pathname,\r\n                search: addQueryParam(location.search, [{ name: filterField, value: values }])\r\n            });\r\n            return;\r\n        }\r\n        if (query[filterField] && !values.length) {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: removeQueryParam(location.search, filterField)\r\n            });\r\n        }\r\n        \r\n    }, [values])\r\n\r\n    useEffect(() => {\r\n        if(!menuOptions.length) {\r\n            setAnchorEl(null)\r\n        }\r\n    }, [menuOptions])\r\n\r\n    const createTag = (val, key) => {\r\n        let data = orgMenuOptions.find(op => val === op.value);\r\n        if (!data) return;\r\n        return (\r\n            <div className={classes.tag} key={key}>\r\n                <label className={classes.tagLabel}>\r\n                    { data.label }\r\n                </label>\r\n                <IconButton \r\n                    className={classes.removeBtn}\r\n                    onClick={removeChoice(data.value)}\r\n                >\r\n                    <CloseRoundedIcon className={classes.tagRemove}/>\r\n                </IconButton>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const removeChoice = value => event => {\r\n        event.stopPropagation();\r\n        getMenuOptions(value)\r\n        .then(data => {\r\n            setValues(values => values.filter(val => val !== value ));\r\n            if (!menuOptions.length) {\r\n                setAnchorEl(null)\r\n            }\r\n            setMenuOptions(data)\r\n        });  \r\n    }\r\n\r\n    const handleClick = val => event => {\r\n        setValues([...values, val]);\r\n        setMenuOptions(menuOptions => menuOptions.filter( op => op.value !== val));\r\n    }\r\n\r\n    const getMenuOptions = (value) => {\r\n        return new Promise((resolve, reject) => {\r\n            let mop = menuOptions;\r\n            mop.push(orgMenuOptions.find( op => op.value === value));\r\n            resolve(mop);\r\n        }) \r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                Boolean(orgMenuOptions.length) &&\r\n                <div className={classes.select}>\r\n                        <Button \r\n                            className={classes.filterBy}\r\n                            onClick={event => setAnchorEl(event.currentTarget)}\r\n                            startIcon={filterIcon}\r\n                        >\r\n                            { \r\n                                values.length \r\n                                ?   \r\n                                    <div className={classes.selectedContainer}>\r\n                                        {\r\n                                             values.map((val, i ) => createTag(val, i)) \r\n                                        }\r\n                                    </div>\r\n                               \r\n                                :   <label style={{ \r\n                                        padding: '5px 0px 5px 20px', \r\n                                        cursor: 'pointer' \r\n                                    }}>\r\n                                        {placeholder}\r\n                                    </label>\r\n                            }\r\n                        </Button>\r\n                        <Menu\r\n                            anchorEl={anchorEl}\r\n                            open={Boolean(anchorEl)}\r\n                            onClose={() => setAnchorEl(null)}\r\n                            classes={{\r\n                                paper : classes.menu\r\n                            }}\r\n                            keepMounted\r\n                            anchorOrigin={{\r\n                                vertical: 'bottom',\r\n                                horizontal: 'right',\r\n                            }}\r\n                            transformOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'right',\r\n                            }}\r\n                        >\r\n                            {\r\n                                menuOptions.map((v,i) => {\r\n                                    return (\r\n                                        <MenuItem\r\n                                            key={i}\r\n                                            onClick={handleClick(v.value)}\r\n                                            className={classes.menuitem}\r\n                                            style={{ direction: lang.code === 'he' ? 'rtl' : 'ltr'}}\r\n                                        >\r\n                                            {v.label}\r\n                                        </MenuItem>\r\n                                    )\r\n                                    \r\n                                })\r\n                            }\r\n                        </Menu>\r\n               </div>\r\n            }          \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    select: {\r\n        margin: '5px',\r\n        height: 'auto',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        whiteSpace: 'nowrap'\r\n    },\r\n    filterBy: {\r\n        textTransform: 'none',\r\n        color: 'white',\r\n        padding: '0 5px',\r\n        minHeight: '45px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '25px',\r\n        \r\n        '&:hover': {\r\n            boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n        }\r\n    },\r\n    selectedContainer: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        whiteSpace: 'nowrap',\r\n        flexWrap: 'wrap',\r\n        width: 'fit-content',\r\n        maxWidth: '400px'\r\n    },\r\n    menu: {\r\n        marginTop: '55px',\r\n        background: 'rgba(0,0,0,0.5)',\r\n        backdropFilter: 'blur(10px)',\r\n        color: 'white'\r\n    },\r\n    menuitem: {\r\n        minWidth: '200px'\r\n    },\r\n    container: {\r\n        height: '45px',\r\n        border: '1px solid rgba(0,0,0,0.25)',\r\n        borderRadius: '25px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        '&:hover': {\r\n            boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n            \r\n        }\r\n    },\r\n    focused: {\r\n        boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n        background: 'rgba(0,0,0,0.1)',\r\n        backdropFilter: 'blur(40px)'\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        \r\n    },\r\n    searchInput: {\r\n        height: '34px',\r\n        width: '98.5%',\r\n        margin: '3px 0.75%',\r\n        borderRadius: '5px 25px 25px 5px',\r\n        color: 'white',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        '& fieldset': {\r\n            border: '0'\r\n        } \r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        margin: '0 5px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    tag: {\r\n        padding: '5px 10px',\r\n        borderRadius: '50px',\r\n        boxShadow: 'rgba(0,0,0,0.25) 0px 0px 3px 1px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        margin: '3px'\r\n    },\r\n    tagLabel: {\r\n        padding: '0 5px'\r\n    },\r\n    removeBtn: {\r\n        padding: '4px',\r\n        color: 'white'\r\n    },\r\n    tagRemove: {\r\n        fontSize: '16px'\r\n    }\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\LanguageContext.js",["299"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\i18n.js",["300"],"import i18n from 'i18next';\r\nimport Backend from 'i18next-http-backend';\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\nimport { initReactI18next }from 'react-i18next';\r\nimport en from './lacales/en/translation.json';\r\nimport he from './lacales/he/translation.json';\r\n\r\nconst resources = {\r\n    en: {\r\n        translation: en\r\n    },\r\n    he: {\r\n        translation: he\r\n    }\r\n}\r\n\r\ni18n\r\n    .use(LanguageDetector)\r\n    .use(initReactI18next)\r\n    .init({\r\n        resources,\r\n        fallbackLng: 'he',\r\n        detection: {\r\n            order: ['queryString', 'cookie'],\r\n            cache: ['cookie']\r\n        },\r\n        interpolation: {\r\n            escapeValue: false\r\n        }\r\n    });\r\n\r\nexport default i18n;\r\n    ","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\Systems.js",["301","302","303","304","305"],"import React, { useState, useEffect } from 'react';\r\nimport { Button, Grid, LinearProgress, makeStyles, Paper, useMediaQuery } from '@material-ui/core';\r\nimport { SystemsControls } from './SystemsControls';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useQuery } from '../../reuseables/customHooks/useQuery';\r\nimport { useLocation } from 'react-router';\r\nimport { queryParamsToObject } from '../../../api/genericApi';\r\nimport { getSystemsByAsset } from '../../../api/systemsApi';\r\nimport { applyFilters } from '../../../api/systemsApi';\r\nimport { System } from './System';\r\nimport { SystemsHeader } from './SystemsHeader';\r\n\r\nexport const Systems = () => {\r\n\r\n    const classes = useStyles();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const { t, i18n } = useTranslation();\r\n    const [ systems, setSystems ] = useState([]);\r\n    const [ isLoading, setIsLoading ] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (!isLoading) return;    \r\n        let queryParams = queryParamsToObject(location.search);\r\n        if (!queryParams.asset) {\r\n            setIsLoading(false);\r\n            return;\r\n        }\r\n        \r\n\r\n        getSystemsByAsset(queryParams.asset)\r\n        .then(data => {\r\n            return applyFilters(queryParams, data);\r\n        })\r\n        .then(data => {\r\n            setSystems(data);     \r\n        })\r\n        .finally(() => {\r\n            setIsLoading(false);\r\n        });\r\n    }, [isLoading])\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n    }, [location.search])\r\n\r\n\r\n    return(\r\n        <div>\r\n            <Grid container justify='center'>\r\n                <Grid item xs={12}>\r\n                    <div className={classes.pageModule}>\r\n                        {t(\"assetsModule.systems\")}\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} >\r\n                    <SystemsControls />\r\n                </Grid>\r\n                <Grid container justify='center' >\r\n                    {\r\n                        !query.asset \r\n                        ?   <div \r\n                                className={classes.initMessage}>\r\n                                {t(\"systemsModule.initMessage\")}\r\n                            </div>\r\n                        :   isLoading \r\n                            ?   <LinearProgress />\r\n                            :   \r\n                            <React.Fragment>\r\n                                <SystemsHeader />\r\n                                {\r\n                                    systems.map((system, i) => \r\n                                        <System systemData={system} key={i} />\r\n                                    )\r\n                                }\r\n                            </React.Fragment>\r\n                            \r\n                    }   \r\n                </Grid>\r\n            </Grid>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    initMessage: {\r\n        color: 'white',\r\n        padding: '10px 40px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '50px',\r\n        width: 'fit-content',\r\n        margin: '5px auto',\r\n        textAlign: 'center',\r\n        fontSize: '16px'\r\n    },\r\n    pageModule: {\r\n        color: 'white',\r\n        padding: '10px 40px',\r\n        fontSize: '18px',\r\n        background: 'rgba(0,0,0,0.6)',\r\n        margin: '0px auto 5px',\r\n        width: '30%',\r\n        textAlign: 'center',\r\n        borderRadius: '0 0 25px 25px',\r\n        lineHeight: '1'\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemsControls.js",["306","307"],"import React, { useState, useEffect } from 'react'\r\nimport { Grid, makeStyles, useMediaQuery, Button, Collapse } from '@material-ui/core'\r\nimport { SortBy } from '../../reuseables/SortBy'\r\nimport { SearchBox } from '../../reuseables/SearchBox';\r\nimport { FilterBySelect } from '../../reuseables/FilterBySelect';\r\nimport PersonRoundedIcon from '@material-ui/icons/PersonRounded';\r\nimport { createUserOptions } from '../../../api/userApi';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { SearchBoxSelect } from '../../reuseables/SearchBoxSelect';\r\nimport { getAssetsSuggestions } from '../../../api/systemsApi';\r\nimport { getFullAddress, getAsset } from '../../../api/assetsApi';\r\nimport { useLocation } from 'react-router';\r\nimport { useQuery } from '../../reuseables/customHooks/useQuery';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport ExpandMoreRoundedIcon from '@material-ui/icons/ExpandMoreRounded';\r\nimport { ClearRounded } from '@material-ui/icons';\r\n\r\nconst sortOptions = [\r\n    {\r\n        text: 'שם מערכת',\r\n        field: 'systemName'\r\n    },\r\n    {\r\n        text: 'מנהל מערכת',\r\n        field: 'owner'\r\n    },\r\n    {\r\n        text: 'כמות תקלות פתוחות',\r\n        field: 'openFaultsCount'\r\n    },\r\n    \r\n]\r\n\r\nexport const SystemsControls = () => {\r\n    \r\n    const classes = useStyles();\r\n    const { t, i18n } = useTranslation();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const [ reloadedValue, setReloadedValue ] = useState(null);\r\n    const [ collapsed, setCollapsed ] = useState(!downSm ? true : false);\r\n    \r\n    useEffect(() => {\r\n        if (query.asset) {\r\n            handleReloaded(query.asset)\r\n            .then(data => {\r\n                if (data) {\r\n                    setReloadedValue(data);\r\n                } else {\r\n                    \r\n                }\r\n            })\r\n        } else {\r\n            setReloadedValue({\r\n                label: '',\r\n                value: null\r\n            });\r\n        }\r\n    }, [location.search])\r\n\r\n    const handleReloaded = async (assetId) => {\r\n        const res = await getAsset(assetId);\r\n        if (res) {\r\n            return {\r\n                label: getFullAddress(res.data),\r\n                value: res.data._id\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    const toggleCollapse = () => {\r\n        if (collapsed) {\r\n            setCollapsed(false);\r\n            return;\r\n        }\r\n        setCollapsed(true)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                downSm &&\r\n                <Grid container justify='center'>\r\n                    <Grid item xs={11} className={classes.gridItem}>\r\n                        <Button\r\n                        className={classes.sortandfilter}\r\n                        startIcon={<FilterListIcon className={classes.icon} />}\r\n                        endIcon={collapsed ? <ClearRounded /> : <ExpandMoreRoundedIcon />}\r\n                        onClick={toggleCollapse}\r\n                    >\r\n                        {t(`faultsModule.${ collapsed ? 'hide' : 'show'}Filters`)}\r\n                    </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                    \r\n            }\r\n            <Collapse in={collapsed}>\r\n                <Grid container justify='center' >\r\n                    <Grid item xs={12} className={classes.gridItem}>\r\n\r\n                        {\r\n                            reloadedValue &&\r\n                            <SearchBoxSelect\r\n                                suggestionsFunc={getAssetsSuggestions}\r\n                                placeholder={t(\"systemsModule.filterByAsset\")}\r\n                                filterField={'asset'}\r\n                                reloadedLabel={reloadedValue.label}\r\n                                reloadedValue={reloadedValue.value}\r\n                            />\r\n                        }  \r\n                        <SearchBox \r\n                                placeholder={t(\"systemsModule.filterBySystemName\")}\r\n                                filterField={'name'}\r\n                            />\r\n                        </Grid>\r\n                    <Grid xs={11} className={classes.gridItem}>\r\n                        <FilterBySelect \r\n                            optionsFunc={createUserOptions}\r\n                            placeholder={t(\"systemsModule.filterBySystemOwner\")}\r\n                            filterIcon={<PersonRoundedIcon className={classes.icon }/>}\r\n                            filterField={'owner'}\r\n                        />\r\n                        <SortBy \r\n                            menuOptions={sortOptions}\r\n                        />\r\n                    </Grid>\r\n                    \r\n                </Grid>\r\n            </Collapse>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(them => ({\r\n    gridItem: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap'\r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        marginLeft: '4px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    sortandfilter: {\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        background: 'rgba(0,0,0,0.7)',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '5px 25px 5px 3px',\r\n        whiteSpace: 'nowrap',\r\n        '&:hover': {\r\n            background: 'black'\r\n        }\r\n    }\r\n}))\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\SearchBoxSelect.js",["308","309","310","311","312"],"import React, { useState, useEffect, useContext, useRef } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { addQueryParam, removeQueryParam, queryParamsToObject, specialStringPurge} from '../../api/genericApi';\r\nimport { OutlinedInput, FormControl, makeStyles, Grid, ClickAwayListener, IconButton, Menu, MenuItem } from '@material-ui/core'\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded';\r\nimport { useQuery } from './customHooks/useQuery';\r\nimport clsx from 'clsx';\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\n\r\nexport const SearchBoxSelect = ({ placeholder, filterField, suggestionsFunc, reloadedLabel, reloadedValue }) => {\r\n    \r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const cont = useRef();\r\n    const input = useRef();\r\n    const { lang } = useContext(LanguageContext);\r\n    const [ onFocus, setOnFocus ] = useState(false);\r\n    const [ searchText, setSearchText ] = useState('');\r\n    const [ anchorEl, setAnchorEl ] = useState(null);\r\n    const [ menuOptions, setMenuOptions ] = useState([]);\r\n    const [ value, setValue ] = useState(reloadedValue || null);\r\n    \r\n    useEffect(() => {\r\n        if (Boolean(!searchText)) return;\r\n        const timeOutId = setTimeout(() => handleSearch(searchText), 700);\r\n        return () => clearTimeout(timeOutId);\r\n    }, [searchText])\r\n\r\n    useEffect(() => {\r\n        if (value) {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: addQueryParam(location.search, [{ name: filterField, value: value}])\r\n            });\r\n            return;\r\n        } else {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: removeQueryParam(location.search, filterField)\r\n            });\r\n        }\r\n    }, [value])\r\n\r\n    const handleChange = event => {\r\n        setSearchText(event.target.value)\r\n    }\r\n\r\n    const handleSearch = async searchText => {\r\n        if (searchText) {\r\n            const data = await suggestionsFunc(searchText);\r\n            setMenuOptions(data || []);\r\n            setAnchorEl(input.current)\r\n            \r\n\r\n                 \r\n        } else {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: removeQueryParam(location.search, filterField)\r\n            });\r\n        }\r\n        // if (searchText) {\r\n        //     history.push({\r\n        //         path: location.pathname,\r\n        //         search: addQueryParam(location.search, [{ name: 'searchText', value: searchText}])\r\n        //     });\r\n        //     return; \r\n        // }   \r\n    }\r\n    \r\n    const getTag = val => {\r\n        let data = menuOptions.find(op => val === op.value);\r\n        return createTag(data)\r\n    }\r\n\r\n    const createTag = data => {\r\n        if (!data) return;\r\n        return (\r\n            <div className={classes.tag}>\r\n                <label className={classes.tagLabel}>\r\n                    { data.label }\r\n                </label>\r\n                <IconButton \r\n                    className={classes.removeBtn}\r\n                    onClick={removeChoice(data.value)}\r\n                >\r\n                    <CloseRoundedIcon className={classes.tagRemove}/>\r\n                </IconButton>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const removeChoice = value => event => {\r\n        event.stopPropagation();\r\n        setValue(null)\r\n    }\r\n\r\n    const handleClick = val => event => {\r\n        setValue(val);\r\n        setAnchorEl(null)\r\n    }\r\n\r\n    return (\r\n        <ClickAwayListener onClickAway={() => setOnFocus(false)}>\r\n            <div ref={cont} className={clsx(classes.container , onFocus && classes.focused, Boolean(value) && classes.selected)} xs={11} sm={9} md={8} lg={6}>\r\n                <SearchRoundedIcon className={classes.icon}/>\r\n                {\r\n                    value \r\n                    ?   query[filterField] === value\r\n                        ?  createTag(reloadedLabel && reloadedValue ? { label: reloadedLabel, value: reloadedValue} : null)\r\n                        :  getTag(value)\r\n                    :\r\n                    <FormControl variant='outlined' className={classes.form}>\r\n                        <OutlinedInput\r\n                            autoFocus={true}\r\n                            inputRef={input}\r\n                            value={ searchText || '' }\r\n                            onChange={handleChange}\r\n                            placeholder={placeholder}\r\n                            className={clsx(classes.searchInput)}\r\n                            onFocus={() => setOnFocus(true)}\r\n                        />\r\n                    </FormControl>\r\n                }\r\n                {\r\n                    Boolean(menuOptions.length) &&\r\n                    <Menu         \r\n                        anchorEl={anchorEl}\r\n                        open={Boolean(anchorEl)}\r\n                        onClose={() => setAnchorEl(null)}\r\n                        classes={{\r\n                            paper : classes.menu\r\n                        }}\r\n                        keepMounted\r\n                        anchorOrigin={{\r\n                            vertical: 'bottom',\r\n                            horizontal: 'right',\r\n                        }}\r\n                        transformOrigin={{\r\n                            vertical: 'top',\r\n                            horizontal: 'right',\r\n                        }}\r\n                    >\r\n                    {\r\n                        menuOptions.map((v,i) => {\r\n                            return (\r\n                                <MenuItem\r\n                                    key={i}\r\n                                    onClick={handleClick(v.value)}\r\n                                    className={classes.menuitem}\r\n                                    style={{ direction: lang.code === 'he' ? 'rtl' : 'ltr'}}\r\n                                >\r\n                                    {v.label}\r\n                                </MenuItem>\r\n                            )\r\n                            \r\n                        })\r\n                    }\r\n                    </Menu>\r\n                }\r\n            </div>   \r\n        </ClickAwayListener>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        margin: '5px',\r\n        padding: '0 5px',\r\n        maxWidth: '450px',\r\n        height: '43px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '25px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        transition: 'box-shadow 0.2s ease-in',\r\n        '&:hover': {\r\n            boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n            transition: 'box-shadow 0.2s ease-in'\r\n        }\r\n\r\n    },\r\n    focused: {\r\n        boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n        background: 'rgba(0,0,0,0.1)',\r\n        backdropFilter: 'blur(40px)'\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        \r\n    },\r\n    searchInput: {\r\n        height: '34px',\r\n        width: '98.5%',\r\n        margin: '3px 0.75%',\r\n        borderRadius: '5px 25px 25px 5px',\r\n        color: 'white',\r\n        '& input': {\r\n            padding: '12.5px 14px',\r\n        },\r\n        '& fieldset': {\r\n            border: '0'\r\n        } \r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        marginRight: '5px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        \r\n    },\r\n    menu: {\r\n        marginTop: '55px',\r\n        background: 'rgba(0,0,0,0.5)',\r\n        backdropFilter: 'blur(10px)',\r\n        color: 'white'\r\n    },\r\n    menuitem: {\r\n        minWidth: '200px'\r\n    },\r\n    tag: {\r\n        padding: '5px 10px',\r\n        borderRadius: '50px',\r\n        boxShadow: 'rgba(0,0,0,0.25) 0px 0px 3px 1px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        color: 'white'\r\n    },\r\n    tagLabel: {\r\n        padding: '0 5px'\r\n    },\r\n    removeBtn: {\r\n        padding: '4px',\r\n        color: 'white'\r\n    },\r\n    tagRemove: {\r\n        fontSize: '16px'\r\n    },\r\n    selected: {\r\n        width: 'fit-content'\r\n    }\r\n}))\r\n\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\systemsApi.js",["313"],"import axios from 'axios';\r\nimport { getAssets, getFullAddress } from './assetsApi'\r\n\r\nexport const getAssetsSuggestions = async (searchText) => {\r\n    const res = await getAssets();\r\n    let result = [];\r\n    if (!searchText) { \r\n        res.data.forEach(asset => {\r\n            result.push({ \r\n                text: getFullAddress(asset),\r\n                value: asset._id\r\n            })\r\n        });\r\n        return result;\r\n    };\r\n    let filtered =  res.data.filter(asset => {\r\n        return getFullAddress(asset).indexOf(searchText) !== -1\r\n    });\r\n    filtered.forEach(asset => {\r\n        result.push({ \r\n            label: getFullAddress(asset),\r\n            value: asset._id\r\n        })\r\n    });\r\n    return result;\r\n}\r\n\r\nexport const getSystemsByAsset = async (assetId) => {\r\n    \r\n    const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/systems/getSystems`, { assetId });\r\n    if (res.data) {\r\n        return res.data;\r\n    }\r\n    return [];\r\n}\r\n\r\nexport const applyFilters = (filters, systems) => {\r\n    return new Promise((resolve, reject) => {\r\n        if (!filters) resolve(systems);\r\n        if (filters.sortBy) {\r\n            if (filters.sortBy === 'systemName') {\r\n                 systems = systems.sort((a,b) => {\r\n                     \r\n                     return (\r\n                         filters.sortOrder === 'asc' \r\n                         ?   a.name > b.name ? 1 : -1\r\n                         :   a.name < b.name ? 1 : -1\r\n                     )      \r\n                 })\r\n            } else if (filters.sortBy === 'owner') {\r\n                systems = systems.sort((a,b) => {\r\n                    let aName = `${a.owner.firstName} ${a.owner.lastName}`\r\n                    let bName = `${b.owner.firstName} ${b.owner.lastName}`\r\n                    return (\r\n                        filters.sortOrder === 'asc' \r\n                        ?   aName > bName ? 1 : -1\r\n                        :   aName < bName ? 1 : -1\r\n                    )      \r\n                })\r\n            }\r\n\r\n        }\r\n        if(filters.name){\r\n           systems = systems.filter(system => {\r\n               return system.name.indexOf(filters.name) !== -1\r\n           })\r\n        }\r\n        if (filters.owner) {\r\n            systems = systems.filter(system => {\r\n                if (filters.owner instanceof Array) {\r\n                    return filters.owner.indexOf(system.owner._id) !== -1\r\n                }\r\n                return  system.owner._id == filters.owner\r\n            })\r\n        }\r\n        resolve(systems);\r\n    });\r\n   \r\n\r\n}\r\n\r\n\r\nexport const updateSystemOwner = async (systemId, owner) => {\r\n    const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/systems/updateSystemOwner`, { systemId, owner });\r\n    if (res.data) {\r\n        return res.data;\r\n    }\r\n    return [];\r\n}\r\n\r\nexport const updateSystemName = async (systemId, name) => {\r\n    const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/systems/updateSystemName`, { systemId, name });\r\n    if (res.data) {\r\n        return res.data;\r\n    }\r\n    return [];\r\n}\r\n\r\nexport const removeSystemUser = async (systemId, userId) => {\r\n    const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/systems/removeUser`, { systemId, userId });\r\n    if (res.data) {\r\n        return res.data;\r\n    }\r\n    return [];\r\n}\r\n\r\nexport const addUser = async (systemId, userId) => {\r\n    const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/systems/addUser`, { systemId, userId });\r\n    if (res.data) {\r\n        return res.data;\r\n    }\r\n    return null;\r\n}","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\System.js",["314","315"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\UpdateSystemOwner.js",["316","317","318"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { Grid, makeStyles, Paper, FormControl, IconButton, useMediaQuery, Fade, Modal, Backdrop,Select, MenuItem, Button } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport ClearRoundedIcon from '@material-ui/icons/ClearRounded';\r\nimport { LanguageContext } from '../../../context/LanguageContext';\r\nimport { getUserList } from '../../../api/userApi';\r\nimport clsx from 'clsx'\r\n\r\n\r\n\r\nexport const UpdateSystemOwner = ({ handleClose, handleSave, isOpen, currentOwner }) => {\r\n\r\n    const classes = useStyles();\r\n    const { lang } = useContext(LanguageContext);\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const { t, i18n } = useTranslation();\r\n    const [ userList, setUserList ] = useState([]);\r\n    const [ selectedUser, setSelectedUser ] = useState(null)\r\n    \r\n    useEffect(() => {\r\n        getUserList()\r\n        .then(data => {\r\n            setUserList(data.filter(u => u._id !== currentOwner._id ));\r\n        })\r\n    }, [])\r\n\r\n    const handleChange = event => {\r\n        setSelectedUser(event.target.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal\r\n            open={isOpen}\r\n            onClose={handleClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout: 500\r\n            }}\r\n            className={classes.modal}\r\n        >\r\n            <Fade in={isOpen}>\r\n                <Grid container justify='center' alignItems='center' style={{ outline: '0'}}>\r\n                    <Grid item xs={10} sm={7} md={5} lg={3} xl={3}>\r\n                        <Paper \r\n                            className={classes.paper} \r\n                            style={{ direction: lang.dir }}\r\n                            elevation={6}    \r\n                        >\r\n                            <div className={classes.header}>\r\n                                <div className={classes.title}>\r\n                                    {t(\"systemsModule.updateSystemOwnerTitle\")}\r\n                                </div>\r\n                                <IconButton className={classes.closeBtn} onClick={handleClose}>\r\n                                    <ClearRoundedIcon className={classes.icon}/>\r\n                                </IconButton>  \r\n                            </div>\r\n                            <div className={classes.instructions}>\r\n                                {t(\"systemsModule.chooseManagerToUpdate\")}\r\n                            </div>\r\n                            <FormControl variant='outlined' className={classes.textInput} >\r\n                                <Select\r\n                                    value={selectedUser}\r\n                                    onChange={handleChange}\r\n                                    className={classes.menu}\r\n                                    MenuProps={{\r\n                                        classes: {\r\n                                            paper: classes.menupaper,\r\n                                            autoWidth: true\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    {\r\n                                        userList.map( (user, i) => {\r\n                                            return (\r\n                                                <MenuItem\r\n                                                    className={classes.menuitem}\r\n                                                    value={user._id} \r\n                                                    key={i}\r\n                                                    style={{ direction: lang.code === 'he' ? 'rtl' : 'ltr'}}\r\n                                                >\r\n                                                    {`${user.firstName} ${user.lastName}`}\r\n                                                </MenuItem>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Select>\r\n                            </FormControl>\r\n                            <div className={classes.controls}>\r\n                                <Button\r\n                                    className={clsx(classes.control, classes.save)}\r\n                                    onClick={() => handleSave(selectedUser)}\r\n                                    disabled={!selectedUser}\r\n                                >\r\n                                    {t(\"alert.confirm\")}\r\n                                </Button>\r\n                                <Button\r\n                                    className={clsx(classes.control, classes.cancel)}\r\n                                    onClick={handleClose}\r\n                                >\r\n                                    {t(\"alert.cancel\")}\r\n                                </Button>\r\n                            </div>\r\n                        </Paper>\r\n                    </Grid>\r\n                    \r\n                </Grid> \r\n                \r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        background: 'rgba(0,0,0,0.4)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        padding: '10px',\r\n        borderRadius: '10px',\r\n        '&:focus': {\r\n            outline: 'none'\r\n        }\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backdropFilter: 'blur(10px)'   \r\n    },\r\n    header: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center'\r\n    },\r\n    title: {\r\n        color: 'white',\r\n        fontSize: '18px',\r\n        padding: '5px 10px',\r\n        height: 'fit-content'\r\n    },\r\n    closeBtn: {\r\n        fontSize: '20px',\r\n        height: '40px',\r\n        width: '40px'\r\n    },\r\n    icon: {\r\n        color: 'white',\r\n        borderRadius: '25px',\r\n        padding: '5px',\r\n        '&:hover': {\r\n            background: 'rgba(255,255,255,0.2)'\r\n        }\r\n    },\r\n    instructions: {\r\n        width: 'auto',\r\n        color: 'rgba(255,255,255,0.6)',\r\n        fontSize: '12px',\r\n        margin: '0px 10px'\r\n    },\r\n    menu: {\r\n        color: 'white',\r\n        '&:hover': {\r\n            borderColor: 'white'\r\n        }\r\n    },\r\n    menupaper: {\r\n        background: 'rgba(0,0,0,0.3)',\r\n        backdropFilter: 'blur(10px)',\r\n\r\n    },\r\n    menuitem: {\r\n        color: 'white'\r\n    },\r\n    textInput: {\r\n        margin: '20px 5px',\r\n        width: '300px',\r\n        '& input': {\r\n            color: 'white',\r\n            paddingLeft: '20px',\r\n        },\r\n        '& label': {\r\n            color: 'white',\r\n            paddingLeft: '5px' \r\n        },\r\n        '& fieldset': {\r\n            borderColor: 'rgba(255,255,255,0.6)',\r\n            borderRadius: '42px'\r\n        }    \r\n    },\r\n    controls: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    control: {\r\n        width: '30%',\r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        fontSize: '16px',\r\n        margin: '5px',\r\n        padding: '5px 30px',\r\n        borderRadius: '30px',\r\n        color: 'white', \r\n    },\r\n    save: {\r\n        background: 'rgba(0,0,0,0.2)', \r\n        '&:hover': {\r\n            background: 'black'\r\n        },\r\n        '&:disabled': {\r\n            color: 'rgba(255,255,255,0.3)'\r\n        }\r\n    },\r\n    cancel: {\r\n        border: '0px solid grey',\r\n        '&:hover': {\r\n            borderWidth: '1px'\r\n        }\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemName.js",["319","320"],"import React, { useState } from 'react';\r\nimport { makeStyles, useMediaQuery, Button, Fade, OutlinedInput, FormControl, InputLabel, ClickAwayListener, IconButton, } from '@material-ui/core';\r\nimport SaveRoundedIcon from '@material-ui/icons/SaveRounded';\r\nimport ClearRoundedIcon from '@material-ui/icons/ClearRounded';\r\nimport { updateSystemName } from '../../../api/systemsApi'\r\n\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\r\nimport { green, red } from '@material-ui/core/colors';\r\n\r\nexport const SystemName = ({ systemId, editName, setEditName, setSystemName, title }) => {\r\n\r\n    const classes = useStyles();\r\n    const { t, i18n } = useTranslation();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const [ textValue, setTextValue ] = useState(title);\r\n    const [ editNameHover, setEditNameHover ] = useState(false);\r\n\r\n    const handleChange = event => {\r\n        setTextValue(event.target.value);\r\n    };\r\n\r\n    const handleSave = async () => {\r\n         await updateSystemName(systemId, textValue);\r\n         setSystemName(textValue);\r\n         setEditName(false);\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                editName ?\r\n                <ClickAwayListener onClickAway={() => setEditName(false)}>\r\n                    <div className={classes.editContainer}>\r\n                        <FormControl variant='outlined' className={classes.textInput}>\r\n                            <InputLabel htmlFor='olip' shrink>{t(\"systemsModule.systemName\")}</InputLabel>\r\n                            <OutlinedInput\r\n                                autoFocus\r\n                                notched\r\n                                id='olip' \r\n                                value={ textValue }\r\n                                onChange={handleChange}\r\n                                labelWidth={75}\r\n                                className={classes.input} \r\n                            />\r\n                        </FormControl>\r\n                        <IconButton \r\n                            className={classes.save}\r\n                            onClick={handleSave}\r\n                        >\r\n                            <SaveRoundedIcon className={classes.icon}/>\r\n                        </IconButton>\r\n                        <IconButton \r\n                            className={classes.cancel}\r\n                            onClick={() => setEditName(false)}\r\n                        >\r\n                            <ClearRoundedIcon className={classes.icon} />\r\n                        </IconButton>\r\n                       </div> \r\n                </ClickAwayListener>\r\n                \r\n                : \r\n                <Button \r\n                    className={classes.systemName}\r\n                    onMouseEnter={() => setEditNameHover(true)}\r\n                    onMouseLeave={() => setEditNameHover(false)}\r\n                    onClick={() => { setEditNameHover(false); setEditName(true)}}\r\n                >\r\n                    { title }\r\n                    {\r\n                        editNameHover &&\r\n                        <Fade in={true} timeout={700}>\r\n                            <EditRoundedIcon style={{ \r\n                                margin: '0 10px 0 0',\r\n                                fontSize: '16px'\r\n                            }}/>\r\n                        </Fade>\r\n                        \r\n                    }\r\n                </Button>\r\n            }\r\n        </React.Fragment>                    \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    editContainer: {\r\n        height: 'auto',\r\n        margin: 'auto 0',\r\n        width: '100%',\r\n        dispaly: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    systemName: {\r\n        width: 'auto',\r\n        color: 'white',\r\n        margin: 'auto 20px',\r\n        fontSize: '16px',\r\n        whiteSpace: 'wrap',\r\n        borderRadius: '50px',\r\n        padding: '5px 20px',\r\n        textAlign: 'left'\r\n    },\r\n    textInput: {\r\n        width: '65%',\r\n        margin: '15px 5px 15px 10px',\r\n        '& label.Mui-focused': {\r\n            color: 'white',\r\n        },\r\n        '& label': {\r\n            color: 'white'\r\n        },\r\n        '& .MuiOutlinedInput-root': {\r\n            '& fieldset': {\r\n                borderColor: 'white',\r\n            },\r\n            '&:hover fieldset': {\r\n                borderColor: 'rgba(255,255,255,0.7)',\r\n            },\r\n            '&.Mui-focused fieldset': {\r\n                borderColor: 'rgba(255,255,255,0.7)',\r\n              },\r\n        },\r\n        \r\n    },\r\n    input: {\r\n        color: 'white',\r\n        height: '45px',\r\n        borderRadius: '25px',\r\n        padding: '10px',\r\n        '&:focus': {\r\n            border: '2px solid white'\r\n        }\r\n\r\n    },\r\n    icon: {\r\n        color: 'white',\r\n        fontSize: '20px',\r\n        padding: '0px',\r\n        '&hover': {\r\n\r\n        }\r\n    },\r\n    save: {\r\n        background: green[800],\r\n        padding: '8px',\r\n        margin: '18px 5px',\r\n        \r\n    },\r\n    cancel: {\r\n        background: red[800],\r\n        padding: '8px',\r\n        margin: '18px 5px',\r\n       \r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\AddLinkedUser.js",["321","322","323"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { Grid, makeStyles, Paper, FormControl, IconButton, useMediaQuery, Fade, Modal, Backdrop,Select, MenuItem, Button } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport ClearRoundedIcon from '@material-ui/icons/ClearRounded';\r\nimport { LanguageContext } from '../../../context/LanguageContext';\r\nimport { getUserList } from '../../../api/userApi';\r\nimport clsx from 'clsx'\r\n\r\n\r\n\r\nexport const AddLinkedUser = ({ handleClose, handleSave, isOpen, linkedUsers }) => {\r\n\r\n    const classes = useStyles();\r\n    const { lang } = useContext(LanguageContext);\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const { t, i18n } = useTranslation();\r\n    const [ userList, setUserList ] = useState([]);\r\n    const [ selectedUser, setSelectedUser ] = useState(null)\r\n    \r\n    useEffect(() => {\r\n        getUserList()\r\n        .then(data => {\r\n            let ul = linkedUsers.map(l => l._id);\r\n            setUserList(data.filter(u => ul.indexOf(u._id) === -1 ));\r\n        })\r\n    }, [])\r\n\r\n    const handleChange = event => {\r\n        setSelectedUser(event.target.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal\r\n            open={isOpen}\r\n            onClose={handleClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout: 500\r\n            }}\r\n            className={classes.modal}\r\n        >\r\n            <Fade in={isOpen}>\r\n                <Grid container justify='center' alignItems='center' style={{ outline: '0'}}>\r\n                    <Grid item xl={3}>\r\n                        <Paper \r\n                            className={classes.paper} \r\n                            style={{ direction: lang.dir }}\r\n                            elevation={6}    \r\n                        >\r\n                            <div className={classes.header}>\r\n                                <div className={classes.title}>\r\n                                    {t(\"systemsModule.addRelatedUserTitle\")}\r\n                                </div>\r\n                                <IconButton className={classes.closeBtn} onClick={handleClose}>\r\n                                    <ClearRoundedIcon className={classes.icon}/>\r\n                                </IconButton>  \r\n                            </div>\r\n                            <div className={classes.instructions}>\r\n                                {t(\"systemsModule.chooseUserToAdd\")}\r\n                            </div>\r\n                            <FormControl variant='outlined' className={classes.textInput} >\r\n                                <Select\r\n                                    value={selectedUser}\r\n                                    onChange={handleChange}\r\n                                    className={classes.menu}\r\n                                    MenuProps={{\r\n                                        classes: {\r\n                                            paper: classes.menupaper,\r\n                                            autoWidth: true\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    {\r\n                                        userList.map( (user, i) => {\r\n                                            return (\r\n                                                <MenuItem\r\n                                                    className={classes.menuitem}\r\n                                                    value={user._id} \r\n                                                    key={i}\r\n                                                    style={{ direction: lang.code === 'he' ? 'rtl' : 'ltr'}}\r\n                                                >\r\n                                                    {`${user.firstName} ${user.lastName}`}\r\n                                                </MenuItem>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Select>\r\n                            </FormControl>\r\n                            <div className={classes.controls}>\r\n                                <Button\r\n                                    className={clsx(classes.control, classes.save)}\r\n                                    onClick={() => handleSave(selectedUser)}\r\n                                    disabled={!selectedUser}\r\n                                >\r\n                                    {t(\"alert.confirm\")}\r\n                                </Button>\r\n                                <Button\r\n                                    className={clsx(classes.control, classes.cancel)}\r\n                                    onClick={handleClose}\r\n                                >\r\n                                    {t(\"alert.cancel\")}\r\n                                </Button>\r\n                            </div>\r\n                        </Paper>\r\n                    </Grid>\r\n                    \r\n                </Grid> \r\n                \r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        background: 'rgba(0,0,0,0.4)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        padding: '10px',\r\n        borderRadius: '10px',\r\n        '&:focus': {\r\n            outline: 'none'\r\n        }\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backdropFilter: 'blur(10px)'   \r\n    },\r\n    header: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center'\r\n    },\r\n    title: {\r\n        color: 'white',\r\n        fontSize: '18px',\r\n        padding: '5px 10px',\r\n        height: 'fit-content'\r\n    },\r\n    closeBtn: {\r\n        fontSize: '20px',\r\n        height: '40px',\r\n        width: '40px'\r\n    },\r\n    icon: {\r\n        color: 'white',\r\n        borderRadius: '25px',\r\n        padding: '5px',\r\n        '&:hover': {\r\n            background: 'rgba(255,255,255,0.2)'\r\n        }\r\n    },\r\n    instructions: {\r\n        width: 'auto',\r\n        color: 'rgba(255,255,255,0.6)',\r\n        fontSize: '12px',\r\n        margin: '0px 10px'\r\n    },\r\n    menu: {\r\n        color: 'white',\r\n        '&:hover': {\r\n            borderColor: 'white'\r\n        }\r\n    },\r\n    menupaper: {\r\n        background: 'rgba(0,0,0,0.3)',\r\n        backdropFilter: 'blur(10px)',\r\n\r\n    },\r\n    menuitem: {\r\n        color: 'white'\r\n    },\r\n    textInput: {\r\n        margin: '20px 5px',\r\n        width: '300px',\r\n        '& input': {\r\n            color: 'white',\r\n            paddingLeft: '20px',\r\n        },\r\n        '& label': {\r\n            color: 'white',\r\n            paddingLeft: '5px' \r\n        },\r\n        '& fieldset': {\r\n            borderColor: 'rgba(255,255,255,0.6)',\r\n            borderRadius: '42px'\r\n        }    \r\n    },\r\n    controls: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    control: {\r\n        width: '30%',\r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        fontSize: '16px',\r\n        margin: '5px',\r\n        padding: '5px 30px',\r\n        borderRadius: '30px',\r\n        color: 'white', \r\n    },\r\n    save: {\r\n        background: 'rgba(0,0,0,0.2)', \r\n        '&:hover': {\r\n            background: 'black'\r\n        },\r\n        '&:disabled': {\r\n            color: 'rgba(255,255,255,0.3)'\r\n        }\r\n    },\r\n    cancel: {\r\n        border: '0px solid grey',\r\n        '&:hover': {\r\n            borderWidth: '1px'\r\n        }\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemsHeader.js",["324"],"import React from 'react';\r\nimport { Grid, makeStyles, Paper, useMediaQuery } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport const SystemsHeader = () => {\r\n\r\n    const classes = useStyles();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const { t, i18n } = useTranslation();\r\n\r\n    return (\r\n        <Grid item xs={ 12 } sm={7} md={8} lg={11} xl={9}>\r\n            <Paper elevation={9} className={classes.headerPaper}>\r\n                <div className={classes.systemName}>\r\n                    {t(\"systemsModule.systemName\")}\r\n                </div>\r\n                {\r\n                    !downSm &&\r\n                    <div className={classes.actionsContainer}>\r\n                        <div className={classes.iconHeader}>\r\n                            {t(\"systemsModule.tasks\")}\r\n                        </div>\r\n                        <div className={classes.iconHeader}>\r\n                            {t(\"systemsModule.faults\")}\r\n                        </div>\r\n                        <div className={classes.iconHeader}>\r\n                            {t(\"systemsModule.documents\")}\r\n                        </div>\r\n                        <div className={classes.iconHeader}>\r\n                            {t(\"systemsModule.changeManager\")}\r\n                        </div>\r\n                        <div className={classes.iconHeader}>\r\n                            {t(\"systemsModule.users\")}\r\n                        </div>      \r\n                        <div className={classes.ownerHeader}>\r\n                            {t(\"systemsModule.ownerHeader\")}\r\n                        </div>\r\n                    </div>\r\n                } \r\n            </Paper>\r\n        </Grid>                          \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    headerPaper: {\r\n        height: '45px',\r\n        background: 'rgba(0,0,0,0.7)',\r\n        margin: '5px',\r\n        borderRadius: '5px',\r\n        color: 'white',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        fontSize: '12px'\r\n    },\r\n    systemName: {\r\n        margin: 'auto 20px',\r\n        whiteSpace: 'nowrap'\r\n    },\r\n    actionsContainer: {\r\n        display: 'flex',\r\n        fontSize: '12px',\r\n        width: '590px',\r\n        justifyContent: 'flex-end'\r\n \r\n    },\r\n    iconHeader: {\r\n        width: '78px',\r\n        textAlign: 'center',\r\n        margin: 'auto'\r\n    },\r\n    ownerHeader: {\r\n        width: '190px',\r\n        textAlign: 'center',\r\n        margin: 'auto',\r\n        [theme.breakpoints.down('md')]: {\r\n            margin: 'auto 0'\r\n        }\r\n    }\r\n\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemControls.js",["325","326","327","328"],"import React, { useEffect, useState } from 'react';\r\nimport { IconButton, makeStyles, Paper, useMediaQuery, Tooltip, Collapse } from '@material-ui/core';\r\nimport { UserItem } from '../../user/UserItem';\r\nimport PersonRoundedIcon from '@material-ui/icons/PersonRounded';\r\nimport TransferWithinAStationRoundedIcon from '@material-ui/icons/TransferWithinAStationRounded';\r\nimport { useTranslation } from 'react-i18next';\r\nimport WarningRoundedIcon from '@material-ui/icons/WarningRounded';\r\nimport AssignmentRoundedIcon from '@material-ui/icons/AssignmentRounded';\r\nimport DescriptionRoundedIcon from '@material-ui/icons/DescriptionRounded';\r\n\r\n\r\nexport const SystemControls = ({ editName, expanded, owner, showLinkedUsersToggle, toggleEditOwner }) => {\r\n\r\n    const classes = useStyles();\r\n    const { t, i18n } = useTranslation();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n\r\n    return (\r\n        <Collapse in={((!downSm && !editName) || expanded)}>\r\n            <div className={classes.actionsContainer}>\r\n                <div className={classes.actions}>\r\n                    <Tooltip title={t(\"systemsModule.showTasks\")}>\r\n                        <IconButton\r\n                            className={classes.iconBtn}\r\n                        >\r\n                            <AssignmentRoundedIcon className={classes.userIcon}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title={t(\"systemsModule.showFaults\")}>\r\n                        <IconButton\r\n                            className={classes.iconBtn}\r\n                        >\r\n                            <WarningRoundedIcon className={classes.userIcon}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title={t(\"systemsModule.showDocuments\")}>\r\n                        <IconButton\r\n                            className={classes.iconBtn}\r\n                        >\r\n                            <DescriptionRoundedIcon className={classes.userIcon}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title={t(\"systemsModule.changeManager\")}>\r\n                        <IconButton\r\n                            className={classes.iconBtn}\r\n                            onClick={toggleEditOwner}\r\n                        >\r\n                            <TransferWithinAStationRoundedIcon className={classes.userIcon}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title={t(\"systemsModule.showUsers\")}>\r\n                        <IconButton\r\n                            className={classes.iconBtn}\r\n                            onClick={showLinkedUsersToggle}\r\n                        >\r\n                            <PersonRoundedIcon className={classes.userIcon}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    \r\n                </div>\r\n                <div className={classes.ownerInfo}>\r\n                    <UserItem \r\n                        user={owner}\r\n                        avatarSize={40}\r\n                        showPhone\r\n                    />\r\n                </div> \r\n            </div>\r\n        </Collapse>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({ \r\n    actionsContainer: {\r\n        display: 'flex',\r\n        width: 'fit-content',\r\n        padding: '5px',\r\n        margin: 'auto 0',\r\n        justifyContent: 'space-between',\r\n        [theme.breakpoints.down('md')] : {\r\n            flexDirection: 'column-reverse',\r\n            alignItems: 'center',\r\n            margin: 'auto',\r\n        }\r\n    },\r\n    actions: {\r\n        margin: 'auto 10px',\r\n        [theme.breakpoints.down('md')] : {\r\n            background: 'rgba(0,0,0,0.4)',\r\n            borderRadius: '50px',\r\n            margin: '10px 0',\r\n            padding: '5px 10px'\r\n        }\r\n    },\r\n    iconBtn: {\r\n        padding: '0px',\r\n        height: 'fit-content',\r\n        width: 'fit-content',\r\n        margin: '0 20px',\r\n        [theme.breakpoints.down('md')]: {\r\n            margin: '5px 10px'\r\n        }\r\n        \r\n    },\r\n    userIcon: {\r\n        fontSize: '20px',\r\n        color: 'white',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        padding: '8px',\r\n        borderRadius: '50px',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.2)'\r\n        }\r\n        \r\n    },\r\n    ownerInfo: {\r\n        height: 'auto', \r\n        width: '150px',\r\n        padding: '5px 20px 5px 10px',\r\n        display: 'grid',\r\n        placeItems: 'center',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '5px',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.8)'\r\n        },\r\n        [theme.breakpoints.down('md')]: {\r\n            marginTop: '5px',\r\n            borderRadius: '50px',\r\n            width: '170px',\r\n            padding: '5px 20px 5px 5px',\r\n        }\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemLinkedUsers.js",["329","330","331","332","333","334"],"import React, { useState, useContext, iseEffect, useEffect } from 'react';\r\nimport { Grid, makeStyles, Collapse, Tooltip, IconButton, useMediaQuery, Fade } from '@material-ui/core';\r\nimport { UserItem } from '../../user/UserItem';\r\nimport { getFullName } from '../../../api/genericApi';\r\nimport avtrImg from '../../../assets/images/users/avatars/600e048ccbe5b841e4f9e7ed.jpg';\r\nimport ClearRoundedIcon from '@material-ui/icons/ClearRounded';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { AlertDialog } from '../../reuseables/AlertDialoge';\r\nimport { addUser, removeSystemUser } from '../../../api/systemsApi';\r\nimport AddRoundedIcon from '@material-ui/icons/AddRounded';\r\nimport { AddLinkedUser } from './AddLinkedUser';\r\n\r\nexport const SystemLinkedUsers = ({ userList, setData, systemId, isOpen }) => {\r\n\r\n    const classes = useStyles();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const [ linkedUsers, setLinkedUsers ] = useState(userList || []);\r\n    const [ showControls, setShowControls ] = useState(null);\r\n    const [ showAddLinkedUser, setShowAddLinkedUser ] = useState(false);\r\n    const [ alertDialog ,setAlertDialog ] = useState(null)\r\n    const { t, i18n } = useTranslation(); \r\n\r\n    const confirmRemove = linkedUser => event => {\r\n        event.stopPropagation();\r\n        let toRemove = linkedUsers.find(user => user._id === linkedUser._id)\r\n        setAlertDialog({\r\n            text: `${t(\"systemsModule.userRemoveConfirmText\")} ${getFullName(toRemove)}?`,\r\n            title: t(\"systemsModule.userRemoveConfirmTitle\"),\r\n            handleConfirm: async () => { \r\n                const res = await removeSystemUser(systemId, linkedUser._id);\r\n                if (res) {\r\n                    setData(res);\r\n                    setAlertDialog(null);\r\n                    setLinkedUsers([]);\r\n                    setLinkedUsers(res.linkedUsers);\r\n                }  \r\n            },\r\n            handleCancel: () => setAlertDialog(null)\r\n        })\r\n    }\r\n\r\n    const handleAddLinkedUser = () => {\r\n        if (showAddLinkedUser) {\r\n            setShowAddLinkedUser(false);\r\n            return;\r\n        }\r\n        setShowAddLinkedUser(true);\r\n    }\r\n\r\n    const handleAddLinekdUser = async userId => {\r\n        const res = await addUser(systemId, userId);\r\n        if (res) {\r\n            setData(res);\r\n            setLinkedUsers(res.linkedUsers);\r\n            setShowAddLinkedUser(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Collapse in={isOpen} >\r\n            <div className={classes.linkedusers}>\r\n                <Grid container justify='flex-start' className={ classes.container} alignItems='center'>\r\n                    <Grid item xs={12} className={classes.titleContainer}>\r\n                        <div className={classes.title}>\r\n                            {t(\"systemsModule.assignedUsers\")}\r\n                        </div>\r\n                        <IconButton \r\n                            className={classes.addBtn}\r\n                            onClick={handleAddLinkedUser}\r\n                        >\r\n                            <AddRoundedIcon className={classes.icon}/>\r\n                        </IconButton>\r\n                        {\r\n                            showAddLinkedUser &&\r\n                            <AddLinkedUser \r\n                                isOpen={showAddLinkedUser}\r\n                                handleClose={handleAddLinkedUser}\r\n                                linkedUsers={linkedUsers}\r\n                                handleSave={handleAddLinekdUser}\r\n\r\n                            />\r\n                        }\r\n                        \r\n                    </Grid>\r\n                    {\r\n                        linkedUsers.length ? \r\n                        linkedUsers.map((linkedUser, i) => {\r\n                            return (\r\n                                <Grid item xs={12} sm={7} md={6} lg={3} className={classes.gridItem}>\r\n                                    <div \r\n                                        className={classes.userCont}\r\n                                        onMouseEnter={() => setShowControls(i)}\r\n                                        onMouseLeave={() => setShowControls(null)}\r\n                                        key={i}\r\n                                    >\r\n                                        <UserItem \r\n                                            user={linkedUser}\r\n                                            showTitle\r\n                                            showPhone\r\n                                            avatarSize={'50px'}\r\n                                            size={11}\r\n                                        />\r\n                                        <Fade in={showControls === i || downSm}>\r\n                                            <Tooltip title={t(\"systemsModule.removeUser\")}>\r\n                                                <IconButton \r\n                                                    className={classes.removeuser}\r\n                                                    onClick={confirmRemove(linkedUser)}\r\n                                                >\r\n                                                    <ClearRoundedIcon className={classes.icon}/>\r\n                                                </IconButton>\r\n                                            </Tooltip>\r\n                                        </Fade> \r\n                                    </div>\r\n                                </Grid>\r\n                            )\r\n                        }) :\r\n                        <div className={classes.noUsers}>\r\n                            {t(\"systemsModule.noUsersAssigned\")}\r\n                        </div>\r\n\r\n                    }\r\n                    {\r\n                        Boolean(alertDialog) &&\r\n                        <AlertDialog \r\n                            alertDialoge={alertDialog}\r\n                            open={Boolean(alertDialog)}\r\n                        />\r\n                    }    \r\n                </Grid>\r\n            </div>\r\n        </Collapse>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    linkedusers: {\r\n        width: 'auto',\r\n        margin: '10px',\r\n        borderRadius: '25px',\r\n        background: 'rgba(0,0,0,0.1)',\r\n        boxShadow: '0px 0px 5px 2px rgba(0,0,0,0.2)',\r\n    },\r\n    container: {\r\n        width: 'auto',\r\n        padding: '5px',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        borderRadius: '5px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    gridItem: {\r\n        borderRadius: '20px',\r\n        padding: '5px 10px',\r\n        '&:hover':{\r\n            background: 'rgba(0,0,0,0.2)',\r\n            boxShadow: '-0px 0px 5px 2px rgba(0,0,0,0.2)',\r\n            \r\n        }\r\n    },\r\n    titleContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        borderBottom: '1px solid rgba(255,255,255,0.2)',\r\n        margin: '0 10px',\r\n        padding: '5px 5px 10px'\r\n\r\n    },\r\n    addBtn: {\r\n        fontSize: '20px',\r\n        color: 'white',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        padding: '2px',\r\n        borderRadius: '50px',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.2)'\r\n        }\r\n    },\r\n    cell: {\r\n        color: 'white',\r\n        textAlign: 'center'\r\n    },\r\n    userCont: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        padding: '5px 10px',\r\n        position: 'relative'\r\n    },\r\n    removeuser: {\r\n        padding: '4px',\r\n        margin: 'auto 4px',\r\n        height: '50%',\r\n        '&:hover' :{\r\n            background: 'rgba(255,255,255,0.1)'\r\n        }\r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        color: 'white',\r\n        padding: '8px'\r\n    },\r\n    title: {\r\n        color: 'white',\r\n        fontSize: '16px'\r\n    },\r\n    noUsers: {\r\n        margin: '10px',\r\n        padding: '0px 0 15px',\r\n        color: 'white',\r\n        fontSize: '14px',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        padding: '10px 20px',\r\n        borderRadius: '25px'\r\n    }\r\n    \r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\Faults.js",["335","336","337","338","339","340","341","342"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultsControls.js",["343","344","345","346"],"import React, { useState, useEffect} from 'react';\r\nimport { makeStyles, Grid, useMediaQuery, Collapse, Button, ButtonGroup } from '@material-ui/core';\r\nimport { SearchBoxSelect } from '../../reuseables/SearchBoxSelect';\r\nimport { SearchBox } from '../../reuseables/SearchBox';\r\nimport { FilterBySelect } from '../../reuseables/FilterBySelect';\r\nimport PersonRoundedIcon from '@material-ui/icons/PersonRounded';\r\nimport { SortBy } from '../../reuseables/SortBy';\r\nimport { getAssetsSuggestions } from '../../../api/systemsApi';\r\nimport { createUserOptions } from '../../../api/userApi';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { FilterByMultiSelect } from '../../reuseables/FilterByMultiSelect';\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport { useQuery } from '../../reuseables/customHooks/useQuery';\r\nimport { getFullAddress, getAsset } from '../../../api/assetsApi';\r\nimport { getSystemsByAssetOptions, getFaultsStatusListSuggestions } from '../../../api/faultsApi';\r\nimport DonutSmallIcon from '@material-ui/icons/DonutSmall';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport ExpandMoreRoundedIcon from '@material-ui/icons/ExpandMoreRounded';\r\nimport { ClearRounded } from '@material-ui/icons';\r\nimport ViewListRoundedIcon from '@material-ui/icons/ViewListRounded';\r\nimport ViewWeekRoundedIcon from '@material-ui/icons/ViewWeekRounded';\r\nimport clsx from 'clsx'\r\nimport { removeQueryParam } from '../../../api/genericApi';\r\n\r\nconst sortOptions = [\r\n    {\r\n        text: 'מס\"ד תקלה',\r\n        field: 'faultIdentifier'\r\n    },\r\n    {\r\n        text: 'נכס',\r\n        field: 'asset'\r\n    },\r\n    {\r\n        text: 'סטטוס תקלה',\r\n        field: 'faultStatus'\r\n    },\r\n    {\r\n        text: 'ממונה על תקלה',\r\n        field: 'owner'\r\n    }\r\n    \r\n    \r\n]\r\n\r\n\r\nexport const FaultsControls = ({ viewType, setViewType }) => {\r\n\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const classes = useStyles();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const { t, i18n } = useTranslation();\r\n    const [ reloadedValue, setReloadedValue ] = useState(null);\r\n    const [ collapsed, setCollapsed ] = useState(!downSm ? true : false);\r\n\r\n    useEffect(() => {\r\n        if (query.asset) {\r\n            handleReloaded(query.asset)\r\n            .then(data => {\r\n                if (data) {\r\n                    setReloadedValue(data);\r\n                } \r\n            })\r\n        } else {\r\n            setReloadedValue({\r\n                label: '',\r\n                value: null\r\n            });\r\n            history.push({\r\n                path: location.pathname,\r\n                search: removeQueryParam(location.search, 'system')\r\n            });       \r\n        }\r\n    }, [location.search])\r\n\r\n    const handleReloaded = async (assetId) => {\r\n        const res = await getAsset(assetId);\r\n        if (res) {\r\n            return {\r\n                label: getFullAddress(res.data),\r\n                value: res.data._id\r\n            }\r\n        }   \r\n    }\r\n\r\n    const toggleCollapse = () => {\r\n        if (collapsed) {\r\n            setCollapsed(false);\r\n            return;\r\n        }\r\n        setCollapsed(true)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                downSm &&\r\n                <Grid container justify='center'>\r\n                    <Grid item xs={12} className={classes.gridItem}>\r\n                        <Button\r\n                        className={classes.sortandfilter}\r\n                        startIcon={<FilterListIcon className={classes.icon} />}\r\n                        endIcon={collapsed ? <ClearRounded /> : <ExpandMoreRoundedIcon />}\r\n                        onClick={toggleCollapse}\r\n                    >\r\n                        {t(`faultsModule.${ collapsed ? 'hide' : 'show'}Filters`)}\r\n                    </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                    \r\n            }\r\n            <Collapse in={collapsed}>\r\n                <Grid container justify='center'>  \r\n                    <Grid item xs={12} className={classes.gridItem}>\r\n                        {\r\n                            reloadedValue &&\r\n                            <SearchBoxSelect\r\n                                suggestionsFunc={getAssetsSuggestions}\r\n                                placeholder={t(\"systemsModule.filterByAsset\")}\r\n                                filterField={'asset'}\r\n                                reloadedLabel={reloadedValue.label}\r\n                                reloadedValue={reloadedValue.value}\r\n                            />\r\n                        }                 \r\n                            {\r\n                                query.asset &&\r\n                                <FilterByMultiSelect \r\n                                optionsFunc={() => getSystemsByAssetOptions(query.asset)}\r\n                                placeholder={t(\"systemsModule.filterBySystemName\")}\r\n                                filterIcon={<DonutSmallIcon className={classes.icon} />}\r\n                                filterField={'system'}\r\n                            />\r\n                            } \r\n                            {\r\n                            viewType === 'list' &&\r\n                                <FilterByMultiSelect \r\n                                    optionsFunc={getFaultsStatusListSuggestions}\r\n                                    placeholder={t(\"faultsModule.filterByStatus\")}\r\n                                    filterIcon={<DonutSmallIcon className={classes.icon} />}\r\n                                    filterField={'status'}\r\n\r\n                                />\r\n                            }\r\n                    </Grid>\r\n                    \r\n                    <Grid item xs={12}className={classes.gridItem}>\r\n                        <FilterByMultiSelect \r\n                            optionsFunc={createUserOptions}\r\n                            placeholder={t(\"faultsModule.filterByFaultOwner\")}\r\n                            filterIcon={<PersonRoundedIcon className={classes.icon }/>}\r\n                            filterField={'owner'}\r\n                        />\r\n                        <SortBy menuOptions={sortOptions}/>\r\n                        <ButtonGroup\r\n                            className={classes.typeGroup}\r\n                        >\r\n                            <Button\r\n                                className={clsx(classes.modeBtn, classes.listBtn, viewType === 'list' ? classes.modeBtnActive : null)}\r\n                                startIcon={<ViewListRoundedIcon className={classes.icon}/>}\r\n                                onClick={() => setViewType('list')}\r\n                            >\r\n                                {t(\"faultsModule.listMode\")}\r\n                            </Button>\r\n                            <Button\r\n                                className={clsx(classes.modeBtn, classes.blocksBtn, viewType === 'blocks' ? classes.modeBtnActive : null)}\r\n                                startIcon={<ViewWeekRoundedIcon className={classes.icon} />}\r\n                                onClick={() => setViewType('blocks')}\r\n                            >\r\n                                {t(\"faultsModule.blocksMode\")}\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </Grid>   \r\n                </Grid>\r\n            </Collapse>\r\n        </React.Fragment>\r\n        \r\n         \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(them => ({\r\n    gridItem: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'flex-start',\r\n        flexWrap: 'wrap'\r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        marginLeft: '4px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    sortandfilter: {\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        background: 'rgba(0,0,0,0.7)',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '5px 25px 5px 3px',\r\n        whiteSpace: 'nowrap',\r\n        '&:hover': {\r\n            background: 'black'\r\n        }\r\n    },\r\n    typeGroup: {\r\n        margin: '5px',\r\n        height: '45px'\r\n\r\n    },\r\n    modeBtn: {   \r\n        padding: '0 15px 0 5px',\r\n        color: 'white',\r\n        width: 'auto',\r\n        whiteSpace: 'nowrap',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    listBtn: {\r\n        borderRadius: '25px 0 0 25px',\r\n    },\r\n    blocksBtn: {\r\n        borderRadius: '0px 25px 25px 0px',\r\n    },\r\n    modeBtnActive: {\r\n        background: 'rgba(0,0,0,0.6)'\r\n    }\r\n\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\faultsApi.js",["347"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultListView.js",["348","349","350"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultMinified.js",["351","352","353","354","355"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\StatusTag.js",["356","357"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultLink.js",["358"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultView.js",["359","360","361","362","363","364","365","366","367","368","369","370","371","372"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\Carousel.js",["373","374","375","376","377"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultViewControls.js",["378","379"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\UserList.js",["380","381","382","383"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\CommentSection.js",["384","385","386","387","388","389","390","391","392"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultViews.js",["393","394","395","396","397"],{"ruleId":"398","replacedBy":"399"},{"ruleId":"400","replacedBy":"401"},{"ruleId":"402","severity":1,"message":"403","line":1,"column":42,"nodeType":"404","messageId":"405","endLine":1,"endColumn":51},{"ruleId":"402","severity":1,"message":"406","line":1,"column":17,"nodeType":"404","messageId":"405","endLine":1,"endColumn":25},{"ruleId":"407","severity":1,"message":"408","line":11,"column":27,"nodeType":"409","messageId":"410","endLine":11,"endColumn":29},{"ruleId":"402","severity":1,"message":"411","line":14,"column":11,"nodeType":"404","messageId":"405","endLine":14,"endColumn":17},{"ruleId":"412","severity":1,"message":"413","line":33,"column":8,"nodeType":"414","endLine":33,"endColumn":10,"suggestions":"415"},{"ruleId":"412","severity":1,"message":"413","line":34,"column":8,"nodeType":"414","endLine":34,"endColumn":10,"suggestions":"416"},{"ruleId":"402","severity":1,"message":"417","line":19,"column":16,"nodeType":"404","messageId":"405","endLine":19,"endColumn":20},{"ruleId":"402","severity":1,"message":"417","line":13,"column":16,"nodeType":"404","messageId":"405","endLine":13,"endColumn":20},{"ruleId":"407","severity":1,"message":"408","line":7,"column":26,"nodeType":"409","messageId":"410","endLine":7,"endColumn":28},{"ruleId":"402","severity":1,"message":"417","line":15,"column":16,"nodeType":"404","messageId":"405","endLine":15,"endColumn":20},{"ruleId":"412","severity":1,"message":"418","line":38,"column":8,"nodeType":"414","endLine":38,"endColumn":19,"suggestions":"419"},{"ruleId":"420","severity":1,"message":"421","line":92,"column":41,"nodeType":"422","messageId":"410","endLine":92,"endColumn":43},{"ruleId":"402","severity":1,"message":"417","line":25,"column":16,"nodeType":"404","messageId":"405","endLine":25,"endColumn":20},{"ruleId":"402","severity":1,"message":"423","line":4,"column":8,"nodeType":"404","messageId":"405","endLine":4,"endColumn":15},{"ruleId":"402","severity":1,"message":"424","line":10,"column":13,"nodeType":"404","messageId":"405","endLine":10,"endColumn":17},{"ruleId":"402","severity":1,"message":"425","line":4,"column":8,"nodeType":"404","messageId":"405","endLine":4,"endColumn":25},{"ruleId":"402","severity":1,"message":"426","line":9,"column":10,"nodeType":"404","messageId":"405","endLine":9,"endColumn":29},{"ruleId":"402","severity":1,"message":"417","line":43,"column":16,"nodeType":"404","messageId":"405","endLine":43,"endColumn":20},{"ruleId":"402","severity":1,"message":"417","line":12,"column":16,"nodeType":"404","messageId":"405","endLine":12,"endColumn":20},{"ruleId":"402","severity":1,"message":"417","line":17,"column":20,"nodeType":"404","messageId":"405","endLine":17,"endColumn":24},{"ruleId":"402","severity":1,"message":"427","line":15,"column":21,"nodeType":"404","messageId":"405","endLine":15,"endColumn":30},{"ruleId":"402","severity":1,"message":"417","line":19,"column":16,"nodeType":"404","messageId":"405","endLine":19,"endColumn":20},{"ruleId":"412","severity":1,"message":"428","line":33,"column":8,"nodeType":"414","endLine":33,"endColumn":16,"suggestions":"429"},{"ruleId":"402","severity":1,"message":"403","line":1,"column":42,"nodeType":"404","messageId":"405","endLine":1,"endColumn":51},{"ruleId":"430","severity":1,"message":"431","line":49,"column":28,"nodeType":"432","messageId":"433","endLine":49,"endColumn":29,"suggestions":"434"},{"ruleId":"402","severity":1,"message":"435","line":3,"column":43,"nodeType":"404","messageId":"405","endLine":3,"endColumn":62},{"ruleId":"402","severity":1,"message":"436","line":4,"column":50,"nodeType":"404","messageId":"405","endLine":4,"endColumn":54},{"ruleId":"412","severity":1,"message":"437","line":22,"column":8,"nodeType":"414","endLine":22,"endColumn":20,"suggestions":"438"},{"ruleId":"402","severity":1,"message":"439","line":4,"column":25,"nodeType":"404","messageId":"405","endLine":4,"endColumn":43},{"ruleId":"412","severity":1,"message":"440","line":25,"column":8,"nodeType":"414","endLine":25,"endColumn":10,"suggestions":"441"},{"ruleId":"412","severity":1,"message":"442","line":41,"column":8,"nodeType":"414","endLine":41,"endColumn":15,"suggestions":"443"},{"ruleId":"402","severity":1,"message":"436","line":2,"column":22,"nodeType":"404","messageId":"405","endLine":2,"endColumn":26},{"ruleId":"402","severity":1,"message":"444","line":2,"column":28,"nodeType":"404","messageId":"405","endLine":2,"endColumn":45},{"ruleId":"402","severity":1,"message":"445","line":2,"column":47,"nodeType":"404","messageId":"405","endLine":2,"endColumn":58},{"ruleId":"402","severity":1,"message":"446","line":2,"column":60,"nodeType":"404","messageId":"405","endLine":2,"endColumn":73},{"ruleId":"402","severity":1,"message":"439","line":4,"column":25,"nodeType":"404","messageId":"405","endLine":4,"endColumn":43},{"ruleId":"402","severity":1,"message":"447","line":7,"column":8,"nodeType":"404","messageId":"405","endLine":7,"endColumn":12},{"ruleId":"412","severity":1,"message":"448","line":32,"column":8,"nodeType":"414","endLine":32,"endColumn":10,"suggestions":"449"},{"ruleId":"412","severity":1,"message":"442","line":50,"column":8,"nodeType":"414","endLine":50,"endColumn":16,"suggestions":"450"},{"ruleId":"402","severity":1,"message":"451","line":2,"column":10,"nodeType":"404","messageId":"405","endLine":2,"endColumn":29},{"ruleId":"402","severity":1,"message":"452","line":2,"column":8,"nodeType":"404","messageId":"405","endLine":2,"endColumn":15},{"ruleId":"402","severity":1,"message":"453","line":2,"column":10,"nodeType":"404","messageId":"405","endLine":2,"endColumn":16},{"ruleId":"402","severity":1,"message":"454","line":2,"column":52,"nodeType":"404","messageId":"405","endLine":2,"endColumn":57},{"ruleId":"402","severity":1,"message":"411","line":18,"column":11,"nodeType":"404","messageId":"405","endLine":18,"endColumn":17},{"ruleId":"402","severity":1,"message":"417","line":19,"column":16,"nodeType":"404","messageId":"405","endLine":19,"endColumn":20},{"ruleId":"412","severity":1,"message":"418","line":42,"column":8,"nodeType":"414","endLine":42,"endColumn":19,"suggestions":"455"},{"ruleId":"402","severity":1,"message":"417","line":37,"column":16,"nodeType":"404","messageId":"405","endLine":37,"endColumn":20},{"ruleId":"412","severity":1,"message":"456","line":60,"column":8,"nodeType":"414","endLine":60,"endColumn":25,"suggestions":"457"},{"ruleId":"402","severity":1,"message":"435","line":3,"column":43,"nodeType":"404","messageId":"405","endLine":3,"endColumn":62},{"ruleId":"402","severity":1,"message":"439","line":3,"column":64,"nodeType":"404","messageId":"405","endLine":3,"endColumn":82},{"ruleId":"402","severity":1,"message":"436","line":4,"column":50,"nodeType":"404","messageId":"405","endLine":4,"endColumn":54},{"ruleId":"412","severity":1,"message":"458","line":30,"column":8,"nodeType":"414","endLine":30,"endColumn":20,"suggestions":"459"},{"ruleId":"412","severity":1,"message":"460","line":45,"column":8,"nodeType":"414","endLine":45,"endColumn":15,"suggestions":"461"},{"ruleId":"420","severity":1,"message":"421","line":73,"column":42,"nodeType":"422","messageId":"410","endLine":73,"endColumn":44},{"ruleId":"402","severity":1,"message":"462","line":15,"column":13,"nodeType":"404","messageId":"405","endLine":15,"endColumn":14},{"ruleId":"402","severity":1,"message":"417","line":15,"column":16,"nodeType":"404","messageId":"405","endLine":15,"endColumn":20},{"ruleId":"402","severity":1,"message":"411","line":15,"column":11,"nodeType":"404","messageId":"405","endLine":15,"endColumn":17},{"ruleId":"402","severity":1,"message":"417","line":16,"column":16,"nodeType":"404","messageId":"405","endLine":16,"endColumn":20},{"ruleId":"412","severity":1,"message":"463","line":25,"column":8,"nodeType":"414","endLine":25,"endColumn":10,"suggestions":"464"},{"ruleId":"402","severity":1,"message":"417","line":15,"column":16,"nodeType":"404","messageId":"405","endLine":15,"endColumn":20},{"ruleId":"402","severity":1,"message":"411","line":16,"column":11,"nodeType":"404","messageId":"405","endLine":16,"endColumn":17},{"ruleId":"402","severity":1,"message":"411","line":15,"column":11,"nodeType":"404","messageId":"405","endLine":15,"endColumn":17},{"ruleId":"402","severity":1,"message":"417","line":16,"column":16,"nodeType":"404","messageId":"405","endLine":16,"endColumn":20},{"ruleId":"412","severity":1,"message":"465","line":26,"column":8,"nodeType":"414","endLine":26,"endColumn":10,"suggestions":"466"},{"ruleId":"402","severity":1,"message":"417","line":9,"column":16,"nodeType":"404","messageId":"405","endLine":9,"endColumn":20},{"ruleId":"402","severity":1,"message":"403","line":1,"column":17,"nodeType":"404","messageId":"405","endLine":1,"endColumn":26},{"ruleId":"402","severity":1,"message":"406","line":1,"column":28,"nodeType":"404","messageId":"405","endLine":1,"endColumn":36},{"ruleId":"402","severity":1,"message":"454","line":2,"column":34,"nodeType":"404","messageId":"405","endLine":2,"endColumn":39},{"ruleId":"402","severity":1,"message":"417","line":15,"column":16,"nodeType":"404","messageId":"405","endLine":15,"endColumn":20},{"ruleId":"402","severity":1,"message":"467","line":1,"column":27,"nodeType":"404","messageId":"405","endLine":1,"endColumn":37},{"ruleId":"402","severity":1,"message":"468","line":1,"column":39,"nodeType":"404","messageId":"405","endLine":1,"endColumn":48},{"ruleId":"402","severity":1,"message":"403","line":1,"column":50,"nodeType":"404","messageId":"405","endLine":1,"endColumn":59},{"ruleId":"402","severity":1,"message":"423","line":5,"column":8,"nodeType":"404","messageId":"405","endLine":5,"endColumn":15},{"ruleId":"402","severity":1,"message":"417","line":21,"column":16,"nodeType":"404","messageId":"405","endLine":21,"endColumn":20},{"ruleId":"469","severity":1,"message":"470","line":212,"column":9,"nodeType":"471","messageId":"410","endLine":212,"endColumn":16},{"ruleId":"402","severity":1,"message":"403","line":1,"column":17,"nodeType":"404","messageId":"405","endLine":1,"endColumn":26},{"ruleId":"402","severity":1,"message":"406","line":1,"column":28,"nodeType":"404","messageId":"405","endLine":1,"endColumn":36},{"ruleId":"402","severity":1,"message":"472","line":2,"column":28,"nodeType":"404","messageId":"405","endLine":2,"endColumn":42},{"ruleId":"402","severity":1,"message":"473","line":13,"column":11,"nodeType":"404","messageId":"405","endLine":13,"endColumn":18},{"ruleId":"402","severity":1,"message":"474","line":15,"column":11,"nodeType":"404","messageId":"405","endLine":15,"endColumn":16},{"ruleId":"402","severity":1,"message":"475","line":16,"column":11,"nodeType":"404","messageId":"405","endLine":16,"endColumn":18},{"ruleId":"402","severity":1,"message":"411","line":17,"column":11,"nodeType":"404","messageId":"405","endLine":17,"endColumn":17},{"ruleId":"402","severity":1,"message":"476","line":20,"column":19,"nodeType":"404","messageId":"405","endLine":20,"endColumn":22},{"ruleId":"402","severity":1,"message":"477","line":4,"column":10,"nodeType":"404","messageId":"405","endLine":4,"endColumn":19},{"ruleId":"402","severity":1,"message":"478","line":5,"column":10,"nodeType":"404","messageId":"405","endLine":5,"endColumn":24},{"ruleId":"402","severity":1,"message":"417","line":54,"column":16,"nodeType":"404","messageId":"405","endLine":54,"endColumn":20},{"ruleId":"412","severity":1,"message":"479","line":76,"column":8,"nodeType":"414","endLine":76,"endColumn":25,"suggestions":"480"},{"ruleId":"402","severity":1,"message":"481","line":4,"column":10,"nodeType":"404","messageId":"405","endLine":4,"endColumn":27},{"ruleId":"402","severity":1,"message":"482","line":6,"column":10,"nodeType":"404","messageId":"405","endLine":6,"endColumn":23},{"ruleId":"402","severity":1,"message":"473","line":11,"column":11,"nodeType":"404","messageId":"405","endLine":11,"endColumn":18},{"ruleId":"402","severity":1,"message":"474","line":13,"column":11,"nodeType":"404","messageId":"405","endLine":13,"endColumn":16},{"ruleId":"402","severity":1,"message":"406","line":1,"column":17,"nodeType":"404","messageId":"405","endLine":1,"endColumn":25},{"ruleId":"402","severity":1,"message":"453","line":2,"column":22,"nodeType":"404","messageId":"405","endLine":2,"endColumn":28},{"ruleId":"402","severity":1,"message":"411","line":12,"column":11,"nodeType":"404","messageId":"405","endLine":12,"endColumn":17},{"ruleId":"402","severity":1,"message":"462","line":13,"column":13,"nodeType":"404","messageId":"405","endLine":13,"endColumn":14},{"ruleId":"402","severity":1,"message":"417","line":13,"column":16,"nodeType":"404","messageId":"405","endLine":13,"endColumn":20},{"ruleId":"402","severity":1,"message":"417","line":15,"column":16,"nodeType":"404","messageId":"405","endLine":15,"endColumn":20},{"ruleId":"483","severity":1,"message":"484","line":34,"column":68,"nodeType":"485","endLine":34,"endColumn":92},{"ruleId":"402","severity":1,"message":"486","line":3,"column":10,"nodeType":"404","messageId":"405","endLine":3,"endColumn":20},{"ruleId":"402","severity":1,"message":"487","line":2,"column":43,"nodeType":"404","messageId":"405","endLine":2,"endColumn":47},{"ruleId":"402","severity":1,"message":"488","line":2,"column":49,"nodeType":"404","messageId":"405","endLine":2,"endColumn":57},{"ruleId":"402","severity":1,"message":"489","line":2,"column":59,"nodeType":"404","messageId":"405","endLine":2,"endColumn":69},{"ruleId":"402","severity":1,"message":"490","line":2,"column":71,"nodeType":"404","messageId":"405","endLine":2,"endColumn":78},{"ruleId":"402","severity":1,"message":"491","line":8,"column":10,"nodeType":"404","messageId":"405","endLine":8,"endColumn":21},{"ruleId":"402","severity":1,"message":"492","line":12,"column":10,"nodeType":"404","messageId":"405","endLine":12,"endColumn":22},{"ruleId":"402","severity":1,"message":"473","line":23,"column":11,"nodeType":"404","messageId":"405","endLine":23,"endColumn":18},{"ruleId":"402","severity":1,"message":"474","line":25,"column":11,"nodeType":"404","messageId":"405","endLine":25,"endColumn":16},{"ruleId":"402","severity":1,"message":"417","line":26,"column":16,"nodeType":"404","messageId":"405","endLine":26,"endColumn":20},{"ruleId":"402","severity":1,"message":"411","line":29,"column":11,"nodeType":"404","messageId":"405","endLine":29,"endColumn":17},{"ruleId":"402","severity":1,"message":"493","line":33,"column":13,"nodeType":"404","messageId":"405","endLine":33,"endColumn":21},{"ruleId":"412","severity":1,"message":"494","line":49,"column":8,"nodeType":"414","endLine":49,"endColumn":19,"suggestions":"495"},{"ruleId":"483","severity":1,"message":"484","line":69,"column":36,"nodeType":"485","endLine":69,"endColumn":42},{"ruleId":"420","severity":1,"message":"421","line":71,"column":77,"nodeType":"422","messageId":"410","endLine":71,"endColumn":79},{"ruleId":"402","severity":1,"message":"496","line":2,"column":22,"nodeType":"404","messageId":"405","endLine":2,"endColumn":27},{"ruleId":"402","severity":1,"message":"497","line":11,"column":13,"nodeType":"404","messageId":"405","endLine":11,"endColumn":20},{"ruleId":"402","severity":1,"message":"498","line":12,"column":13,"nodeType":"404","messageId":"405","endLine":12,"endColumn":27},{"ruleId":"412","severity":1,"message":"499","line":29,"column":8,"nodeType":"414","endLine":29,"endColumn":15,"suggestions":"500"},{"ruleId":"501","severity":1,"message":"502","line":60,"column":13,"nodeType":"503","endLine":60,"endColumn":81},{"ruleId":"402","severity":1,"message":"436","line":2,"column":22,"nodeType":"404","messageId":"405","endLine":2,"endColumn":26},{"ruleId":"402","severity":1,"message":"417","line":13,"column":16,"nodeType":"404","messageId":"405","endLine":13,"endColumn":20},{"ruleId":"402","severity":1,"message":"504","line":5,"column":10,"nodeType":"404","messageId":"405","endLine":5,"endColumn":24},{"ruleId":"402","severity":1,"message":"473","line":13,"column":11,"nodeType":"404","messageId":"405","endLine":13,"endColumn":18},{"ruleId":"402","severity":1,"message":"505","line":14,"column":11,"nodeType":"404","messageId":"405","endLine":14,"endColumn":19},{"ruleId":"402","severity":1,"message":"506","line":17,"column":23,"nodeType":"404","messageId":"405","endLine":17,"endColumn":34},{"ruleId":"402","severity":1,"message":"507","line":4,"column":8,"nodeType":"404","messageId":"405","endLine":4,"endColumn":22},{"ruleId":"402","severity":1,"message":"508","line":6,"column":10,"nodeType":"404","messageId":"405","endLine":6,"endColumn":18},{"ruleId":"402","severity":1,"message":"492","line":7,"column":10,"nodeType":"404","messageId":"405","endLine":7,"endColumn":22},{"ruleId":"402","severity":1,"message":"473","line":18,"column":11,"nodeType":"404","messageId":"405","endLine":18,"endColumn":18},{"ruleId":"402","severity":1,"message":"505","line":19,"column":11,"nodeType":"404","messageId":"405","endLine":19,"endColumn":19},{"ruleId":"402","severity":1,"message":"417","line":21,"column":16,"nodeType":"404","messageId":"405","endLine":21,"endColumn":20},{"ruleId":"402","severity":1,"message":"411","line":24,"column":11,"nodeType":"404","messageId":"405","endLine":24,"endColumn":17},{"ruleId":"402","severity":1,"message":"509","line":25,"column":26,"nodeType":"404","messageId":"405","endLine":25,"endColumn":40},{"ruleId":"420","severity":1,"message":"421","line":75,"column":44,"nodeType":"422","messageId":"410","endLine":75,"endColumn":46},{"ruleId":"402","severity":1,"message":"510","line":9,"column":10,"nodeType":"404","messageId":"405","endLine":9,"endColumn":19},{"ruleId":"402","severity":1,"message":"511","line":9,"column":21,"nodeType":"404","messageId":"405","endLine":9,"endColumn":41},{"ruleId":"402","severity":1,"message":"417","line":19,"column":16,"nodeType":"404","messageId":"405","endLine":19,"endColumn":20},{"ruleId":"412","severity":1,"message":"512","line":36,"column":8,"nodeType":"414","endLine":36,"endColumn":19,"suggestions":"513"},{"ruleId":"412","severity":1,"message":"428","line":53,"column":8,"nodeType":"414","endLine":53,"endColumn":18,"suggestions":"514"},"no-native-reassign",["515"],"no-negated-in-lhs",["516"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'downSm' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkUserAuthentication'. Either include it or remove the dependency array.","ArrayExpression",["517"],["518"],"'i18n' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'location.search'. Either include it or remove the dependency array.",["519"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'avtrImg' is defined but never used.","'auth' is assigned a value but never used.","'SearchRoundedIcon' is defined but never used.","'FilterByMultiSelect' is defined but never used.","'setErrors' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history', 'location.pathname', and 'location.search'. Either include them or remove the dependency array.",["520"],"no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["521","522"],"'queryParamsToObject' is defined but never used.","'Grid' is defined but never used.","React Hook useEffect has missing dependencies: 'filterField', 'handleSearch', and 'query'. Either include them or remove the dependency array.",["523"],"'specialStringPurge' is defined but never used.","React Hook useEffect has a missing dependency: 'optionsFunc'. Either include it or remove the dependency array. If 'optionsFunc' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["524"],"React Hook useEffect has missing dependencies: 'filterField', 'history', 'location.pathname', 'location.search', and 'query'. Either include them or remove the dependency array.",["525"],"'ClickAwayListener' is defined but never used.","'FormControl' is defined but never used.","'OutlinedInput' is defined but never used.","'clsx' is defined but never used.","React Hook useEffect has missing dependencies: 'filterField', 'optionsFunc', and 'query'. Either include them or remove the dependency array. If 'optionsFunc' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["526"],["527"],"'getLabelsByLanguage' is defined but never used.","'Backend' is defined but never used.","'Button' is defined but never used.","'Paper' is defined but never used.",["528"],"React Hook useEffect has a missing dependency: 'query.asset'. Either include it or remove the dependency array.",["529"],"React Hook useEffect has a missing dependency: 'handleSearch'. Either include it or remove the dependency array.",["530"],"React Hook useEffect has missing dependencies: 'filterField', 'history', 'location.pathname', and 'location.search'. Either include them or remove the dependency array.",["531"],"'t' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'currentOwner._id'. Either include it or remove the dependency array. If 'setUserList' needs the current value of 'currentOwner._id', you can also switch to useReducer instead of useState and read 'currentOwner._id' in the reducer.",["532"],"React Hook useEffect has a missing dependency: 'linkedUsers'. Either include it or remove the dependency array.",["533"],"'useContext' is defined but never used.","'iseEffect' is defined but never used.","no-dupe-keys","Duplicate key 'padding'.","ObjectExpression","'LinearProgress' is defined but never used.","'history' is assigned a value but never used.","'query' is assigned a value but never used.","'classes' is assigned a value but never used.","'url' is assigned a value but never used.","'SearchBox' is defined but never used.","'FilterBySelect' is defined but never used.","React Hook useEffect has missing dependencies: 'history', 'location.pathname', and 'query.asset'. Either include them or remove the dependency array.",["534"],"'getSystemsByAsset' is defined but never used.","'addQueryParam' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'makeStyles' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'IconButton' is defined but never used.","'Tooltip' is defined but never used.","'ImageSearch' is defined but never used.","'ClearRounded' is defined but never used.","'notExist' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'faultId' and 'fid'. Either include them or remove the dependency array.",["535"],"'Slide' is defined but never used.","'slideIn' is assigned a value but never used.","'slideDirection' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'images'. Either include it or remove the dependency array.",["536"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useTranslation' is defined but never used.","'location' is assigned a value but never used.","'setUserList' is assigned a value but never used.","'AddRoundedIcon' is defined but never used.","'UserItem' is defined but never used.","'setCommentList' is assigned a value but never used.","'getFaults' is defined but never used.","'getFaultsQueryParams' is defined but never used.","React Hook useEffect has a missing dependency: 'query'. Either include it or remove the dependency array.",["537"],["538"],"no-global-assign","no-unsafe-negation",{"desc":"539","fix":"540"},{"desc":"539","fix":"541"},{"desc":"542","fix":"543"},{"desc":"544","fix":"545"},{"messageId":"546","fix":"547","desc":"548"},{"messageId":"549","fix":"550","desc":"551"},{"desc":"552","fix":"553"},{"desc":"554","fix":"555"},{"desc":"556","fix":"557"},{"desc":"558","fix":"559"},{"desc":"560","fix":"561"},{"desc":"542","fix":"562"},{"desc":"563","fix":"564"},{"desc":"565","fix":"566"},{"desc":"567","fix":"568"},{"desc":"569","fix":"570"},{"desc":"571","fix":"572"},{"desc":"573","fix":"574"},{"desc":"575","fix":"576"},{"desc":"577","fix":"578"},{"desc":"579","fix":"580"},{"desc":"581","fix":"582"},"Update the dependencies array to be: [checkUserAuthentication]",{"range":"583","text":"584"},{"range":"585","text":"584"},"Update the dependencies array to be: [isLoading, location.search]",{"range":"586","text":"587"},"Update the dependencies array to be: [history, location.pathname, location.search, values]",{"range":"588","text":"589"},"removeEscape",{"range":"590","text":"591"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"592","text":"593"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [filterField, handleSearch, query, searchText]",{"range":"594","text":"595"},"Update the dependencies array to be: [optionsFunc]",{"range":"596","text":"597"},"Update the dependencies array to be: [filterField, history, location.pathname, location.search, query, value]",{"range":"598","text":"599"},"Update the dependencies array to be: [filterField, optionsFunc, query]",{"range":"600","text":"601"},"Update the dependencies array to be: [filterField, history, location.pathname, location.search, query, values]",{"range":"602","text":"603"},{"range":"604","text":"587"},"Update the dependencies array to be: [location.search, query.asset]",{"range":"605","text":"606"},"Update the dependencies array to be: [handleSearch, searchText]",{"range":"607","text":"608"},"Update the dependencies array to be: [filterField, history, location.pathname, location.search, value]",{"range":"609","text":"610"},"Update the dependencies array to be: [currentOwner._id]",{"range":"611","text":"612"},"Update the dependencies array to be: [linkedUsers]",{"range":"613","text":"614"},"Update the dependencies array to be: [history, location.pathname, location.search, query.asset]",{"range":"615","text":"616"},"Update the dependencies array to be: [faultId, fid, isLoading]",{"range":"617","text":"618"},"Update the dependencies array to be: [images, index]",{"range":"619","text":"620"},"Update the dependencies array to be: [isLoading, query]",{"range":"621","text":"622"},"Update the dependencies array to be: [history, location.pathname, location.search, viewType]",{"range":"623","text":"624"},[1060,1062],"[checkUserAuthentication]",[1038,1040],[1320,1331],"[isLoading, location.search]",[1451,1459],"[history, location.pathname, location.search, values]",[1522,1523],"",[1522,1522],"\\",[1105,1117],"[filterField, handleSearch, query, searchText]",[1096,1098],"[optionsFunc]",[1571,1578],"[filterField, history, location.pathname, location.search, query, value]",[1442,1444],"[filterField, optionsFunc, query]",[1971,1979],"[filterField, history, location.pathname, location.search, query, values]",[1546,1557],[2096,2113],"[location.search, query.asset]",[1527,1539],"[handleSearch, searchText]",[1986,1993],"[filterField, history, location.pathname, location.search, value]",[1061,1063],"[currentOwner._id]",[1105,1107],"[linkedUsers]",[2822,2839],"[history, location.pathname, location.search, query.asset]",[1935,1946],"[faultId, fid, isLoading]",[1061,1068],"[images, index]",[1392,1403],"[isLoading, query]",[1897,1907],"[history, location.pathname, location.search, viewType]"]