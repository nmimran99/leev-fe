[{"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\index.js":"1","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\App.js":"2","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\authContext.js":"3","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\themes\\theme.js":"4","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\workspace\\Workspace.js":"5","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\workspace\\ProtectedWorkspace.js":"6","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\routes\\InitialRouter.js":"7","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\user\\Login.js":"8","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\userApi.js":"9","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\Controls.js":"10","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\Navbar.js":"11","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\SideMenu.js":"12","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\AddMenu.js":"13","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\Assets.js":"14","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\assetsApi.js":"15","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\Asset.js":"16","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\user\\UserItem.js":"17","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\AssetsControls.js":"18","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\AssetControls.js":"19","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\AlertDialoge.js":"20","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\SortBy.js":"21","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\FiltersContext.js":"22","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\AuthContext.js":"23","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\genericApi.js":"24","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\customHooks\\useQuery.js":"25","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\SearchBox.js":"26","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\FilterBySelect.js":"27","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\FilterByMultiSelect.js":"28","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\LanguageContext.js":"29","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\i18n.js":"30","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\Systems.js":"31","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemsControls.js":"32","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\SearchBoxSelect.js":"33","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\systemsApi.js":"34","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\System.js":"35","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\UpdateSystemOwner.js":"36","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemName.js":"37","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\AddLinkedUser.js":"38","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemsHeader.js":"39","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemControls.js":"40","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemLinkedUsers.js":"41","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\Faults.js":"42","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultsControls.js":"43","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\faultsApi.js":"44","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultListView.js":"45","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultMinified.js":"46","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\StatusTag.js":"47","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultLink.js":"48","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultView.js":"49","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\Carousel.js":"50","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultViewControls.js":"51","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\UserList.js":"52","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\CommentSection.js":"53","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultViews.js":"54","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\CreateContainer.js":"55","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemAdditionalDetails.js":"56","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\UpsertSystem.js":"57","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\UpsertFault.js":"58","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\UpdateOwner.js":"59","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\UpsertAsset.js":"60"},{"size":569,"mtime":1612721733308,"results":"61","hashOfConfig":"62"},{"size":1652,"mtime":1612719602814,"results":"63","hashOfConfig":"62"},{"size":457,"mtime":1612222036105,"results":"64","hashOfConfig":"62"},{"size":1950,"mtime":1613848139347,"results":"65","hashOfConfig":"62"},{"size":2802,"mtime":1614317682904,"results":"66","hashOfConfig":"62"},{"size":1383,"mtime":1612140660414,"results":"67","hashOfConfig":"62"},{"size":1448,"mtime":1612592795916,"results":"68","hashOfConfig":"62"},{"size":9718,"mtime":1612221364508,"results":"69","hashOfConfig":"62"},{"size":2557,"mtime":1613880846308,"results":"70","hashOfConfig":"62"},{"size":2205,"mtime":1613751347158,"results":"71","hashOfConfig":"62"},{"size":5208,"mtime":1612765399602,"results":"72","hashOfConfig":"62"},{"size":7500,"mtime":1612941896528,"results":"73","hashOfConfig":"62"},{"size":5596,"mtime":1614270702226,"results":"74","hashOfConfig":"62"},{"size":3617,"mtime":1613339507565,"results":"75","hashOfConfig":"62"},{"size":3969,"mtime":1614315679260,"results":"76","hashOfConfig":"62"},{"size":14175,"mtime":1614317755494,"results":"77","hashOfConfig":"62"},{"size":2863,"mtime":1614277544855,"results":"78","hashOfConfig":"62"},{"size":4604,"mtime":1613282044486,"results":"79","hashOfConfig":"62"},{"size":1910,"mtime":1614315481710,"results":"80","hashOfConfig":"62"},{"size":3234,"mtime":1613240835325,"results":"81","hashOfConfig":"62"},{"size":5216,"mtime":1613281720174,"results":"82","hashOfConfig":"62"},{"size":474,"mtime":1612077675310,"results":"83","hashOfConfig":"62"},{"size":457,"mtime":1612222036105,"results":"84","hashOfConfig":"62"},{"size":3301,"mtime":1613585429189,"results":"85","hashOfConfig":"62"},{"size":164,"mtime":1612245702093,"results":"86","hashOfConfig":"62"},{"size":3685,"mtime":1613353209720,"results":"87","hashOfConfig":"62"},{"size":6779,"mtime":1613345281720,"results":"88","hashOfConfig":"62"},{"size":8804,"mtime":1613409439913,"results":"89","hashOfConfig":"62"},{"size":628,"mtime":1614021323411,"results":"90","hashOfConfig":"62"},{"size":744,"mtime":1612722345758,"results":"91","hashOfConfig":"62"},{"size":3675,"mtime":1614317324634,"results":"92","hashOfConfig":"62"},{"size":5612,"mtime":1614317588999,"results":"93","hashOfConfig":"62"},{"size":8339,"mtime":1613345287951,"results":"94","hashOfConfig":"62"},{"size":4358,"mtime":1614058502945,"results":"95","hashOfConfig":"62"},{"size":9574,"mtime":1614301120305,"results":"96","hashOfConfig":"62"},{"size":7788,"mtime":1613789315527,"results":"97","hashOfConfig":"62"},{"size":5213,"mtime":1612941646899,"results":"98","hashOfConfig":"62"},{"size":7686,"mtime":1613205337883,"results":"99","hashOfConfig":"62"},{"size":2790,"mtime":1613954845212,"results":"100","hashOfConfig":"62"},{"size":5477,"mtime":1614022470922,"results":"101","hashOfConfig":"62"},{"size":8007,"mtime":1614022321846,"results":"102","hashOfConfig":"62"},{"size":1110,"mtime":1613589946595,"results":"103","hashOfConfig":"62"},{"size":8769,"mtime":1613353067070,"results":"104","hashOfConfig":"62"},{"size":4285,"mtime":1614294474676,"results":"105","hashOfConfig":"62"},{"size":2802,"mtime":1614187450200,"results":"106","hashOfConfig":"62"},{"size":3137,"mtime":1614298352141,"results":"107","hashOfConfig":"62"},{"size":2505,"mtime":1614111002611,"results":"108","hashOfConfig":"62"},{"size":493,"mtime":1613518131737,"results":"109","hashOfConfig":"62"},{"size":10582,"mtime":1614350295502,"results":"110","hashOfConfig":"62"},{"size":3087,"mtime":1614350450095,"results":"111","hashOfConfig":"62"},{"size":2446,"mtime":1614293111562,"results":"112","hashOfConfig":"62"},{"size":4857,"mtime":1614187725961,"results":"113","hashOfConfig":"62"},{"size":8155,"mtime":1614110373351,"results":"114","hashOfConfig":"62"},{"size":3251,"mtime":1614111877829,"results":"115","hashOfConfig":"62"},{"size":3268,"mtime":1614309704542,"results":"116","hashOfConfig":"62"},{"size":16098,"mtime":1614052542930,"results":"117","hashOfConfig":"62"},{"size":49587,"mtime":1614116364735,"results":"118","hashOfConfig":"62"},{"size":29153,"mtime":1614273862814,"results":"119","hashOfConfig":"62"},{"size":7830,"mtime":1614294117185,"results":"120","hashOfConfig":"62"},{"size":20889,"mtime":1614315541658,"results":"121","hashOfConfig":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},"2s6085",{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"124"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"124"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"124"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"124"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"124"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"124"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"124"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"124"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"124"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"124"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"124"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"124"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"124"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"124"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"201","messages":"202","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"124"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"124"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"209","messages":"210","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"124"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"124"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"124"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"124"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"124"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"124"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"124"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"124"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"235","messages":"236","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"124"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"240","messages":"241","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"124"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"124"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"248","messages":"249","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"250","messages":"251","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"252","messages":"253","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"124"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"124"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"124"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"263","messages":"264","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"124"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"124"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"271","messages":"272","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"273","messages":"274","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\index.js",[],["275","276"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\App.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\authContext.js",["277"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\themes\\theme.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\workspace\\Workspace.js",["278","279","280"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\workspace\\ProtectedWorkspace.js",["281"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { AuthContext } from '../../context/authContext';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { authenticate, handleLS } from '../../api/userApi';\r\n\r\nexport const ProtectedWorkspace = ({ children, isAuthenticated,...rest}) => {\r\n    \r\n    const { auth, setAuth } = useContext(AuthContext);\r\n    const [ isLoading, setIsLoading ] = useState(true);\r\n\r\n    const checkUserAuthentication = async () => {\r\n        let token = await handleLS('wb_token', 'get');\r\n        if (!token) {\r\n            setIsLoading(false);\r\n            return;\r\n        };\r\n        let res = await authenticate(token);\r\n        if (res.auth) {\r\n           setAuth({\r\n                isAuth: res.auth,\r\n                user: res.user,\r\n                token: res.token.token,\r\n                refreshToken: res.token.refreshToken\r\n            });\r\n              \r\n        }\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n    useEffect(() => {\r\n        checkUserAuthentication();\r\n    }, []);\r\n\r\n    return (\r\n        <Route {...rest}\r\n          render={() => isLoading ? \r\n            'loading' : \r\n            auth.isAuth\r\n            ? children\r\n            :   <Redirect\r\n                    to={{\r\n                    pathname: \"/login\"\r\n                }}/>\r\n            }      \r\n        />\r\n      );\r\n}\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\routes\\InitialRouter.js",["282"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { AuthContext } from '../../context/AuthContext';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { authenticate, handleLS } from '../../api/userApi';\r\n\r\nexport const InitialRouter = ({...rest}) => {\r\n    \r\n    const { auth, setAuth } = useContext(AuthContext);\r\n    const [ isLoading, setIsLoading ] = useState(true);\r\n\r\n    const checkUserAuthentication = async () => {\r\n        let token = await handleLS('wb_token', 'get');\r\n        if (!token) {\r\n            setIsLoading(false);\r\n            return;\r\n        };\r\n        let res = await authenticate(token);\r\n        \r\n        if (res.auth) {\r\n           setAuth({\r\n                isAuth: res.auth,\r\n                user: res.user,\r\n                token: res.token.token,\r\n                refreshToken: res.token.refreshToken\r\n            });\r\n              \r\n        }\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n    useEffect(() => {\r\n        checkUserAuthentication();\r\n    }, []);\r\n\r\n    return (\r\n        <Route {...rest}\r\n          render={() => isLoading ? \r\n            'loading' : \r\n            auth.isAuth\r\n            ? <Redirect\r\n                to={{\r\n                    pathname: \"/workspace\"\r\n            }}/> \r\n            :   <Redirect\r\n                    to={{\r\n                    pathname: \"/login\"\r\n                }}/>\r\n            }      \r\n        />\r\n      );\r\n}\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\user\\Login.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\userApi.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\Controls.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\Navbar.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\SideMenu.js",["283"],"import React, { useContext } from 'react'\r\nimport { makeStyles, List, ListItem, ListItemIcon, ListItemText, Grow, ClickAwayListener, useMediaQuery } from '@material-ui/core'\r\nimport BusinessRoundedIcon from '@material-ui/icons/BusinessRounded';\r\nimport AssignmentRoundedIcon from '@material-ui/icons/AssignmentRounded';\r\nimport WarningRoundedIcon from '@material-ui/icons/WarningRounded';\r\nimport DescriptionRoundedIcon from '@material-ui/icons/DescriptionRounded';\r\nimport BlurOnRoundedIcon from '@material-ui/icons/BlurOnRounded';\r\nimport { UserItem } from '../../user/UserItem'\r\nimport ExitToAppRoundedIcon from '@material-ui/icons/ExitToAppRounded';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport { useHistory } from 'react-router-dom'; \r\nimport { useTranslation } from 'react-i18next';\r\nimport { AuthContext } from '../../../context/AuthContext';\r\n\r\nexport const SideMenu = ({toggleMenu}) => {\r\n\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const { t, i18n } = useTranslation();\r\n    const matches = useMediaQuery(theme => theme.breakpoints.up('sm'));\r\n    const { auth } = useContext(AuthContext);\r\n\r\n    const closeMenu = () => {\r\n        if (matches) {\r\n            toggleMenu()\r\n        }\r\n    }\r\n    \r\n    const handleClick = type => event => {\r\n        toggleMenu();\r\n        history.push(`/workspace/${type}`)\r\n    }\r\n\r\n    return (\r\n        <ClickAwayListener onClickAway={closeMenu}>\r\n            <Grow in={true}>\r\n                <div className={classes.sidemenuContainer}>\r\n                    <div className={classes.userContainer}>   \r\n                        <UserItem \r\n                            showTitle\r\n                            user={auth.user}\r\n                        />\r\n                    </div>\r\n                    <List className= { classes.list}>\r\n                        <ListItem button={true} className={classes.listItem}\r\n                            onClick={handleClick('assets')}\r\n                        >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <BusinessRoundedIcon fontSize={'medium'} className={classes.icon}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"sideMenu.assets\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem button={true} className={classes.listItem}\r\n                            onClick={handleClick('systems')}\r\n                        >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <BlurOnRoundedIcon fontSize={'medium'} className={classes.icon}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"sideMenu.systems\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem button={true} className={classes.listItem}\r\n                            onClick={handleClick('tasks')}\r\n                        >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <AssignmentRoundedIcon fontSize={'medium'}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"sideMenu.myTasks\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem button={true} className={classes.listItem}\r\n                            onClick={handleClick('faults')}\r\n                        >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <WarningRoundedIcon fontSize={'medium'}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"sideMenu.faults\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem button={true} className={classes.listItem}\r\n                            onClick={handleClick('docs')}\r\n                        >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <DescriptionRoundedIcon fontSize={'medium'}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"sideMenu.documents\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                    </List>\r\n                    <List className={classes.bottomList}>\r\n                        <ListItem button={true} >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <SettingsIcon fontSize={'medium'} />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"sideMenu.settings\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem button={true} >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <ExitToAppRoundedIcon fontSize={'medium'} />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"sideMenu.logout\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                    </List>\r\n                </div>\r\n            </Grow>\r\n        </ClickAwayListener>\r\n        \r\n        \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    userContainer: {\r\n        width: '85%',\r\n        margin: '20px auto',\r\n        padding: '15px 10px',\r\n        borderRadius: '10px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        background: 'rgba(0,0,0,0.7)',\r\n        boxShadow: '0 8px 32px 0 rgb(0 0 0 / 37%)',\r\n        '&:hover' :{\r\n            background: 'black',\r\n            transition: 'background 0.2s ease',\r\n            boxShadow: '0 8px 32px 0 rgb(0 0 0 / 80%)',\r\n        }\r\n    },\r\n    sidemenuContainer: {\r\n        zIndex: 2,\r\n        width: '300px',\r\n        background: theme.palette.primary.main,\r\n        backdropFilter: 'blur(10px)',\r\n        boxShadow: 'rgba(0,0,0,0.25) 0px 0px 6px 3px',\r\n        position: 'absolute',\r\n        top: '80px',\r\n        left: '10px',\r\n        borderRadius: '10px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        [theme.breakpoints.down('sm')]: {\r\n            maxHeight: '70vh',\r\n            overflow: 'scroll'\r\n        }\r\n\r\n    },\r\n    list: {\r\n        width: '90%',\r\n        borderTop: '1px solid rgba(255,255,255,0.3)',\r\n        borderBottom: '1px solid rgba(255,255,255,0.3)',\r\n        margin: '0px auto',\r\n        padding: '20px 0'\r\n    },\r\n    listItem: {\r\n        color: 'theme.palette.primary.main',\r\n        margin: '7px auto',\r\n        borderRadius: '10px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        transition: 'background box-shadow 0.3s ease-in-out',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.6)',\r\n            transition: 'background box-shadow 0.2s ease-in-out',\r\n            boxShadow: '0 8px 32px 0 rgb(0 0 0 / 80%)',\r\n        }\r\n    }, \r\n    listItemIcon: {\r\n        color: 'white'\r\n    },\r\n    listItemText: {     \r\n        fontSize: '14px',\r\n        color: 'white'\r\n        \r\n    },\r\n    bottomList: {\r\n        padding: '10px 0'\r\n    }\r\n\r\n}));","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\AddMenu.js",["284"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\Assets.js",["285","286"],"import React, { useEffect, useState } from 'react'\r\nimport { Grid, LinearProgress, makeStyles } from '@material-ui/core'\r\nimport { getSites, removeSite,getFullAddress, applyFilters } from '../../../api/assetsApi'\r\nimport { Asset } from './Asset'\r\nimport { AssetsControls } from './AssetsControls'\r\nimport { AlertDialog } from '../../reuseables/AlertDialoge'\r\nimport { queryParamsToObject } from '../../../api/genericApi';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport const Assets = () => {\r\n\r\n    const location = useLocation();\r\n    const classes = useStyles();\r\n    const { t, i18n } = useTranslation();\r\n    const [ assets, setSites ] = useState([]);\r\n    const [ isLoading, setIsLoading ] = useState(true);\r\n    const [ alertDialoge , setAlertDialoge ] = useState(null)\r\n\r\n    useEffect(() => {\r\n        if(!isLoading) return;\r\n        getSites()\r\n        .then(res => {\r\n            if (res) {\r\n                return applyFilters(queryParamsToObject(location.search), res.data)   \r\n            }\r\n        })\r\n        .then(data => {\r\n            if (data) {\r\n                setSites(data)\r\n            }\r\n        }) \r\n        .catch(e => {\r\n            console.log(e.message)\r\n        })\r\n        .finally(() => setIsLoading(false))\r\n        \r\n    }, [isLoading])\r\n\r\n    useEffect(()=> {\r\n        setIsLoading(true)\r\n    }, [location.search])\r\n\r\n    const removeAsset = (assetId, data) => {\r\n        setAlertDialoge({\r\n            handleConfirm: async () => {\r\n                const res = await removeSite(assetId);\r\n                if (res) {\r\n                    setAlertDialoge(null)\r\n                    setIsLoading(true);\r\n                } else {\r\n                    console.log(res)\r\n                }\r\n            },\r\n            handleCancel: () => setAlertDialoge(null),\r\n            text: `${t(\"assetsModule.deleteConfirmation\")} ${getFullAddress(data)}?`,\r\n            title: `${t(\"assetsModule.deleteAsset\")}`\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Grid container >\r\n                <Grid item xs={12}>\r\n                    <div className={classes.pageModule}>\r\n                        {t(\"assetsModule.assets\")}\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} md={12} >\r\n                    <AssetsControls />\r\n                </Grid>\r\n                <Grid container justify='center'>\r\n                    {\r\n                        isLoading ?\r\n                        <LinearProgress /> :\r\n                        assets.map((v,i) => \r\n                            <Asset \r\n                                assetData={v} \r\n                                key={i} \r\n                                order={i}\r\n                                removeAsset={removeAsset}\r\n                                \r\n                            />\r\n                        )    \r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n            {\r\n                Boolean(alertDialoge) &&\r\n                <AlertDialog \r\n                    open={Boolean(alertDialoge)}\r\n                    alertDialoge={alertDialoge}\r\n                />\r\n            }\r\n            \r\n        </div>\r\n            \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    pageModule: {\r\n        color: 'white',\r\n        padding: '10px 40px',\r\n        fontSize: '18px',\r\n        background: 'rgba(0,0,0,0.6)',\r\n        margin: '0px auto 5px',\r\n        width: '30%',\r\n        textAlign: 'center',\r\n        borderRadius: '0 0 25px 25px',\r\n        lineHeight: '1'\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\assetsApi.js",["287"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\Asset.js",["288","289","290","291"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\user\\UserItem.js",["292","293"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { AuthContext } from '../../context/AuthContext'\r\nimport { makeStyles, Avatar, Typography, Button } from '@material-ui/core'\r\nimport { getUserDataById } from '../../api/userApi';\r\n\r\n\r\nexport const UserItem = ({ user, showPhone, showTitle, avatarSize, size }) => {\r\n\r\n    const { auth } = useContext(AuthContext)\r\n    const [ userData, setUserData ] = useState(user)\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (!user._id) {\r\n            getUserDataById(user)\r\n            .then(data => {\r\n                setUserData(data)\r\n            })\r\n        } else {\r\n            setUserData(user)\r\n        }\r\n    }, [user])\r\n\r\n\r\n    return (\r\n        <div \r\n            className={classes.btnContainer}\r\n        >\r\n            <Avatar className={classes.avatar} alt={'abc'} src={userData.avatar} style={{ height: avatarSize || '60px', width: avatarSize || '60px' }}/>\r\n            <div className={classes.dataContainer}>\r\n                <Typography className={classes.fullname} style={{ fontSize: `${size * 1.2}px` || '16px' }}>\r\n                    {`${userData.firstName} ${userData.lastName}`}\r\n                </Typography>\r\n                {\r\n                    showTitle &&\r\n                    <Typography className={classes.title} style={{ fontSize: `${size * 1.1}px` || '18px' }}>\r\n                        {userData.title || 'עובד כללי'}\r\n                    </Typography>\r\n                }\r\n                \r\n                {\r\n                    showPhone &&\r\n                    <Typography className={classes.phoneNumber} style={{ fontSize: `${size * 1}px` || '14px' }}>\r\n                        {userData.phoneNumber || '054-652-9994'}\r\n                    </Typography>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    btnContainer: {\r\n        width: 'fit-content',\r\n        height: 'inherit',\r\n        borderRadius: 'inherit',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-start',\r\n        '&:hover': {\r\n            boxShadow: 'none',\r\n            background: 'transparent' \r\n        }\r\n    },\r\n    dataContainer: {\r\n        marginLeft: '15px',\r\n        width: '90%',\r\n        textAlign: 'left',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center'\r\n    },\r\n    fullname: {\r\n        width: 'fit-content',\r\n        color: 'lightgrey',\r\n        lineHeight: 1,\r\n        textOverflow: 'ellipsis',\r\n        overflow: 'hidden',\r\n        whiteSpace: 'nowrap'\r\n    },\r\n    title: {\r\n        color: 'white',\r\n\r\n    },\r\n    phoneNumber: {\r\n        color: 'white',\r\n        width: 'auto',\r\n        whiteSpace: 'nowrap'\r\n\r\n    },\r\n    avatar: {\r\n        boxShadow: '0 1px 5px 5px rgb(0 0 0 / 20%)'\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\AssetsControls.js",["294","295","296"],"import React, { useState } from 'react'\r\nimport { Grid, makeStyles,  useMediaQuery, Collapse, Button } from '@material-ui/core'\r\nimport { SortBy } from '../../reuseables/SortBy'\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\nimport { SearchBox } from '../../reuseables/SearchBox';\r\nimport { FilterBySelect } from '../../reuseables/FilterBySelect';\r\nimport PersonRoundedIcon from '@material-ui/icons/PersonRounded';\r\nimport { getUserList } from '../../../api/userApi';\r\nimport { FilterByMultiSelect } from '../../reuseables/FilterByMultiSelect';\r\nimport { useTranslation } from 'react-i18next';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport ExpandMoreRoundedIcon from '@material-ui/icons/ExpandMoreRounded';\r\nimport { ClearRounded } from '@material-ui/icons';\r\n\r\n\r\nconst sortOptions = [\r\n    {\r\n        text: 'כתובת',\r\n        field: 'street'\r\n    },\r\n    {\r\n        text: 'עיר',\r\n        field: 'city'\r\n    },\r\n    {\r\n        text: 'מנהל בניין',\r\n        field: 'owner'\r\n    },\r\n    {\r\n        text: 'כמות משימות פתוחות',\r\n        field: 'openTasksCount'\r\n    },\r\n    {\r\n        text: 'כמות תקלות פתוחות',\r\n        field: 'openFaultsCount'\r\n    },\r\n    \r\n]\r\n\r\nexport const AssetsControls = ({ components }) => {\r\n    \r\n    const classes = useStyles();\r\n    const { t, i18n } = useTranslation();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const [ collapsed, setCollapsed ] = useState(!downSm ? true : false);\r\n    \r\n\r\n    const createUserOptions = () => {\r\n        return getUserList()\r\n        .then(data => {\r\n            let userList = [];\r\n            data.forEach(user => {\r\n                userList.push({label: `${user.firstName} ${user.lastName}`, value: user._id })\r\n            });\r\n            return userList;\r\n        })\r\n    }\r\n\r\n    const toggleCollapse = () => {\r\n        if (collapsed) {\r\n            setCollapsed(false);\r\n            return;\r\n        }\r\n        setCollapsed(true)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                downSm &&\r\n                <Grid container justify='center'>\r\n                    <Grid item xs={11} className={classes.gridItem}>\r\n                        <Button\r\n                        className={classes.sortandfilter}\r\n                        startIcon={<FilterListIcon className={classes.icon} />}\r\n                        endIcon={collapsed ? <ClearRounded /> : <ExpandMoreRoundedIcon />}\r\n                        onClick={toggleCollapse}\r\n                    >\r\n                        {t(`faultsModule.${ collapsed ? 'hide' : 'show'}Filters`)}\r\n                    </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                    \r\n            }\r\n            <Collapse in={collapsed}>\r\n                <Grid container justify='center' >\r\n                    <Grid item xs={11} sm={9} md={7} lg={5} xl={4} className={classes.gridItem}>\r\n                        <SearchBox \r\n                            placeholder={t(\"assetsModule.filterByCityOrAddress\")}\r\n                            filterField={'searchText'}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={11} className={classes.gridItem}>         \r\n                        <FilterBySelect \r\n                            optionsFunc={createUserOptions}\r\n                            placeholder={t(\"assetsModule.filterByAssetOwner\")}\r\n                            filterIcon={<PersonRoundedIcon className={classes.icon }/>}\r\n                            filterField={'owner'}\r\n                        \r\n                        />\r\n                    \r\n                        <SortBy \r\n                            menuOptions={sortOptions}\r\n                        />   \r\n                    </Grid>  \r\n                </Grid>\r\n            </Collapse>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(them => ({\r\n    gridItem: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap'\r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        marginLeft: '4px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    sortandfilter: {\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        background: 'rgba(0,0,0,0.7)',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '5px 25px 5px 3px',\r\n        whiteSpace: 'nowrap',\r\n        '&:hover': {\r\n            background: 'black'\r\n        }\r\n    }\r\n}))\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\AssetControls.js",["297","298"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\AlertDialoge.js",["299"],"import React, { useContext } from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\nimport { useTranslation } from 'react-i18next';\r\nimport clsx from 'clsx';\r\n\r\nexport const AlertDialog = ({ alertDialoge , open }) => {\r\n\r\n        const classes = useStyles();\r\n        const { lang } = useContext(LanguageContext);\r\n        const { t, i18n } = useTranslation();\r\n  return (\r\n    <Dialog\r\n        open={open}\r\n        onClose={alertDialoge.handleCancel}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n        style={{ direction: lang.dir}}\r\n        classes={{\r\n            root: classes.root, \r\n            paper: classes.paper,\r\n            container: classes.container\r\n        }}\r\n        BackdropProps={{\r\n            timeout: 500,\r\n            classes: {\r\n                root: classes.root\r\n            }\r\n        }}\r\n    >\r\n    <DialogTitle id=\"alert-dialog-title\" style={{ direction: lang.dir}} className={classes.title}>\r\n        {alertDialoge.title}\r\n    </DialogTitle>\r\n    <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-description\" style={{ direction: lang.dir}} className={classes.text}>\r\n        { alertDialoge.text }\r\n        </DialogContentText>\r\n    </DialogContent>\r\n    <DialogActions className={classes.controls}>\r\n        <Button\r\n            className={clsx(classes.control, classes.save)}\r\n            onClick={alertDialoge.handleConfirm}\r\n        >\r\n            { alertDialoge.confirmText || t(\"alert.confirm\") }\r\n        </Button>\r\n        <Button\r\n            className={clsx(classes.control, classes.cancel)}\r\n            onClick={alertDialoge.handleCancel}\r\n        >\r\n            { alertDialoge.cancelText || t(\"alert.cancel\") }\r\n        </Button>\r\n    </DialogActions>\r\n    </Dialog>\r\n\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        backgroundColor: 'rgba(0,0,0,0.4)'\r\n    },\r\n    container: {\r\n        backdropFilter: 'blur(10px)',\r\n    },\r\n    paper: {\r\n        width: 'auto',\r\n        padding: '5px',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        borderRadius: '10px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        color: 'white'\r\n    },\r\n    text: {\r\n        color: 'white'\r\n    },\r\n    controls: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    control: {\r\n        width: '30%',\r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        fontSize: '16px',\r\n        margin: '5px',\r\n        padding: '5px 30px',\r\n        borderRadius: '30px',\r\n        color: 'white', \r\n    },\r\n    save: {\r\n        background: 'rgba(0,0,0,0.2)', \r\n        '&:hover': {\r\n            background: 'black'\r\n        }\r\n    },\r\n    cancel: {\r\n        border: '0px solid grey',\r\n        '&:hover': {\r\n            borderWidth: '1px'\r\n        }\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\SortBy.js",["300","301"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport { makeStyles, ButtonGroup, Button, Menu, MenuItem } from '@material-ui/core'\r\nimport SortRoundedIcon from '@material-ui/icons/SortRounded';\r\nimport ArrowDropUpOutlinedIcon from '@material-ui/icons/ArrowDropUpOutlined';\r\nimport ArrowDropDownOutlinedIcon from '@material-ui/icons/ArrowDropDownOutlined';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { addQueryParam } from '../../api/genericApi';\r\nimport { useQuery } from './customHooks/useQuery';\r\nimport { useTranslation } from 'react-i18next'\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\n\r\n\r\nexport const SortBy = ({menuOptions, handleSortChange}) => {\r\n    \r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const { t, i18n } = useTranslation();\r\n    const { lang } = useContext(LanguageContext);\r\n    const [ values, setValues ] = useState({\r\n        sortBy: query.sortBy || '',\r\n        sortOrder: query.sortOrder || 'asc' \r\n    })\r\n    const [ anchorEl, setAnchorEl ] = useState(null);\r\n \r\n    useEffect(() => {\r\n        if (!values.sortBy) return;\r\n        history.push({\r\n            path: location.pathname,\r\n            search: addQueryParam(location.search, [{ name: 'sortBy', value: values.sortBy}, {name: 'sortOrder', value: values.sortOrder}])\r\n        })\r\n    }, [values])\r\n\r\n    const handleClick = menuOption => event => {\r\n        setValues({\r\n            ...values, \r\n            sortBy: menuOption\r\n        })\r\n        setAnchorEl(null);\r\n    }\r\n\r\n    const handleChange = () => {\r\n        if (values.sortBy) {\r\n            setValues({\r\n                ...values, \r\n                sortOrder: values.sortOrder === 'asc' ? 'desc' : 'asc'\r\n            })\r\n        }\r\n    }\r\n    \r\n    const getOptionText = (option) => {\r\n        const result = menuOptions.find( mo => option === mo.field);\r\n        if (result) {\r\n            return result.text\r\n        }\r\n        return t(\"sort.sortBy\")\r\n    }\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <ButtonGroup \r\n                className={classes.sort}\r\n            >\r\n\r\n                <Button \r\n                    className={classes.sortBy}\r\n                    onClick={event => setAnchorEl(event.currentTarget)}\r\n                    startIcon={<SortRoundedIcon className={classes.icon}/>}\r\n                >\r\n                    {values.sortBy ? getOptionText(values.sortBy) : `${t(\"sort.sortBy\")}`}\r\n                </Button>\r\n                <Menu\r\n                    anchorEl={anchorEl}\r\n                    open={Boolean(anchorEl)}\r\n                    onClose={() => setAnchorEl(null)}\r\n                    classes={{\r\n                        paper : classes.menu\r\n                    }}\r\n                    keepMounted\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'right',\r\n                    }}\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'right',\r\n                    }}\r\n                >\r\n                    {\r\n                        menuOptions.map((v,i) => {\r\n                            return (\r\n                                <MenuItem\r\n                                    key={i}\r\n                                    onClick={handleClick(v.field)}\r\n                                    style={{ direction: lang.code === 'he' ? 'rtl' : 'ltr'}}\r\n                                >\r\n                                    {v.text}\r\n                                </MenuItem>\r\n                            )\r\n                            \r\n                        })\r\n                    }\r\n                </Menu>\r\n                <Button\r\n                    endIcon={ values.sortOrder === 'asc' ? <ArrowDropUpOutlinedIcon /> : <ArrowDropDownOutlinedIcon />}\r\n                    onClick={handleChange}\r\n                    className={classes.sortOrder}\r\n                >\r\n                    { `${ values.sortOrder === 'asc' ? `${t(\"sort.asc\")}` : `${t(\"sort.desc\")}`}`}\r\n                </Button> \r\n            </ButtonGroup>\r\n            \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    sort: {\r\n        margin: '5px',\r\n        height: '45px',\r\n        \r\n    },\r\n    sortBy: {\r\n        borderRadius: '25px 0 0 25px',\r\n        padding: '0 15px 0 3px',\r\n        color: 'white',\r\n        width: 'auto',\r\n        whiteSpace: 'nowrap',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    sortOrder: {\r\n        borderRadius: '0px 25px 25px 0px',\r\n        padding: 0,\r\n        color: 'white',\r\n       width: '100px',\r\n       border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    menu: {\r\n        marginTop: '55px',\r\n        background: 'rgba(0,0,0,0.5)',\r\n        backdropFilter: 'blur(10px)',\r\n        color: 'white'\r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        margin: '0 6px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        \r\n    }\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\FiltersContext.js",["302"],"import React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const FiltersContext = createContext();\r\n\r\nexport const FiltersContextProvider = (props) => {\r\n    const [ filters, setFilters ] = useState({\r\n        sortBy: null,\r\n        sortOrder: 'asc',\r\n        activeFilters: []\r\n    });\r\n\r\n    return (\r\n        <FiltersContext.Provider value={{ filters, setFilters }}>\r\n            { props.children }\r\n        </FiltersContext.Provider>\r\n    );\r\n}\r\n\r\n\r\n\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\AuthContext.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\genericApi.js",["303"],"import axios from 'axios';\r\nimport i18next from 'i18next';\r\n\r\nexport const queryParamsToObject = (search) => {\r\n    if (!search) return {};\r\n    search = search.substring(1);\r\n    \r\n    let decoded = JSON.parse('{\"' + decodeURI(search)\r\n        .replace(/\"/g, '\\\\\"')\r\n        .replace(/&/g, '\",\"')\r\n        .replace(/=/g,'\":\"')\r\n        .replace(/%2C/g, ',')\r\n        .replace(/%5D/g, ',')\r\n        .replace(/%5B/g, ',') + '\"}');\r\n    Object.entries(decoded).forEach(entry => {\r\n        if (entry[1].substring(0, 1) === \"[\") {\r\n            decoded[entry[0]] = JSON.parse(entry[1])\r\n        }\r\n    });\r\n    return decoded;\r\n}\r\n\r\nexport const removeQueryParam = (search, paramName) => {\r\n    let params = new URLSearchParams(search);\r\n    params.delete(paramName);\r\n    return params.toString() ? '?' + params.toString() : '';\r\n}\r\n\r\nexport const addQueryParam = (search, paramList) => {\r\n    let params = new URLSearchParams(search);\r\n    if (!paramList.length) return '?' + params.toString(); \r\n    paramList.forEach(param => {\r\n        if (param.value instanceof Array ) {\r\n            param.value = JSON.stringify(param.value);\r\n        }\r\n        if (params.get(param.name)) {\r\n            params.set(param.name, param.value)\r\n        } else {\r\n            params.append(param.name, param.value);\r\n        }\r\n    })\r\n    return '?' + params.toString();\r\n}\r\n\r\nexport const specialStringPurge = (string) => {\r\n    if (!string) return null;\r\n    return string\r\n            .replaceAll('+', ' ')\r\n            .replaceAll(/[&\\/\\\\#,+()$~%.'\":*?<>{}]/g,'')\r\n            .replaceAll(' ,', '')\r\n            .replaceAll(',', ' ');\r\n}\r\n\r\nexport const getLabelsByLanguage = async (lang) => {\r\n    const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/users/getLabels`, { lang });\r\n    if (res) {\r\n        console.log(res.data);\r\n        return res.data;\r\n    }\r\n}\r\n\r\nexport const getFullName = (user) => {\r\n    return `${user.firstName} ${user.lastName}`\r\n}\r\n\r\nexport const getDatediffString = (fromDate) => {\r\n    let diffInSecs = Math.round((new Date() - new Date(fromDate)) / 1000);\r\n    let diff;\r\n    if (diffInSecs < 60) {\r\n        diff = (diffInSecs).toString();\r\n        return  diff + i18next.t(\"dates.shortsecond\")\r\n    }\r\n    if (diffInSecs > 60 && diffInSecs < 3600) {\r\n        diff = Math.round((diffInSecs / 60)).toString();\r\n        return diff + ' ' + i18next.t(\"dates.shortminute\")\r\n    }\r\n    if (diffInSecs > 3600 && diffInSecs < 86400) {\r\n        diff = Math.round((diffInSecs / 3600)).toString();\r\n        return diff + ' ' + i18next.t(\"dates.shorthour\")\r\n    }\r\n    if (diffInSecs > 86400 && diffInSecs < 604800) {\r\n        diff = Math.round((diffInSecs / 86400)).toString();\r\n        return diff + ' ' + i18next.t(\"dates.shortday\")\r\n    }\r\n    if (diffInSecs > 604800 && diffInSecs < 2629743) {\r\n        diff = Math.round((diffInSecs / 604800)).toString();\r\n        return diff + ' ' + i18next.t(\"dates.shortweek\")\r\n    }\r\n    if (diffInSecs > 2629743 && diffInSecs < 31556926) {\r\n        diff = Math.round((diffInSecs / 2629743)).toString();\r\n        return diff + ' ' + i18next.t(\"dates.shortmonth\")\r\n    }\r\n    if (diffInSecs < 31556926) {\r\n        diff = Math.round((diffInSecs / 31556926)).toString();\r\n        return diff + ' ' + i18next.t(\"dates.shortyear\")\r\n    };\r\n}","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\customHooks\\useQuery.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\SearchBox.js",["304","305","306"],"import React, { useState, useEffect } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { addQueryParam, removeQueryParam, queryParamsToObject, specialStringPurge} from '../../api/genericApi';\r\nimport { OutlinedInput, FormControl, makeStyles, Grid, ClickAwayListener } from '@material-ui/core'\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\nimport { useQuery } from './customHooks/useQuery';\r\nimport clsx from 'clsx';\r\n\r\nexport const SearchBox = ({ placeholder, filterField }) => {\r\n    \r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const [ onFocus, setOnFocus ] = useState(false);\r\n    const [ searchText, setSearchText ] = useState(specialStringPurge(query[filterField]) || '');\r\n    \r\n    useEffect(() => {\r\n        if (Boolean(searchText) && searchText === specialStringPurge(query[filterField])) return;\r\n        const timeOutId = setTimeout(() => handleSearch(searchText), 700);\r\n        return () => clearTimeout(timeOutId);\r\n    }, [searchText])\r\n\r\n    const handleChange = event => {\r\n        setSearchText(event.target.value)\r\n    }\r\n\r\n    const handleSearch = searchText => {\r\n        if (searchText) {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: addQueryParam(location.search, [{ name: filterField, value: searchText}])\r\n            });\r\n            return; \r\n        }\r\n        history.push({\r\n            path: location.pathname,\r\n            search: removeQueryParam(location.search, filterField)\r\n        });\r\n        \r\n    }\r\n\r\n    return (\r\n        <ClickAwayListener onClickAway={() => setOnFocus(false)}>\r\n            <div className={clsx(classes.container , onFocus && classes.focused)} xs={11} sm={9} md={8} lg={6}>\r\n                    <SearchRoundedIcon className={classes.icon}/>\r\n                    <FormControl variant='outlined' className={classes.form}>\r\n                        <OutlinedInput\r\n                            value={ searchText || '' }\r\n                            onChange={handleChange}\r\n                            placeholder={placeholder}\r\n                            className={clsx(classes.searchInput)}\r\n                            onFocus={() => setOnFocus(true)}\r\n                        />\r\n                    </FormControl>\r\n            </div>\r\n        </ClickAwayListener>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        margin: '5px',\r\n        height: '45px',\r\n        maxWidth: '450px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '25px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        transition: 'box-shadow 0.2s ease-in',\r\n        '&:hover': {\r\n            boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n            transition: 'box-shadow 0.2s ease-in'\r\n        }\r\n\r\n    },\r\n    focused: {\r\n        boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n        background: 'rgba(0,0,0,0.1)',\r\n        backdropFilter: 'blur(40px)'\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        \r\n    },\r\n    searchInput: {\r\n        height: '34px',\r\n        width: '98.5%',\r\n        margin: '3px 0.75%',\r\n        borderRadius: '5px 25px 25px 5px',\r\n        color: 'white',\r\n        '& input': {\r\n            padding: '12.5px 14px',\r\n        },\r\n        '& fieldset': {\r\n            border: '0'\r\n        } \r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        margin: '0 5px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        \r\n    }\r\n}))\r\n\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\FilterBySelect.js",["307","308","309"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport { makeStyles, Button, Menu, MenuItem, IconButton } from '@material-ui/core'\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { addQueryParam, specialStringPurge, removeQueryParam } from '../../api/genericApi';\r\nimport { useQuery } from './customHooks/useQuery';\r\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded';\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\n\r\nexport const FilterBySelect = ({ filterField, placeholder, filterIcon, optionsFunc }) => {\r\n    \r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const { lang } = useContext(LanguageContext);\r\n    const [ menuOptions, setMenuOptions] = useState([]);\r\n    const [ anchorEl, setAnchorEl ] = useState(null);\r\n    const [ value, setValue ] = useState(query[filterField] || '')\r\n\r\n    useEffect(() => {\r\n        optionsFunc()\r\n        .then(data => {\r\n            setMenuOptions(data)\r\n        }) \r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (value) {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: addQueryParam(location.search, [{ name: filterField, value }])\r\n            });\r\n            return;\r\n        }\r\n        if(query[filterField]) {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: removeQueryParam(location.search, filterField)\r\n            });\r\n        }     \r\n    }, [value])\r\n\r\n    const createTag = val => {\r\n        let data = menuOptions.find(op => val === op.value);\r\n        if (!data) return;\r\n        return (\r\n            <div className={classes.tag}>\r\n                <label className={classes.tagLabel}>\r\n                    { data.label }\r\n                </label>\r\n                <IconButton \r\n                    className={classes.removeBtn}\r\n                    onClick={removeChoice(data.value)}\r\n                >\r\n                    <CloseRoundedIcon className={classes.tagRemove}/>\r\n                </IconButton>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const removeChoice = value => event => {\r\n        event.stopPropagation();\r\n        setValue('')\r\n    }\r\n\r\n    const handleClick = val => event => {\r\n        setValue(val);\r\n        setAnchorEl(null)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                Boolean(menuOptions.length) &&\r\n                    <div item className={classes.select}>\r\n                        <Button \r\n                            className={classes.filterBy}\r\n                            onClick={event => setAnchorEl(event.currentTarget)}\r\n                            startIcon={filterIcon}\r\n                        >\r\n                            { value ? createTag(value) : <label style={{ padding: '0 15px', cursor: 'pointer' }}>{placeholder}</label>}\r\n                        </Button>\r\n                        <Menu\r\n                            anchorEl={anchorEl}\r\n                            open={Boolean(anchorEl)}\r\n                            onClose={() => setAnchorEl(null)}\r\n                            classes={{\r\n                                paper : classes.menu\r\n                            }}\r\n                            keepMounted\r\n                            anchorOrigin={{\r\n                                vertical: 'bottom',\r\n                                horizontal: 'right',\r\n                            }}\r\n                            transformOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'right',\r\n                            }}\r\n                        >\r\n                            {\r\n                                menuOptions.map((v,i) => {\r\n                                    return (\r\n                                        <MenuItem\r\n                                            key={i}\r\n                                            onClick={handleClick(v.value)}\r\n                                            className={classes.menuitem}\r\n                                            style={{ direction: lang.code === 'he' ? 'rtl' : 'ltr'}}\r\n                                        >\r\n                                            {v.label}\r\n                                        </MenuItem>\r\n                                    )\r\n                                    \r\n                                })\r\n                            }\r\n                        </Menu>\r\n                    </div>\r\n            }          \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    select: {\r\n        margin: '5px',\r\n        height: '45px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    filterBy: {\r\n        textTransform: 'none',\r\n        color: 'white',\r\n        padding: '0 4px',\r\n        height: '45px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '25px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        whiteSpace: 'nowrap',\r\n        '&:hover': {\r\n            boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n            \r\n        }\r\n    },\r\n    menu: {\r\n        marginTop: '55px',\r\n        background: 'rgba(0,0,0,0.5)',\r\n        backdropFilter: 'blur(10px)',\r\n        color: 'white'\r\n    },\r\n    menuitem: {\r\n        minWidth: '200px'\r\n    },\r\n    container: {\r\n        height: '45px',\r\n        border: '1px solid rgba(0,0,0,0.25)',\r\n        borderRadius: '25px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        '&:hover': {\r\n            boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n            \r\n        }\r\n    },\r\n    focused: {\r\n        border: `2px solid ${theme.palette.primary.main}`\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        \r\n    },\r\n    searchInput: {\r\n        height: '34px',\r\n        width: '98.5%',\r\n        margin: '3px 0.75%',\r\n        borderRadius: '5px 25px 25px 5px',\r\n        color: 'white',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        '& fieldset': {\r\n            border: '0'\r\n        } \r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        margin: '0 5px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    tag: {\r\n        padding: '5px 10px',\r\n        borderRadius: '50px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    tagLabel: {\r\n        padding: '0 5px'\r\n    },\r\n    removeBtn: {\r\n        padding: '4px',\r\n        color: 'white'\r\n    },\r\n    tagRemove: {\r\n        fontSize: '16px'\r\n    }\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\FilterByMultiSelect.js",["310","311","312","313","314","315","316","317"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport { makeStyles, Grid, ClickAwayListener, FormControl, OutlinedInput, Button, Menu, MenuItem, IconButton } from '@material-ui/core'\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { addQueryParam, specialStringPurge, removeQueryParam } from '../../api/genericApi';\r\nimport { useQuery } from './customHooks/useQuery';\r\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded';\r\nimport clsx from 'clsx';\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\n\r\nexport const FilterByMultiSelect = ({ filterField, placeholder, filterIcon, optionsFunc }) => {\r\n    \r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const { lang } = useContext(LanguageContext);\r\n    const [ menuOptions, setMenuOptions] = useState([]);\r\n    const [ orgMenuOptions, setOrgMenuOptions ] = useState([])\r\n    const [ anchorEl, setAnchorEl ] = useState(null);\r\n    const [ values, setValues ] = useState( query[filterField] || [])\r\n\r\n    useEffect(() => {\r\n        optionsFunc()\r\n        .then(data => {\r\n            setOrgMenuOptions(data);\r\n            if (query[filterField]) {\r\n                data = data.filter(op => query[filterField].indexOf(op.value) === -1 )\r\n            }\r\n            setMenuOptions(data);\r\n            \r\n        }) \r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (values.length) {\r\n            \r\n            history.push({\r\n                path: location.pathname,\r\n                search: addQueryParam(location.search, [{ name: filterField, value: values }])\r\n            });\r\n            return;\r\n        }\r\n        if (query[filterField] && !values.length) {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: removeQueryParam(location.search, filterField)\r\n            });\r\n        }\r\n        \r\n    }, [values])\r\n\r\n    useEffect(() => {\r\n        if(!menuOptions.length) {\r\n            setAnchorEl(null)\r\n        }\r\n    }, [menuOptions])\r\n\r\n    const createTag = (val, key) => {\r\n        let data = orgMenuOptions.find(op => val === op.value);\r\n        if (!data) return;\r\n        return (\r\n            <div className={classes.tag} key={key}>\r\n                <label className={classes.tagLabel}>\r\n                    { data.label }\r\n                </label>\r\n                <IconButton \r\n                    className={classes.removeBtn}\r\n                    onClick={removeChoice(data.value)}\r\n                >\r\n                    <CloseRoundedIcon className={classes.tagRemove}/>\r\n                </IconButton>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const removeChoice = value => event => {\r\n        event.stopPropagation();\r\n        getMenuOptions(value)\r\n        .then(data => {\r\n            setValues(values => values.filter(val => val !== value ));\r\n            if (!menuOptions.length) {\r\n                setAnchorEl(null)\r\n            }\r\n            setMenuOptions(data)\r\n        });  \r\n    }\r\n\r\n    const handleClick = val => event => {\r\n        setValues([...values, val]);\r\n        setMenuOptions(menuOptions => menuOptions.filter( op => op.value !== val));\r\n    }\r\n\r\n    const getMenuOptions = (value) => {\r\n        return new Promise((resolve, reject) => {\r\n            let mop = menuOptions;\r\n            mop.push(orgMenuOptions.find( op => op.value === value));\r\n            resolve(mop);\r\n        }) \r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                Boolean(orgMenuOptions.length) &&\r\n                <div className={classes.select}>\r\n                        <Button \r\n                            className={classes.filterBy}\r\n                            onClick={event => setAnchorEl(event.currentTarget)}\r\n                            startIcon={filterIcon}\r\n                        >\r\n                            { \r\n                                values.length \r\n                                ?   \r\n                                    <div className={classes.selectedContainer}>\r\n                                        {\r\n                                             values.map((val, i ) => createTag(val, i)) \r\n                                        }\r\n                                    </div>\r\n                               \r\n                                :   <label style={{ \r\n                                        padding: '5px 0px 5px 20px', \r\n                                        cursor: 'pointer' \r\n                                    }}>\r\n                                        {placeholder}\r\n                                    </label>\r\n                            }\r\n                        </Button>\r\n                        <Menu\r\n                            anchorEl={anchorEl}\r\n                            open={Boolean(anchorEl)}\r\n                            onClose={() => setAnchorEl(null)}\r\n                            classes={{\r\n                                paper : classes.menu\r\n                            }}\r\n                            keepMounted\r\n                            anchorOrigin={{\r\n                                vertical: 'bottom',\r\n                                horizontal: 'right',\r\n                            }}\r\n                            transformOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'right',\r\n                            }}\r\n                        >\r\n                            {\r\n                                menuOptions.map((v,i) => {\r\n                                    return (\r\n                                        <MenuItem\r\n                                            key={i}\r\n                                            onClick={handleClick(v.value)}\r\n                                            className={classes.menuitem}\r\n                                            style={{ direction: lang.code === 'he' ? 'rtl' : 'ltr'}}\r\n                                        >\r\n                                            {v.label}\r\n                                        </MenuItem>\r\n                                    )\r\n                                    \r\n                                })\r\n                            }\r\n                        </Menu>\r\n               </div>\r\n            }          \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    select: {\r\n        margin: '5px',\r\n        height: 'auto',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        whiteSpace: 'nowrap'\r\n    },\r\n    filterBy: {\r\n        textTransform: 'none',\r\n        color: 'white',\r\n        padding: '0 5px',\r\n        minHeight: '45px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '25px',\r\n        \r\n        '&:hover': {\r\n            boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n        }\r\n    },\r\n    selectedContainer: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        whiteSpace: 'nowrap',\r\n        flexWrap: 'wrap',\r\n        width: 'fit-content',\r\n        maxWidth: '400px'\r\n    },\r\n    menu: {\r\n        marginTop: '55px',\r\n        background: 'rgba(0,0,0,0.5)',\r\n        backdropFilter: 'blur(10px)',\r\n        color: 'white'\r\n    },\r\n    menuitem: {\r\n        minWidth: '200px'\r\n    },\r\n    container: {\r\n        height: '45px',\r\n        border: '1px solid rgba(0,0,0,0.25)',\r\n        borderRadius: '25px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        '&:hover': {\r\n            boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n            \r\n        }\r\n    },\r\n    focused: {\r\n        boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n        background: 'rgba(0,0,0,0.1)',\r\n        backdropFilter: 'blur(40px)'\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        \r\n    },\r\n    searchInput: {\r\n        height: '34px',\r\n        width: '98.5%',\r\n        margin: '3px 0.75%',\r\n        borderRadius: '5px 25px 25px 5px',\r\n        color: 'white',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        '& fieldset': {\r\n            border: '0'\r\n        } \r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        margin: '0 5px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    tag: {\r\n        padding: '5px 10px',\r\n        borderRadius: '50px',\r\n        boxShadow: 'rgba(0,0,0,0.25) 0px 0px 3px 1px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        margin: '3px'\r\n    },\r\n    tagLabel: {\r\n        padding: '0 5px'\r\n    },\r\n    removeBtn: {\r\n        padding: '4px',\r\n        color: 'white'\r\n    },\r\n    tagRemove: {\r\n        fontSize: '16px'\r\n    }\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\LanguageContext.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\i18n.js",["318"],"import i18n from 'i18next';\r\nimport Backend from 'i18next-http-backend';\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\nimport { initReactI18next }from 'react-i18next';\r\nimport en from './lacales/en/translation.json';\r\nimport he from './lacales/he/translation.json';\r\n\r\nconst resources = {\r\n    en: {\r\n        translation: en\r\n    },\r\n    he: {\r\n        translation: he\r\n    }\r\n}\r\n\r\ni18n\r\n    .use(LanguageDetector)\r\n    .use(initReactI18next)\r\n    .init({\r\n        resources,\r\n        fallbackLng: 'he',\r\n        detection: {\r\n            order: ['queryString', 'cookie'],\r\n            cache: ['cookie']\r\n        },\r\n        interpolation: {\r\n            escapeValue: false\r\n        }\r\n    });\r\n\r\nexport default i18n;\r\n    ","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\Systems.js",["319","320","321","322","323","324"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemsControls.js",["325","326"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\SearchBoxSelect.js",["327","328","329","330","331"],"import React, { useState, useEffect, useContext, useRef } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { addQueryParam, removeQueryParam, queryParamsToObject, specialStringPurge} from '../../api/genericApi';\r\nimport { OutlinedInput, FormControl, makeStyles, Grid, ClickAwayListener, IconButton, Menu, MenuItem } from '@material-ui/core'\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded';\r\nimport { useQuery } from './customHooks/useQuery';\r\nimport clsx from 'clsx';\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\n\r\nexport const SearchBoxSelect = ({ placeholder, filterField, suggestionsFunc, reloadedLabel, reloadedValue }) => {\r\n    \r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const cont = useRef();\r\n    const input = useRef();\r\n    const { lang } = useContext(LanguageContext);\r\n    const [ onFocus, setOnFocus ] = useState(false);\r\n    const [ searchText, setSearchText ] = useState('');\r\n    const [ anchorEl, setAnchorEl ] = useState(null);\r\n    const [ menuOptions, setMenuOptions ] = useState([]);\r\n    const [ value, setValue ] = useState(reloadedValue || null);\r\n    \r\n    useEffect(() => {\r\n        if (Boolean(!searchText)) return;\r\n        const timeOutId = setTimeout(() => handleSearch(searchText), 700);\r\n        return () => clearTimeout(timeOutId);\r\n    }, [searchText])\r\n\r\n    useEffect(() => {\r\n        if (value) {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: addQueryParam(location.search, [{ name: filterField, value: value}])\r\n            });\r\n            return;\r\n        } else {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: removeQueryParam(location.search, filterField)\r\n            });\r\n        }\r\n    }, [value])\r\n\r\n    const handleChange = event => {\r\n        setSearchText(event.target.value)\r\n    }\r\n\r\n    const handleSearch = async searchText => {\r\n        if (searchText) {\r\n            const data = await suggestionsFunc(searchText);\r\n            setMenuOptions(data || []);\r\n            setAnchorEl(input.current)\r\n            \r\n\r\n                 \r\n        } else {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: removeQueryParam(location.search, filterField)\r\n            });\r\n        }\r\n        // if (searchText) {\r\n        //     history.push({\r\n        //         path: location.pathname,\r\n        //         search: addQueryParam(location.search, [{ name: 'searchText', value: searchText}])\r\n        //     });\r\n        //     return; \r\n        // }   \r\n    }\r\n    \r\n    const getTag = val => {\r\n        let data = menuOptions.find(op => val === op.value);\r\n        return createTag(data)\r\n    }\r\n\r\n    const createTag = data => {\r\n        if (!data) return;\r\n        return (\r\n            <div className={classes.tag}>\r\n                <label className={classes.tagLabel}>\r\n                    { data.label }\r\n                </label>\r\n                <IconButton \r\n                    className={classes.removeBtn}\r\n                    onClick={removeChoice(data.value)}\r\n                >\r\n                    <CloseRoundedIcon className={classes.tagRemove}/>\r\n                </IconButton>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const removeChoice = value => event => {\r\n        event.stopPropagation();\r\n        setValue(null)\r\n    }\r\n\r\n    const handleClick = val => event => {\r\n        setValue(val);\r\n        setAnchorEl(null)\r\n    }\r\n\r\n    return (\r\n        <ClickAwayListener onClickAway={() => setOnFocus(false)}>\r\n            <div ref={cont} className={clsx(classes.container , onFocus && classes.focused, Boolean(value) && classes.selected)} xs={11} sm={9} md={8} lg={6}>\r\n                <SearchRoundedIcon className={classes.icon}/>\r\n                {\r\n                    value \r\n                    ?   query[filterField] === value\r\n                        ?  createTag(reloadedLabel && reloadedValue ? { label: reloadedLabel, value: reloadedValue} : null)\r\n                        :  getTag(value)\r\n                    :\r\n                    <FormControl variant='outlined' className={classes.form}>\r\n                        <OutlinedInput\r\n                            autoFocus={true}\r\n                            inputRef={input}\r\n                            value={ searchText || '' }\r\n                            onChange={handleChange}\r\n                            placeholder={placeholder}\r\n                            className={clsx(classes.searchInput)}\r\n                            onFocus={() => setOnFocus(true)}\r\n                        />\r\n                    </FormControl>\r\n                }\r\n                {\r\n                    Boolean(menuOptions.length) &&\r\n                    <Menu         \r\n                        anchorEl={anchorEl}\r\n                        open={Boolean(anchorEl)}\r\n                        onClose={() => setAnchorEl(null)}\r\n                        classes={{\r\n                            paper : classes.menu\r\n                        }}\r\n                        keepMounted\r\n                        anchorOrigin={{\r\n                            vertical: 'bottom',\r\n                            horizontal: 'right',\r\n                        }}\r\n                        transformOrigin={{\r\n                            vertical: 'top',\r\n                            horizontal: 'right',\r\n                        }}\r\n                    >\r\n                    {\r\n                        menuOptions.map((v,i) => {\r\n                            return (\r\n                                <MenuItem\r\n                                    key={i}\r\n                                    onClick={handleClick(v.value)}\r\n                                    className={classes.menuitem}\r\n                                    style={{ direction: lang.code === 'he' ? 'rtl' : 'ltr'}}\r\n                                >\r\n                                    {v.label}\r\n                                </MenuItem>\r\n                            )\r\n                            \r\n                        })\r\n                    }\r\n                    </Menu>\r\n                }\r\n            </div>   \r\n        </ClickAwayListener>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        margin: '5px',\r\n        padding: '0 5px',\r\n        maxWidth: '450px',\r\n        height: '43px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '25px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        transition: 'box-shadow 0.2s ease-in',\r\n        '&:hover': {\r\n            boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n            transition: 'box-shadow 0.2s ease-in'\r\n        }\r\n\r\n    },\r\n    focused: {\r\n        boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n        background: 'rgba(0,0,0,0.1)',\r\n        backdropFilter: 'blur(40px)'\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        \r\n    },\r\n    searchInput: {\r\n        height: '34px',\r\n        width: '98.5%',\r\n        margin: '3px 0.75%',\r\n        borderRadius: '5px 25px 25px 5px',\r\n        color: 'white',\r\n        '& input': {\r\n            padding: '12.5px 14px',\r\n        },\r\n        '& fieldset': {\r\n            border: '0'\r\n        } \r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        marginRight: '5px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        \r\n    },\r\n    menu: {\r\n        marginTop: '55px',\r\n        background: 'rgba(0,0,0,0.5)',\r\n        backdropFilter: 'blur(10px)',\r\n        color: 'white'\r\n    },\r\n    menuitem: {\r\n        minWidth: '200px'\r\n    },\r\n    tag: {\r\n        padding: '5px 10px',\r\n        borderRadius: '50px',\r\n        boxShadow: 'rgba(0,0,0,0.25) 0px 0px 3px 1px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        color: 'white'\r\n    },\r\n    tagLabel: {\r\n        padding: '0 5px'\r\n    },\r\n    removeBtn: {\r\n        padding: '4px',\r\n        color: 'white'\r\n    },\r\n    tagRemove: {\r\n        fontSize: '16px'\r\n    },\r\n    selected: {\r\n        width: 'fit-content'\r\n    }\r\n}))\r\n\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\systemsApi.js",["332"],"import axios from 'axios';\r\nimport { getAssets, getFullAddress } from './assetsApi'\r\n\r\nexport const createNewSystem = async (details) => {\r\n    const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/systems/createSystem`, { ...details });\r\n    if (res.data) {\r\n        return res.data;\r\n    }\r\n    return [];\r\n}\r\n\r\nexport const getAssetsSuggestions = async (searchText) => {\r\n    const res = await getAssets();\r\n    let result = [];\r\n    if (!searchText) { \r\n        res.data.forEach(asset => {\r\n            result.push({ \r\n                text: getFullAddress(asset),\r\n                value: asset._id\r\n            })\r\n        });\r\n        return result;\r\n    };\r\n    let filtered =  res.data.filter(asset => {\r\n        return getFullAddress(asset).indexOf(searchText) !== -1\r\n    });\r\n    filtered.forEach(asset => {\r\n        result.push({ \r\n            label: getFullAddress(asset),\r\n            value: asset._id\r\n        })\r\n    });\r\n    return result;\r\n}\r\n\r\nexport const getSystemsByAsset = async (assetId) => {\r\n    \r\n    const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/systems/getSystems`, { assetId });\r\n    if (res.data) {\r\n        return res.data;\r\n    }\r\n    return [];\r\n}\r\n\r\nexport const applyFilters = (filters, systems) => {\r\n    return new Promise((resolve, reject) => {\r\n        if (!filters) resolve(systems);\r\n        if (filters.sortBy) {\r\n            if (filters.sortBy === 'systemName') {\r\n                 systems = systems.sort((a,b) => {\r\n                     \r\n                     return (\r\n                         filters.sortOrder === 'asc' \r\n                         ?   a.name > b.name ? 1 : -1\r\n                         :   a.name < b.name ? 1 : -1\r\n                     )      \r\n                 })\r\n            } else if (filters.sortBy === 'owner') {\r\n                systems = systems.sort((a,b) => {\r\n                    let aName = `${a.owner.firstName} ${a.owner.lastName}`\r\n                    let bName = `${b.owner.firstName} ${b.owner.lastName}`\r\n                    return (\r\n                        filters.sortOrder === 'asc' \r\n                        ?   aName > bName ? 1 : -1\r\n                        :   aName < bName ? 1 : -1\r\n                    )      \r\n                })\r\n            }\r\n\r\n        }\r\n        if(filters.name){\r\n           systems = systems.filter(system => {\r\n               return system.name.indexOf(filters.name) !== -1\r\n           })\r\n        }\r\n        if (filters.owner) {\r\n            systems = systems.filter(system => {\r\n                if (filters.owner instanceof Array) {\r\n                    return filters.owner.indexOf(system.owner._id) !== -1\r\n                }\r\n                return  system.owner._id == filters.owner\r\n            })\r\n        }\r\n        resolve(systems);\r\n    });\r\n   \r\n\r\n}\r\n\r\n\r\nexport const updateSystemOwner = async (systemId, owner) => {\r\n    const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/systems/updateSystemOwner`, { systemId, owner });\r\n    if (res.data) {\r\n        return res.data;\r\n    }\r\n    return [];\r\n}\r\n\r\nexport const updateSystemName = async (systemId, name) => {\r\n    const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/systems/updateSystemName`, { systemId, name });\r\n    if (res.data) {\r\n        return res.data;\r\n    }\r\n    return [];\r\n}\r\n\r\nexport const removeSystemUser = async (systemId, userId) => {\r\n    const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/systems/removeUser`, { systemId, userId });\r\n    if (res.data) {\r\n        return res.data;\r\n    }\r\n    return [];\r\n}\r\n\r\nexport const addUser = async (systemId, userId) => {\r\n    const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/systems/addUser`, { systemId, userId });\r\n    if (res.data) {\r\n        return res.data;\r\n    }\r\n    return null;\r\n}\r\n\r\nexport const updateSystemAdditionalData = async (systemData) => {\r\n    const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/systems/updateSystemData`, { systemData });\r\n    if (res.data) {\r\n        return res.data;\r\n    }\r\n    return null;\r\n}\r\n\r\nexport const createSystemMenuOptions = (systems) => {\r\n    return new Promise((resolve, reject) => {\r\n        let options = [];\r\n        systems.forEach(s => {\r\n            options.push({ text: s.name, value: s._id})\r\n        });\r\n        resolve(options);\r\n    })\r\n}","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\System.js",["333","334"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\UpdateSystemOwner.js",["335","336","337"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { Grid, makeStyles, Paper, FormControl, IconButton, useMediaQuery, Fade, Modal, Backdrop,Select, MenuItem, Button } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport ClearRoundedIcon from '@material-ui/icons/ClearRounded';\r\nimport { LanguageContext } from '../../../context/LanguageContext';\r\nimport { getUserList } from '../../../api/userApi';\r\nimport clsx from 'clsx'\r\n\r\n\r\n\r\nexport const UpdateSystemOwner = ({ handleClose, handleSave, isOpen, currentOwner }) => {\r\n\r\n    const classes = useStyles();\r\n    const { lang } = useContext(LanguageContext);\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const { t, i18n } = useTranslation();\r\n    const [ userList, setUserList ] = useState([]);\r\n    const [ selectedUser, setSelectedUser ] = useState(null)\r\n    \r\n    useEffect(() => {\r\n        getUserList()\r\n        .then(data => {\r\n            setUserList(data.filter(u => u._id !== currentOwner._id ));\r\n        })\r\n    }, [])\r\n\r\n    const handleChange = event => {\r\n        setSelectedUser(event.target.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal\r\n            open={isOpen}\r\n            onClose={handleClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout: 500\r\n            }}\r\n            className={classes.modal}\r\n        >\r\n            <Fade in={isOpen}>\r\n                <Grid container justify='center' alignItems='center' style={{ outline: '0'}}>\r\n                    <Grid item xs={10} sm={7} md={5} lg={3} xl={3}>\r\n                        <Paper \r\n                            className={classes.paper} \r\n                            style={{ direction: lang.dir }}\r\n                            elevation={6}    \r\n                        >\r\n                            <div className={classes.header}>\r\n                                <div className={classes.title}>\r\n                                    {t(\"systemsModule.updateSystemOwnerTitle\")}\r\n                                </div>\r\n                                <IconButton className={classes.closeBtn} onClick={handleClose}>\r\n                                    <ClearRoundedIcon className={classes.icon}/>\r\n                                </IconButton>  \r\n                            </div>\r\n                            <div className={classes.instructions}>\r\n                                {t(\"systemsModule.chooseManagerToUpdate\")}\r\n                            </div>\r\n                            <FormControl variant='outlined' className={classes.textInput} >\r\n                                <Select\r\n                                    value={selectedUser}\r\n                                    onChange={handleChange}\r\n                                    className={classes.menu}\r\n                                    MenuProps={{\r\n                                        classes: {\r\n                                            paper: classes.menupaper,\r\n                                            autoWidth: true\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    {\r\n                                        userList.map( (user, i) => {\r\n                                            return (\r\n                                                <MenuItem\r\n                                                    className={classes.menuitem}\r\n                                                    value={user._id} \r\n                                                    key={i}\r\n                                                    style={{ direction: lang.code === 'he' ? 'rtl' : 'ltr'}}\r\n                                                >\r\n                                                    {`${user.firstName} ${user.lastName}`}\r\n                                                </MenuItem>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Select>\r\n                            </FormControl>\r\n                            <div className={classes.controls}>\r\n                                <Button\r\n                                    className={clsx(classes.control, classes.save)}\r\n                                    onClick={() => handleSave(selectedUser)}\r\n                                    disabled={!selectedUser}\r\n                                >\r\n                                    {t(\"alert.confirm\")}\r\n                                </Button>\r\n                                <Button\r\n                                    className={clsx(classes.control, classes.cancel)}\r\n                                    onClick={handleClose}\r\n                                >\r\n                                    {t(\"alert.cancel\")}\r\n                                </Button>\r\n                            </div>\r\n                        </Paper>\r\n                    </Grid>\r\n                    \r\n                </Grid> \r\n                \r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        background: 'rgba(0,0,0,0.4)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        padding: '10px',\r\n        borderRadius: '10px',\r\n        '&:focus': {\r\n            outline: 'none'\r\n        }\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backdropFilter: 'blur(10px)'   \r\n    },\r\n    header: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center'\r\n    },\r\n    title: {\r\n        color: 'white',\r\n        fontSize: '18px',\r\n        padding: '5px 10px',\r\n        height: 'fit-content'\r\n    },\r\n    closeBtn: {\r\n        fontSize: '20px',\r\n        height: '40px',\r\n        width: '40px'\r\n    },\r\n    icon: {\r\n        color: 'white',\r\n        borderRadius: '25px',\r\n        padding: '5px',\r\n        '&:hover': {\r\n            background: 'rgba(255,255,255,0.2)'\r\n        }\r\n    },\r\n    instructions: {\r\n        width: 'auto',\r\n        color: 'rgba(255,255,255,0.6)',\r\n        fontSize: '12px',\r\n        margin: '0px 10px'\r\n    },\r\n    menu: {\r\n        color: 'white',\r\n        '&:hover': {\r\n            borderColor: 'white'\r\n        }\r\n    },\r\n    menupaper: {\r\n        background: 'rgba(0,0,0,0.3)',\r\n        backdropFilter: 'blur(10px)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        marginTop: '55px',\r\n        marginRight: '7px'\r\n\r\n    },\r\n    menuitem: {\r\n        color: 'white'\r\n    },\r\n    textInput: {\r\n        margin: '20px 5px',\r\n        width: '300px',\r\n        '& input': {\r\n            color: 'white',\r\n            paddingLeft: '20px',\r\n        },\r\n        '& label': {\r\n            color: 'white',\r\n            paddingLeft: '5px' \r\n        },\r\n        '& fieldset': {\r\n            borderColor: 'rgba(255,255,255,0.6)',\r\n            borderRadius: '42px'\r\n        }    \r\n    },\r\n    controls: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    control: {\r\n        width: '30%',\r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        fontSize: '16px',\r\n        margin: '5px',\r\n        padding: '5px 30px',\r\n        borderRadius: '30px',\r\n        color: 'white', \r\n    },\r\n    save: {\r\n        background: 'rgba(0,0,0,0.2)', \r\n        '&:hover': {\r\n            background: 'black'\r\n        },\r\n        '&:disabled': {\r\n            color: 'rgba(255,255,255,0.3)'\r\n        }\r\n    },\r\n    cancel: {\r\n        border: '0px solid grey',\r\n        '&:hover': {\r\n            borderWidth: '1px'\r\n        }\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemName.js",["338","339"],"import React, { useState } from 'react';\r\nimport { makeStyles, useMediaQuery, Button, Fade, OutlinedInput, FormControl, InputLabel, ClickAwayListener, IconButton, } from '@material-ui/core';\r\nimport SaveRoundedIcon from '@material-ui/icons/SaveRounded';\r\nimport ClearRoundedIcon from '@material-ui/icons/ClearRounded';\r\nimport { updateSystemName } from '../../../api/systemsApi'\r\n\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\r\nimport { green, red } from '@material-ui/core/colors';\r\n\r\nexport const SystemName = ({ systemId, editName, setEditName, setSystemName, title }) => {\r\n\r\n    const classes = useStyles();\r\n    const { t, i18n } = useTranslation();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const [ textValue, setTextValue ] = useState(title);\r\n    const [ editNameHover, setEditNameHover ] = useState(false);\r\n\r\n    const handleChange = event => {\r\n        setTextValue(event.target.value);\r\n    };\r\n\r\n    const handleSave = async () => {\r\n         await updateSystemName(systemId, textValue);\r\n         setSystemName(textValue);\r\n         setEditName(false);\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                editName ?\r\n                <ClickAwayListener onClickAway={() => setEditName(false)}>\r\n                    <div className={classes.editContainer}>\r\n                        <FormControl variant='outlined' className={classes.textInput}>\r\n                            <InputLabel htmlFor='olip' shrink>{t(\"systemsModule.systemName\")}</InputLabel>\r\n                            <OutlinedInput\r\n                                autoFocus\r\n                                notched\r\n                                id='olip' \r\n                                value={ textValue }\r\n                                onChange={handleChange}\r\n                                labelWidth={75}\r\n                                className={classes.input} \r\n                            />\r\n                        </FormControl>\r\n                        <IconButton \r\n                            className={classes.save}\r\n                            onClick={handleSave}\r\n                        >\r\n                            <SaveRoundedIcon className={classes.icon}/>\r\n                        </IconButton>\r\n                        <IconButton \r\n                            className={classes.cancel}\r\n                            onClick={() => setEditName(false)}\r\n                        >\r\n                            <ClearRoundedIcon className={classes.icon} />\r\n                        </IconButton>\r\n                       </div> \r\n                </ClickAwayListener>\r\n                \r\n                : \r\n                <Button \r\n                    className={classes.systemName}\r\n                    onMouseEnter={() => setEditNameHover(true)}\r\n                    onMouseLeave={() => setEditNameHover(false)}\r\n                    onClick={() => { setEditNameHover(false); setEditName(true)}}\r\n                >\r\n                    { title }\r\n                    {\r\n                        editNameHover &&\r\n                        <Fade in={true} timeout={700}>\r\n                            <EditRoundedIcon style={{ \r\n                                margin: '0 10px 0 0',\r\n                                fontSize: '16px'\r\n                            }}/>\r\n                        </Fade>\r\n                        \r\n                    }\r\n                </Button>\r\n            }\r\n        </React.Fragment>                    \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    editContainer: {\r\n        height: 'auto',\r\n        margin: 'auto 0',\r\n        width: '100%',\r\n        dispaly: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    systemName: {\r\n        width: 'auto',\r\n        color: 'white',\r\n        margin: 'auto 20px',\r\n        fontSize: '16px',\r\n        whiteSpace: 'wrap',\r\n        borderRadius: '50px',\r\n        padding: '5px 20px',\r\n        textAlign: 'left'\r\n    },\r\n    textInput: {\r\n        width: '65%',\r\n        margin: '15px 5px 15px 10px',\r\n        '& label.Mui-focused': {\r\n            color: 'white',\r\n        },\r\n        '& label': {\r\n            color: 'white'\r\n        },\r\n        '& .MuiOutlinedInput-root': {\r\n            '& fieldset': {\r\n                borderColor: 'white',\r\n            },\r\n            '&:hover fieldset': {\r\n                borderColor: 'rgba(255,255,255,0.7)',\r\n            },\r\n            '&.Mui-focused fieldset': {\r\n                borderColor: 'rgba(255,255,255,0.7)',\r\n              },\r\n        },\r\n        \r\n    },\r\n    input: {\r\n        color: 'white',\r\n        height: '45px',\r\n        borderRadius: '25px',\r\n        padding: '10px',\r\n        '&:focus': {\r\n            border: '2px solid white'\r\n        }\r\n\r\n    },\r\n    icon: {\r\n        color: 'white',\r\n        fontSize: '20px',\r\n        padding: '0px',\r\n        '&hover': {\r\n\r\n        }\r\n    },\r\n    save: {\r\n        background: green[800],\r\n        padding: '8px',\r\n        margin: '18px 5px',\r\n        \r\n    },\r\n    cancel: {\r\n        background: red[800],\r\n        padding: '8px',\r\n        margin: '18px 5px',\r\n       \r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\AddLinkedUser.js",["340","341","342"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { Grid, makeStyles, Paper, FormControl, IconButton, useMediaQuery, Fade, Modal, Backdrop,Select, MenuItem, Button } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport ClearRoundedIcon from '@material-ui/icons/ClearRounded';\r\nimport { LanguageContext } from '../../../context/LanguageContext';\r\nimport { getUserList } from '../../../api/userApi';\r\nimport clsx from 'clsx'\r\n\r\n\r\n\r\nexport const AddLinkedUser = ({ handleClose, handleSave, isOpen, linkedUsers }) => {\r\n\r\n    const classes = useStyles();\r\n    const { lang } = useContext(LanguageContext);\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const { t, i18n } = useTranslation();\r\n    const [ userList, setUserList ] = useState([]);\r\n    const [ selectedUser, setSelectedUser ] = useState(null)\r\n    \r\n    useEffect(() => {\r\n        getUserList()\r\n        .then(data => {\r\n            let ul = linkedUsers.map(l => l._id);\r\n            setUserList(data.filter(u => ul.indexOf(u._id) === -1 ));\r\n        })\r\n    }, [])\r\n\r\n    const handleChange = event => {\r\n        setSelectedUser(event.target.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal\r\n            open={isOpen}\r\n            onClose={handleClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout: 500\r\n            }}\r\n            className={classes.modal}\r\n        >\r\n            <Fade in={isOpen}>\r\n                <Grid container justify='center' alignItems='center' style={{ outline: '0'}}>\r\n                    <Grid item xl={3}>\r\n                        <Paper \r\n                            className={classes.paper} \r\n                            style={{ direction: lang.dir }}\r\n                            elevation={6}    \r\n                        >\r\n                            <div className={classes.header}>\r\n                                <div className={classes.title}>\r\n                                    {t(\"systemsModule.addRelatedUserTitle\")}\r\n                                </div>\r\n                                <IconButton className={classes.closeBtn} onClick={handleClose}>\r\n                                    <ClearRoundedIcon className={classes.icon}/>\r\n                                </IconButton>  \r\n                            </div>\r\n                            <div className={classes.instructions}>\r\n                                {t(\"systemsModule.chooseUserToAdd\")}\r\n                            </div>\r\n                            <FormControl variant='outlined' className={classes.textInput} >\r\n                                <Select\r\n                                    value={selectedUser}\r\n                                    onChange={handleChange}\r\n                                    className={classes.menu}\r\n                                    MenuProps={{\r\n                                        classes: {\r\n                                            paper: classes.menupaper,\r\n                                            autoWidth: true\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    {\r\n                                        userList.map( (user, i) => {\r\n                                            return (\r\n                                                <MenuItem\r\n                                                    className={classes.menuitem}\r\n                                                    value={user._id} \r\n                                                    key={i}\r\n                                                    style={{ direction: lang.code === 'he' ? 'rtl' : 'ltr'}}\r\n                                                >\r\n                                                    {`${user.firstName} ${user.lastName}`}\r\n                                                </MenuItem>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Select>\r\n                            </FormControl>\r\n                            <div className={classes.controls}>\r\n                                <Button\r\n                                    className={clsx(classes.control, classes.save)}\r\n                                    onClick={() => handleSave(selectedUser)}\r\n                                    disabled={!selectedUser}\r\n                                >\r\n                                    {t(\"alert.confirm\")}\r\n                                </Button>\r\n                                <Button\r\n                                    className={clsx(classes.control, classes.cancel)}\r\n                                    onClick={handleClose}\r\n                                >\r\n                                    {t(\"alert.cancel\")}\r\n                                </Button>\r\n                            </div>\r\n                        </Paper>\r\n                    </Grid>\r\n                    \r\n                </Grid> \r\n                \r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        background: 'rgba(0,0,0,0.4)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        padding: '10px',\r\n        borderRadius: '10px',\r\n        '&:focus': {\r\n            outline: 'none'\r\n        }\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backdropFilter: 'blur(10px)'   \r\n    },\r\n    header: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center'\r\n    },\r\n    title: {\r\n        color: 'white',\r\n        fontSize: '18px',\r\n        padding: '5px 10px',\r\n        height: 'fit-content'\r\n    },\r\n    closeBtn: {\r\n        fontSize: '20px',\r\n        height: '40px',\r\n        width: '40px'\r\n    },\r\n    icon: {\r\n        color: 'white',\r\n        borderRadius: '25px',\r\n        padding: '5px',\r\n        '&:hover': {\r\n            background: 'rgba(255,255,255,0.2)'\r\n        }\r\n    },\r\n    instructions: {\r\n        width: 'auto',\r\n        color: 'rgba(255,255,255,0.6)',\r\n        fontSize: '12px',\r\n        margin: '0px 10px'\r\n    },\r\n    menu: {\r\n        color: 'white',\r\n        '&:hover': {\r\n            borderColor: 'white'\r\n        }\r\n    },\r\n    menupaper: {\r\n        background: 'rgba(0,0,0,0.3)',\r\n        backdropFilter: 'blur(10px)',\r\n\r\n    },\r\n    menuitem: {\r\n        color: 'white'\r\n    },\r\n    textInput: {\r\n        margin: '20px 5px',\r\n        width: '300px',\r\n        '& input': {\r\n            color: 'white',\r\n            paddingLeft: '20px',\r\n        },\r\n        '& label': {\r\n            color: 'white',\r\n            paddingLeft: '5px' \r\n        },\r\n        '& fieldset': {\r\n            borderColor: 'rgba(255,255,255,0.6)',\r\n            borderRadius: '42px'\r\n        }    \r\n    },\r\n    controls: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    control: {\r\n        width: '30%',\r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        fontSize: '16px',\r\n        margin: '5px',\r\n        padding: '5px 30px',\r\n        borderRadius: '30px',\r\n        color: 'white', \r\n    },\r\n    save: {\r\n        background: 'rgba(0,0,0,0.2)', \r\n        '&:hover': {\r\n            background: 'black'\r\n        },\r\n        '&:disabled': {\r\n            color: 'rgba(255,255,255,0.3)'\r\n        }\r\n    },\r\n    cancel: {\r\n        border: '0px solid grey',\r\n        '&:hover': {\r\n            borderWidth: '1px'\r\n        }\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemsHeader.js",["343"],"import React from 'react';\r\nimport { Grid, makeStyles, Paper, useMediaQuery } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport const SystemsHeader = () => {\r\n\r\n    const classes = useStyles();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const { t, i18n } = useTranslation();\r\n\r\n    return (\r\n        <Grid item xs={ 12 } sm={7} md={8} lg={11} xl={11}>\r\n            <Paper elevation={9} className={classes.headerPaper}>\r\n                <div className={classes.systemName}>\r\n                    {t(\"systemsModule.systemName\")}\r\n                </div>\r\n                {\r\n                    !downSm &&\r\n                    <div className={classes.actionsContainer}>\r\n                        <div className={classes.iconHeader}>\r\n                            {t(\"systemsModule.moreDetails\")}\r\n                        </div>\r\n                        <div className={classes.iconHeader}>\r\n                            {t(\"systemsModule.tasks\")}\r\n                        </div>\r\n                        <div className={classes.iconHeader}>\r\n                            {t(\"systemsModule.faults\")}\r\n                        </div>\r\n                        <div className={classes.iconHeader}>\r\n                            {t(\"systemsModule.documents\")}\r\n                        </div>\r\n                        <div className={classes.iconHeader}>\r\n                            {t(\"systemsModule.changeManager\")}\r\n                        </div>\r\n                        <div className={classes.iconHeader}>\r\n                            {t(\"systemsModule.users\")}\r\n                        </div>      \r\n                        <div className={classes.ownerHeader}>\r\n                            {t(\"systemsModule.ownerHeader\")}\r\n                        </div>\r\n                    </div>\r\n                } \r\n            </Paper>\r\n        </Grid>                          \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    headerPaper: {\r\n        height: '45px',\r\n        background: 'rgba(0,0,0,0.7)',\r\n        margin: '5px',\r\n        borderRadius: '5px',\r\n        color: 'white',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        fontSize: '12px'\r\n    },\r\n    systemName: {\r\n        margin: 'auto 20px',\r\n        whiteSpace: 'nowrap'\r\n    },\r\n    actionsContainer: {\r\n        display: 'flex',\r\n        fontSize: '12px',\r\n        width: '668px',\r\n        justifyContent: 'flex-end'\r\n \r\n    },\r\n    iconHeader: {\r\n        width: '78px',\r\n        textAlign: 'center',\r\n        margin: 'auto'\r\n    },\r\n    ownerHeader: {\r\n        width: '190px',\r\n        textAlign: 'center',\r\n        margin: 'auto',\r\n        [theme.breakpoints.down('md')]: {\r\n            margin: 'auto 0'\r\n        }\r\n    }\r\n\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemControls.js",["344","345","346","347"],"import React, { useEffect, useState } from 'react';\r\nimport { IconButton, makeStyles, Paper, useMediaQuery, Tooltip, Collapse } from '@material-ui/core';\r\nimport { UserItem } from '../../user/UserItem';\r\nimport PersonRoundedIcon from '@material-ui/icons/PersonRounded';\r\nimport TransferWithinAStationRoundedIcon from '@material-ui/icons/TransferWithinAStationRounded';\r\nimport { useTranslation } from 'react-i18next';\r\nimport WarningRoundedIcon from '@material-ui/icons/WarningRounded';\r\nimport AssignmentRoundedIcon from '@material-ui/icons/AssignmentRounded';\r\nimport DescriptionRoundedIcon from '@material-ui/icons/DescriptionRounded';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\n\r\n\r\nexport const SystemControls = ({ editName, expanded, owner, showLinkedUsersToggle, toggleEditOwner, toggleAdditionalDetails }) => {\r\n\r\n    const classes = useStyles();\r\n    const { t, i18n } = useTranslation();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n\r\n    return (\r\n        <Collapse in={((!downSm && !editName) || expanded)}>\r\n            <div className={classes.actionsContainer}>\r\n                <div className={classes.actions}>\r\n                    <Tooltip title={t(\"systemsModule.moreDetails\")}>\r\n                        <IconButton\r\n                            className={classes.iconBtn}\r\n                            onClick={toggleAdditionalDetails}\r\n                        >\r\n                            <MoreHorizIcon className={classes.userIcon}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title={t(\"systemsModule.showTasks\")}>\r\n                        <IconButton\r\n                            className={classes.iconBtn}\r\n                        >\r\n                            <AssignmentRoundedIcon className={classes.userIcon}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title={t(\"systemsModule.showFaults\")}>\r\n                        <IconButton\r\n                            className={classes.iconBtn}\r\n                        >\r\n                            <WarningRoundedIcon className={classes.userIcon}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title={t(\"systemsModule.showDocuments\")}>\r\n                        <IconButton\r\n                            className={classes.iconBtn}\r\n                        >\r\n                            <DescriptionRoundedIcon className={classes.userIcon}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title={t(\"systemsModule.changeManager\")}>\r\n                        <IconButton\r\n                            className={classes.iconBtn}\r\n                            onClick={toggleEditOwner}\r\n                        >\r\n                            <TransferWithinAStationRoundedIcon className={classes.userIcon}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title={t(\"systemsModule.showUsers\")}>\r\n                        <IconButton\r\n                            className={classes.iconBtn}\r\n                            onClick={showLinkedUsersToggle}\r\n                        >\r\n                            <PersonRoundedIcon className={classes.userIcon}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    \r\n                </div>\r\n                <div className={classes.ownerInfo}>\r\n                    <UserItem \r\n                        user={owner}\r\n                        avatarSize={40}\r\n                        showPhone\r\n                        size={13}\r\n                    />\r\n                </div> \r\n            </div>\r\n        </Collapse>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({ \r\n    actionsContainer: {\r\n        display: 'flex',\r\n        width: 'fit-content',\r\n        padding: '5px',\r\n        margin: 'auto 0',\r\n        justifyContent: 'space-between',\r\n        [theme.breakpoints.down('md')] : {\r\n            flexDirection: 'column-reverse',\r\n            alignItems: 'center',\r\n            margin: 'auto',\r\n        }\r\n    },\r\n    actions: {\r\n        margin: 'auto 10px',\r\n        [theme.breakpoints.down('md')] : {\r\n            background: 'rgba(0,0,0,0.4)',\r\n            borderRadius: '50px',\r\n            margin: '10px 0',\r\n            padding: '5px 10px'\r\n        }\r\n    },\r\n    iconBtn: {\r\n        padding: '0px',\r\n        height: 'fit-content',\r\n        width: 'fit-content',\r\n        margin: '0 20px',\r\n        [theme.breakpoints.down('md')]: {\r\n            margin: '5px 10px'\r\n        }\r\n        \r\n    },\r\n    userIcon: {\r\n        fontSize: '20px',\r\n        color: 'white',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        padding: '8px',\r\n        borderRadius: '50px',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.2)'\r\n        }\r\n        \r\n    },\r\n    ownerInfo: {\r\n        height: 'auto', \r\n        width: '150px',\r\n        padding: '5px 20px 5px 10px',\r\n        display: 'grid',\r\n        placeItems: 'center',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '5px',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.8)'\r\n        },\r\n        [theme.breakpoints.down('md')]: {\r\n            marginTop: '5px',\r\n            borderRadius: '50px',\r\n            width: '170px',\r\n            padding: '5px 20px 5px 5px',\r\n        }\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemLinkedUsers.js",["348","349"],"import React, { useState, } from 'react';\r\nimport { Grid, makeStyles, Collapse, Tooltip, IconButton, useMediaQuery, Fade } from '@material-ui/core';\r\nimport { UserItem } from '../../user/UserItem';\r\nimport { getFullName } from '../../../api/genericApi';\r\nimport ClearRoundedIcon from '@material-ui/icons/ClearRounded';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { AlertDialog } from '../../reuseables/AlertDialoge';\r\nimport { addUser, removeSystemUser } from '../../../api/systemsApi';\r\nimport AddRoundedIcon from '@material-ui/icons/AddRounded';\r\nimport { AddLinkedUser } from './AddLinkedUser';\r\n\r\nexport const SystemLinkedUsers = ({ userList, setData, systemId, isOpen }) => {\r\n\r\n    const classes = useStyles();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const [ linkedUsers, setLinkedUsers ] = useState(userList || []);\r\n    const [ showControls, setShowControls ] = useState(null);\r\n    const [ showAddLinkedUser, setShowAddLinkedUser ] = useState(false);\r\n    const [ alertDialog ,setAlertDialog ] = useState(null)\r\n    const { t, i18n } = useTranslation(); \r\n\r\n    const confirmRemove = linkedUser => event => {\r\n        event.stopPropagation();\r\n        let toRemove = linkedUsers.find(user => user._id === linkedUser._id)\r\n        setAlertDialog({\r\n            text: `${t(\"systemsModule.userRemoveConfirmText\")} ${getFullName(toRemove)}?`,\r\n            title: t(\"systemsModule.userRemoveConfirmTitle\"),\r\n            handleConfirm: async () => { \r\n                const res = await removeSystemUser(systemId, linkedUser._id);\r\n                if (res) {\r\n                    setData(res);\r\n                    setAlertDialog(null);\r\n                    setLinkedUsers([]);\r\n                    setLinkedUsers(res.linkedUsers);\r\n                }  \r\n            },\r\n            handleCancel: () => setAlertDialog(null)\r\n        })\r\n    }\r\n\r\n    const handleAddLinkedUser = () => {\r\n        if (showAddLinkedUser) {\r\n            setShowAddLinkedUser(false);\r\n            return;\r\n        }\r\n        setShowAddLinkedUser(true);\r\n    }\r\n\r\n    const handleAddLinekdUser = async userId => {\r\n        const res = await addUser(systemId, userId);\r\n        if (res) {\r\n            setData(res);\r\n            setLinkedUsers(res.linkedUsers);\r\n            setShowAddLinkedUser(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Collapse in={isOpen} >\r\n            <div className={classes.linkedusers}>\r\n                <Grid container justify='flex-start' className={ classes.container} alignItems='center'>\r\n                    <Grid item xs={12} className={classes.titleContainer}>\r\n                        <div className={classes.title}>\r\n                            {t(\"systemsModule.assignedUsers\")}\r\n                        </div>\r\n                        <IconButton \r\n                            className={classes.addBtn}\r\n                            onClick={handleAddLinkedUser}\r\n                        >\r\n                            <AddRoundedIcon className={classes.icon}/>\r\n                        </IconButton>\r\n                        {\r\n                            showAddLinkedUser &&\r\n                            <AddLinkedUser \r\n                                isOpen={showAddLinkedUser}\r\n                                handleClose={handleAddLinkedUser}\r\n                                linkedUsers={linkedUsers}\r\n                                handleSave={handleAddLinekdUser}\r\n\r\n                            />\r\n                        }\r\n                        \r\n                    </Grid>\r\n                    {\r\n                        linkedUsers.length ? \r\n                        linkedUsers.map((linkedUser, i) => {\r\n                            return (\r\n                                <Grid item xs={12} sm={7} md={6} lg={3} className={classes.gridItem}>\r\n                                    <div \r\n                                        className={classes.userCont}\r\n                                        onMouseEnter={() => setShowControls(i)}\r\n                                        onMouseLeave={() => setShowControls(null)}\r\n                                        key={i}\r\n                                    >\r\n                                        <UserItem \r\n                                            user={linkedUser}\r\n                                            showTitle\r\n                                            showPhone\r\n                                            avatarSize={'50px'}\r\n                                            size={13}\r\n                                        />\r\n                                        <Fade in={showControls === i || downSm}>\r\n                                            <Tooltip title={t(\"systemsModule.removeUser\")}>\r\n                                                <IconButton \r\n                                                    className={classes.removeuser}\r\n                                                    onClick={confirmRemove(linkedUser)}\r\n                                                >\r\n                                                    <ClearRoundedIcon className={classes.icon}/>\r\n                                                </IconButton>\r\n                                            </Tooltip>\r\n                                        </Fade> \r\n                                    </div>\r\n                                </Grid>\r\n                            )\r\n                        }) :\r\n                        <div className={classes.noUsers}>\r\n                            {t(\"systemsModule.noUsersAssigned\")}\r\n                        </div>\r\n\r\n                    }\r\n                    {\r\n                        Boolean(alertDialog) &&\r\n                        <AlertDialog \r\n                            alertDialoge={alertDialog}\r\n                            open={Boolean(alertDialog)}\r\n                        />\r\n                    }    \r\n                </Grid>\r\n            </div>\r\n        </Collapse>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    linkedusers: {\r\n        width: 'auto',\r\n        margin: '10px',\r\n        borderRadius: '25px',\r\n        background: 'rgba(0,0,0,0.1)',\r\n        boxShadow: '0px 0px 5px 2px rgba(0,0,0,0.2)',\r\n    },\r\n    container: {\r\n        width: 'auto',\r\n        padding: '5px',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        borderRadius: '5px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    gridItem: {\r\n        borderRadius: '20px',\r\n        padding: '5px 10px',\r\n        '&:hover':{\r\n            background: 'rgba(0,0,0,0.2)',\r\n            boxShadow: '-0px 0px 5px 2px rgba(0,0,0,0.2)',\r\n            \r\n        }\r\n    },\r\n    titleContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        borderBottom: '1px solid rgba(255,255,255,0.2)',\r\n        margin: '0 10px',\r\n        padding: '5px 5px 10px'\r\n\r\n    },\r\n    addBtn: {\r\n        fontSize: '20px',\r\n        color: 'white',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        padding: '2px',\r\n        borderRadius: '50px',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.2)'\r\n        }\r\n    },\r\n    cell: {\r\n        color: 'white',\r\n        textAlign: 'center'\r\n    },\r\n    userCont: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        padding: '5px 10px',\r\n        position: 'relative'\r\n    },\r\n    removeuser: {\r\n        padding: '4px',\r\n        margin: 'auto 4px',\r\n        height: '50%',\r\n        '&:hover' :{\r\n            background: 'rgba(255,255,255,0.1)'\r\n        }\r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        color: 'white',\r\n        padding: '8px'\r\n    },\r\n    title: {\r\n        color: 'white',\r\n        fontSize: '16px'\r\n    },\r\n    noUsers: {\r\n        margin: '10px',\r\n        padding: '0px 0 15px',\r\n        color: 'white',\r\n        fontSize: '14px',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        padding: '10px 20px',\r\n        borderRadius: '25px'\r\n    }\r\n    \r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\Faults.js",["350","351","352","353","354","355","356","357"],"import React, { useEffect, useState } from 'react';\r\nimport { makeStyles, Grid, LinearProgress, useMediaQuery } from '@material-ui/core';\r\nimport { Route, useHistory, useLocation, useRouteMatch, Switch } from 'react-router';\r\nimport { useQuery } from '../../reuseables/customHooks/useQuery';\r\nimport { FaultViews } from './FaultViews'\r\nimport { FaultView } from './FaultView';\r\n\r\n\r\n\r\nexport const Faults = () => {\r\n\r\n\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const classes = useStyles();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('sm'));\r\n\r\n\r\n    const { path, url } = useRouteMatch();\r\n\r\n\r\n    return (\r\n        <Grid container justify='center'>\r\n            <Switch>\r\n                <Route exact path={path}>\r\n                    <FaultViews />        \r\n                </Route>\r\n                <Route path={`${path}/:faultId`}>\r\n                    <FaultView />\r\n                </Route>\r\n            </Switch>\r\n        </Grid>\r\n        \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultsControls.js",["358","359","360","361"],"import React, { useState, useEffect} from 'react';\r\nimport { makeStyles, Grid, useMediaQuery, Collapse, Button, ButtonGroup } from '@material-ui/core';\r\nimport { SearchBoxSelect } from '../../reuseables/SearchBoxSelect';\r\nimport { SearchBox } from '../../reuseables/SearchBox';\r\nimport { FilterBySelect } from '../../reuseables/FilterBySelect';\r\nimport PersonRoundedIcon from '@material-ui/icons/PersonRounded';\r\nimport { SortBy } from '../../reuseables/SortBy';\r\nimport { getAssetsSuggestions } from '../../../api/systemsApi';\r\nimport { createUserOptions } from '../../../api/userApi';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { FilterByMultiSelect } from '../../reuseables/FilterByMultiSelect';\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport { useQuery } from '../../reuseables/customHooks/useQuery';\r\nimport { getFullAddress, getAsset } from '../../../api/assetsApi';\r\nimport { getSystemsByAssetOptions, getFaultsStatusListSuggestions } from '../../../api/faultsApi';\r\nimport DonutSmallIcon from '@material-ui/icons/DonutSmall';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport ExpandMoreRoundedIcon from '@material-ui/icons/ExpandMoreRounded';\r\nimport { ClearRounded } from '@material-ui/icons';\r\nimport ViewListRoundedIcon from '@material-ui/icons/ViewListRounded';\r\nimport ViewWeekRoundedIcon from '@material-ui/icons/ViewWeekRounded';\r\nimport clsx from 'clsx'\r\nimport { removeQueryParam } from '../../../api/genericApi';\r\n\r\nconst sortOptions = [\r\n    {\r\n        text: 'מס\"ד תקלה',\r\n        field: 'faultIdentifier'\r\n    },\r\n    {\r\n        text: 'נכס',\r\n        field: 'asset'\r\n    },\r\n    {\r\n        text: 'סטטוס תקלה',\r\n        field: 'faultStatus'\r\n    },\r\n    {\r\n        text: 'ממונה על תקלה',\r\n        field: 'owner'\r\n    }\r\n    \r\n    \r\n]\r\n\r\n\r\nexport const FaultsControls = ({ viewType, setViewType }) => {\r\n\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const classes = useStyles();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const { t, i18n } = useTranslation();\r\n    const [ reloadedValue, setReloadedValue ] = useState(null);\r\n    const [ collapsed, setCollapsed ] = useState(!downSm ? true : false);\r\n\r\n    useEffect(() => {\r\n        if (query.asset) {\r\n            handleReloaded(query.asset)\r\n            .then(data => {\r\n                if (data) {\r\n                    setReloadedValue(data);\r\n                } \r\n            })\r\n        } else {\r\n            setReloadedValue({\r\n                label: '',\r\n                value: null\r\n            });\r\n            history.push({\r\n                path: location.pathname,\r\n                search: removeQueryParam(location.search, 'system')\r\n            });       \r\n        }\r\n    }, [location.search])\r\n\r\n    const handleReloaded = async (assetId) => {\r\n        const res = await getAsset(assetId);\r\n        if (res) {\r\n            return {\r\n                label: getFullAddress(res.data),\r\n                value: res.data._id\r\n            }\r\n        }   \r\n    }\r\n\r\n    const toggleCollapse = () => {\r\n        if (collapsed) {\r\n            setCollapsed(false);\r\n            return;\r\n        }\r\n        setCollapsed(true)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                downSm &&\r\n                <Grid container justify='center'>\r\n                    <Grid item xs={12} className={classes.gridItem}>\r\n                        <Button\r\n                        className={classes.sortandfilter}\r\n                        startIcon={<FilterListIcon className={classes.icon} />}\r\n                        endIcon={collapsed ? <ClearRounded /> : <ExpandMoreRoundedIcon />}\r\n                        onClick={toggleCollapse}\r\n                    >\r\n                        {t(`faultsModule.${ collapsed ? 'hide' : 'show'}Filters`)}\r\n                    </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                    \r\n            }\r\n            <Collapse in={collapsed}>\r\n                <Grid container justify='center'>  \r\n                    <Grid item xs={12} className={classes.gridItem}>\r\n                        {\r\n                            reloadedValue &&\r\n                            <SearchBoxSelect\r\n                                suggestionsFunc={getAssetsSuggestions}\r\n                                placeholder={t(\"systemsModule.filterByAsset\")}\r\n                                filterField={'asset'}\r\n                                reloadedLabel={reloadedValue.label}\r\n                                reloadedValue={reloadedValue.value}\r\n                            />\r\n                        }                 \r\n                            {\r\n                                query.asset &&\r\n                                <FilterByMultiSelect \r\n                                optionsFunc={() => getSystemsByAssetOptions(query.asset)}\r\n                                placeholder={t(\"systemsModule.filterBySystemName\")}\r\n                                filterIcon={<DonutSmallIcon className={classes.icon} />}\r\n                                filterField={'system'}\r\n                            />\r\n                            } \r\n                            {\r\n                            viewType === 'list' &&\r\n                                <FilterByMultiSelect \r\n                                    optionsFunc={getFaultsStatusListSuggestions}\r\n                                    placeholder={t(\"faultsModule.filterByStatus\")}\r\n                                    filterIcon={<DonutSmallIcon className={classes.icon} />}\r\n                                    filterField={'status'}\r\n\r\n                                />\r\n                            }\r\n                    </Grid>\r\n                    \r\n                    <Grid item xs={12}className={classes.gridItem}>\r\n                        <FilterByMultiSelect \r\n                            optionsFunc={createUserOptions}\r\n                            placeholder={t(\"faultsModule.filterByFaultOwner\")}\r\n                            filterIcon={<PersonRoundedIcon className={classes.icon }/>}\r\n                            filterField={'owner'}\r\n                        />\r\n                        <SortBy menuOptions={sortOptions}/>\r\n                        <ButtonGroup\r\n                            className={classes.typeGroup}\r\n                        >\r\n                            <Button\r\n                                className={clsx(classes.modeBtn, classes.listBtn, viewType === 'list' ? classes.modeBtnActive : null)}\r\n                                startIcon={<ViewListRoundedIcon className={classes.icon}/>}\r\n                                onClick={() => setViewType('list')}\r\n                            >\r\n                                {t(\"faultsModule.listMode\")}\r\n                            </Button>\r\n                            <Button\r\n                                className={clsx(classes.modeBtn, classes.blocksBtn, viewType === 'blocks' ? classes.modeBtnActive : null)}\r\n                                startIcon={<ViewWeekRoundedIcon className={classes.icon} />}\r\n                                onClick={() => setViewType('blocks')}\r\n                            >\r\n                                {t(\"faultsModule.blocksMode\")}\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </Grid>   \r\n                </Grid>\r\n            </Collapse>\r\n        </React.Fragment>\r\n        \r\n         \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(them => ({\r\n    gridItem: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'flex-start',\r\n        flexWrap: 'wrap'\r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        marginLeft: '4px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    sortandfilter: {\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        background: 'rgba(0,0,0,0.7)',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '5px 25px 5px 3px',\r\n        whiteSpace: 'nowrap',\r\n        '&:hover': {\r\n            background: 'black'\r\n        }\r\n    },\r\n    typeGroup: {\r\n        margin: '5px',\r\n        height: '45px'\r\n\r\n    },\r\n    modeBtn: {   \r\n        padding: '0 15px 0 5px',\r\n        color: 'white',\r\n        width: 'auto',\r\n        whiteSpace: 'nowrap',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    listBtn: {\r\n        borderRadius: '25px 0 0 25px',\r\n    },\r\n    blocksBtn: {\r\n        borderRadius: '0px 25px 25px 0px',\r\n    },\r\n    modeBtnActive: {\r\n        background: 'rgba(0,0,0,0.6)'\r\n    }\r\n\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\faultsApi.js",["362","363"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultListView.js",["364","365","366"],"import React, { useState } from 'react';\r\nimport { makeStyles, Grid, useMediaQuery, List, ListItem } from '@material-ui/core';\r\nimport { FaultMinified } from './FaultMinified';\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport { useQuery } from '../../reuseables/customHooks/useQuery';\r\nimport { addQueryParam } from '../../../api/genericApi';\r\nimport { FaultView } from './FaultView';\r\n\r\nexport const FaultListView = ({ faults }) => {\r\n    \r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const classes = useStyles();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('sm'));\r\n    const [ faultView, setFaultView ] = useState(null)\r\n\r\n\r\n    return (\r\n        <Grid container className={classes.main} justify='flex-start'>\r\n            <Grid item xs={12} md={5} lg={3} xl={3} className={classes.faultList}>\r\n                <List className={classes.list}>\r\n                {\r\n                    faults.map((f,i) => \r\n                        <ListItem \r\n                            button \r\n                            className={classes.item}\r\n                            onClick={() => setFaultView(f)}\r\n                        >  \r\n                            <FaultMinified \r\n                                data={f}\r\n                                key={i}\r\n                            />\r\n                        </ListItem>\r\n                        \r\n                    )\r\n                }\r\n                </List>\r\n            </Grid>\r\n            {\r\n                !downSm &&\r\n                Boolean(faultView) &&\r\n                <Grid item md={7} lg={9} xl={9} className={classes.faultPresenter}>\r\n                    <FaultView fid={faultView.faultId}/>\r\n                </Grid>\r\n            }\r\n            \r\n        </Grid>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    main: {\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        height: '100%',\r\n        [theme.breakpoints.down('sm')]: {\r\n            border: '0',\r\n        }\r\n    },\r\n    faultList: {\r\n        borderRight: '1px solid rgba(255,255,255,0.2)',\r\n        height: '100%',\r\n        overflowY: 'scroll',\r\n        '&::-webkit-scrollbar': {\r\n            display: 'none'\r\n        },\r\n        [theme.breakpoints.down('sm')]: {\r\n            border: '0',\r\n            overflowY: 'unset',\r\n        }\r\n    },\r\n    list: {\r\n        background: 'rgba(0,0,0,0.3)',\r\n        padding: 0,\r\n        overflowY: 'unset'\r\n    },\r\n    item: {\r\n        height:'200px',\r\n        borderBottom: '1px solid rgba(255,255,255,0.2)',\r\n        [theme.breakpoints.down('sm')]: {\r\n            margin: '10px 0'\r\n        }\r\n    },\r\n    faultPresenter: {\r\n        background: 'rgba(0,0,0,0.1)',\r\n        height: '100%'\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultMinified.js",["367","368","369","370","371"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\StatusTag.js",["372","373"],"\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport CheckCircleOutlineRoundedIcon from '@material-ui/icons/CheckCircleOutlineRounded';\r\nimport HourglassEmptyRoundedIcon from '@material-ui/icons/HourglassEmptyRounded';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\r\nimport clsx from 'clsx';\r\nimport { green, red, yellow } from '@material-ui/core/colors';\r\n\r\nexport const StatusTag = ({status, type}) => {\r\n\r\n    const classes = useStyles();\r\n    const { t, i18n } = useTranslation();\r\n    return (\r\n        <div \r\n            className={clsx(classes.statusTag,\r\n                status.statusId  === 'ready' ? \r\n                classes.ready :\r\n                status.statusId  === 'inProgress' ? \r\n                classes.inProgress :\r\n                status.statusId  === 'Pending' ?\r\n                classes.Pending :\r\n                status.statusId  === 'Close' ?\r\n                classes.Close : null\r\n            )}>\r\n            {\r\n                status.statusId  === 'ready' ? \r\n                <PlayCircleOutlineIcon className={classes.icon}/> :\r\n                status.statusId  === 'inProgress' ? \r\n                <CachedIcon className={classes.icon} /> :\r\n                status.statusId  === 'Pending' ?\r\n                <HourglassEmptyRoundedIcon className={classes.icon}className={classes.icon} /> : \r\n                status.statusId  === 'Close' ?\r\n                <CheckCircleOutlineRoundedIcon className={classes.icon} /> : null\r\n            }\r\n            <div className={classes.title}>\r\n                { t(`faultsModule.statuses.${status.statusId}`)}\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    statusTag: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        width: 'fit-content',\r\n        padding: '0 5px',\r\n        borderRadius: '5px',\r\n        fontSize: '14px',\r\n        whiteSpace: 'nowrap'\r\n\r\n    },\r\n    title: {\r\n        padding: '7px 10px 7px 0px'\r\n    },\r\n    ready: {\r\n        background: 'rgba(255,255,255,0.4)',\r\n        color: 'black'\r\n    },\r\n    inProgress: {\r\n        background: yellow[500],\r\n        color: 'black',\r\n        \r\n    },\r\n    Pending: {\r\n        background: red[600]\r\n    },\r\n    Close: {\r\n        background: green[800]\r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        padding: '0 5px'\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultLink.js",["374"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nexport const FaultLink = ({ faultId, size }) => {\r\n\r\n    return (\r\n        <Link\r\n            to={`/workspace/faults/${faultId}`}\r\n            style={{ textDecoration: 'none' }}\r\n        >\r\n           <span style={{\r\n               color: 'white',\r\n               fontSize: `${size}px`\r\n           }}>\r\n             {faultId}\r\n           </span>\r\n        </Link>\r\n    )\r\n}","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultView.js",["375","376","377","378","379","380","381","382","383","384","385","386","387"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\Carousel.js",["388","389","390","391","392"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultViewControls.js",["393","394"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\UserList.js",["395","396","397","398"],"import React, { useState } from 'react';\r\nimport { makeStyles, useMediaQuery, List, ListItem, IconButton, Tooltip } from '@material-ui/core';\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport AddRoundedIcon from '@material-ui/icons/AddRounded';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { UserItem } from '../user/UserItem';\r\nimport { ClearRounded } from '@material-ui/icons';\r\n\r\n\r\n\r\nexport const UserList = ({ users, handleRemove, removeTooltip, handleAdd, addTooltip, title, placeholder, width }) => {\r\n    \r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const classes = useStyles();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const [ userList, setUserList ] = useState(users || []);\r\n    const [ liHover, setLiHover ] = useState(null)\r\n\r\n    const toggleHover = index => event => {\r\n        event.stopPropagation();\r\n        setLiHover(index);\r\n    }\r\n    return (\r\n           \r\n        <div className={classes.linked} style={{ minWidth: `200px`, width: '100%'}}>\r\n            <div className={classes.topRow}>\r\n                <div className={classes.linkedHeader}>\r\n                    {title}\r\n                </div>\r\n                <Tooltip title={addTooltip}>\r\n                    <IconButton \r\n                        className={classes.addUser}\r\n                        onClick={handleAdd}\r\n                    >\r\n                        <AddRoundedIcon className={classes.icon}/>\r\n                    </IconButton>\r\n                </Tooltip>\r\n                \r\n            </div>\r\n            \r\n            <List className={classes.followingList}>\r\n                {\r\n                    Boolean(userList.length) ?\r\n                        userList.map((user, i) => \r\n                        <ListItem \r\n                            key={i} \r\n                            className={classes.listItem}\r\n                            onMouseEnter={toggleHover(i)}\r\n                            onMouseLeave={() => setLiHover(null)}\r\n                        >\r\n                            <UserItem \r\n                                user={user} \r\n                                avatarSize={40}\r\n                                size={11}\r\n                                showTitle\r\n                                showPhone\r\n                            />\r\n                            {\r\n                                (liHover === i || downSm )&&\r\n                                <Tooltip title={removeTooltip}>\r\n                                    <IconButton \r\n                                        className={classes.removeUser}\r\n                                        onClick={handleRemove(user._id)}\r\n                                    >\r\n                                        <ClearRounded className={classes.icon}/>\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            }\r\n                            \r\n                        </ListItem>\r\n                    )\r\n                    : \r\n                    <ListItem className={classes.placeholder}>\r\n                        {placeholder}\r\n                    </ListItem>\r\n                }\r\n            </List>\r\n\r\n        </div>\r\n            \r\n\r\n        \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\r\n    linked: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'flex-start',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        margin: '10px 0',\r\n        borderRadius: '10px',\r\n        padding: '10px 0',\r\n        height: '300px'\r\n       \r\n    },\r\n    topRow: {\r\n        margin: '0px auto',\r\n        width: '90%',\r\n        borderBottom: '1px solid rgba(255,255,255,0.2)',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center'\r\n    },\r\n    linkedHeader: {\r\n        color: 'white',\r\n        fontSize: '16px',\r\n        padding: '5px',\r\n    },\r\n    followingList: {\r\n        padding: '5px 0',\r\n        overflowY: 'auto',\r\n        \r\n    },\r\n    listItem: {\r\n        width: '100%',\r\n        borderRadius: '5px',\r\n        padding: '8px',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.4)',\r\n        }\r\n    },\r\n    removeUser: {\r\n        color: 'white',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.3)'\r\n        }\r\n    },\r\n    addUser: {\r\n        color: 'white',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        padding: '5px',\r\n        margin: '0 0 10px 0'\r\n    },\r\n    icon: {\r\n        fontSize: '20px'\r\n    },\r\n    placeholder: {\r\n        background: 'rgba(0,0,0,0.4)',\r\n        borderRadius: '25px',\r\n        color: 'white',\r\n        padding: '10px 20px',\r\n        width: '90%',\r\n        margin: '10px auto'\r\n    }\r\n    \r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\CommentSection.js",["399","400","401","402","403","404","405","406","407"],"import React, { useContext, useState } from 'react';\r\nimport { makeStyles, useMediaQuery, Avatar, FormControl, OutlinedInput, Grid, ClickAwayListener, IconButton, Button } from '@material-ui/core';\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport AddRoundedIcon from '@material-ui/icons/AddRounded';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { UserItem } from '../user/UserItem';\r\nimport { ClearRounded } from '@material-ui/icons';\r\nimport SendRoundedIcon from '@material-ui/icons/SendRounded';\r\nimport clsx from 'clsx'\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\nimport { AuthContext } from '../../context/AuthContext';\r\nimport { getDatediffString } from '../../api/genericApi';\r\n\r\n\r\n\r\nexport const CommentSection = ({ comments, avatar, saveComment }) => {\r\n    \r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const classes = useStyles();\r\n    const { t, i18n }= useTranslation();\r\n    const { lang } = useContext(LanguageContext);\r\n    const { auth } = useContext(AuthContext);\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const [ commentList, setCommentList ] = useState(comments || []);\r\n    const [ text, setText ] = useState('');\r\n    const [ textFocused, setTextFocused ] = useState(false)\r\n\r\n    const handleChange = event => {\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const handleSendComment = event => {\r\n        event.stopPropagation();\r\n        saveComment(text)\r\n        .then(data => {\r\n            \r\n        })\r\n        .finally(() => {\r\n            setText('');\r\n            setTextFocused(false);\r\n        })\r\n        \r\n    }\r\n\r\n\r\n    return (\r\n        <Grid container >\r\n            <Grid item xs={12} >\r\n                <div className={classes.title}>\r\n                    {t(\"comments.title\")}\r\n                </div>\r\n            </Grid>\r\n            {\r\n                commentList.map((c,i) => \r\n                    <Grid item xs={10} className={clsx(classes.comment)} key={i}>\r\n                        <div className={classes.commentContainer}>\r\n                            <Avatar className={classes.avatar} alt={'abc'} src={c.user.avatar} style={{ height: '50px', width: '50px' }}/>\r\n                            <div className={classes.data}>\r\n                                <div className={classes.commenter}>\r\n                                    {`${c.user.firstName} ${c.user.lastName}`}\r\n                                </div>\r\n                                <div className={classes.commentText}>\r\n                                    {`${c.text}`}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className={classes.commentFooter}>\r\n                            <div className={classes.footerField}> \r\n                                <Button className={classes.footerBtn}> \r\n                                    {t(\"comments.reply\")}\r\n                                </Button>\r\n                            </div>\r\n                            {\r\n                                c.user._id == auth.user._id &&\r\n                                <div className={classes.footerField}>\r\n                                    {` · `}\r\n                                    <Button className={classes.footerBtn}>\r\n                                        {t(\"comments.edit\")}\r\n                                    </Button>\r\n                                </div>\r\n                                 \r\n                            }\r\n                            <div className={classes.footerField}>\r\n                            {` · `}\r\n                            <div className={ classes.timePassed}>\r\n                                {`${getDatediffString(c.createdAt)}`}    \r\n                            </div>\r\n                            \r\n                            </div>\r\n                                      \r\n                        </div>\r\n                    </Grid>\r\n                )\r\n                \r\n            }\r\n            \r\n            <ClickAwayListener onClickAway={() => setTextFocused(false)}> \r\n                <Grid item xs={12} sm={12} md={8} lg={6} xl={6} className={classes.addComment}>\r\n                    <FormControl variant='outlined' className={classes.form}>\r\n                        <OutlinedInput\r\n                            value={ text || '' }\r\n                            onChange={handleChange}\r\n                            placeholder={t(\"comments.add\")}\r\n                            className={clsx(classes.textInput, textFocused ? classes.focused : null)}\r\n                            onFocus={() => setTextFocused(true)}\r\n                            multiline\r\n                            classes={{\r\n                                inputMultiline: classes.multiLine\r\n                            }}\r\n                        />\r\n                        \r\n                    </FormControl>\r\n                    <IconButton \r\n                        className={classes.postBtn}\r\n                        onClick={handleSendComment}\r\n                    >\r\n                        <SendRoundedIcon className={clsx(classes.icon, lang.dir === 'rtl' ? classes.mirror : null)}/>\r\n                    </IconButton> \r\n                </Grid>\r\n            </ClickAwayListener>\r\n        </Grid>\r\n    \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    title: {\r\n        color: 'white',\r\n        fontSize: '20px',\r\n        padding: '20px 30px 10px',\r\n        marginBottom: '10px',\r\n        borderBottom: '1px solid rgba(255,255,255,0.2)'\r\n    },\r\n    addComment: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: '10px',\r\n        width: 'fit-content'\r\n    },\r\n    avatar: {\r\n        margin: '0 10px'\r\n    },\r\n    form: {\r\n        color: 'white',\r\n        width: '100%'\r\n\r\n    },\r\n    textInput: {\r\n        \r\n        borderRadius: '42px',\r\n        '& input': {\r\n            color: 'white',\r\n            width: '80%'\r\n        },\r\n        '& label': {\r\n            color: 'white',\r\n            paddingLeft: '5px' \r\n        },\r\n        '& fieldset': {\r\n            borderColor: 'rgba(255,255,255,0.6)',\r\n            borderRadius: '42px'\r\n        },\r\n           \r\n    },\r\n    focused: {\r\n        boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n        background: 'rgba(0,0,0,0.4)'\r\n    },\r\n    postBtn: {\r\n        color: 'white',\r\n        padding: '7px',\r\n        left: '-40px',\r\n        marginBottom: '1px',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.4)',\r\n        }\r\n    },\r\n    icon: {\r\n        fontSize: '20px'\r\n    },\r\n    mirror: {\r\n        transform: 'scaleX(-1)'\r\n    },\r\n    comment: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        margin: '5px 0'\r\n    },\r\n    commentContainer: {\r\n        width: 'fit-content',\r\n        display: 'flex',\r\n        padding: '10px 30px 10px 0px',\r\n        margin: '0px 10px',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        borderRadius: '50px',\r\n        \r\n    },\r\n    commenter: {\r\n        color: 'rgba(255,255,255,0.6)',\r\n        fontSize: '13px',\r\n        padding: '5px'\r\n    },\r\n    commentText: {\r\n        color: 'white'\r\n    },\r\n    commentFooter: {\r\n        display: 'flex',\r\n        marginLeft: '40px',\r\n        height: '20px'\r\n    },\r\n    footerField: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        fontSize: '11px',\r\n        color: 'rgba(255,255,255,0.4)',\r\n    },\r\n    footerBtn: {\r\n        fontSize: '12px',\r\n        padding: '1px 2px',\r\n        margin: '0px 2px',\r\n        minWidth: '0',\r\n        width: 'fit-content',\r\n        color: 'rgba(255,255,255,0.4)',\r\n        borderRadius: '50px',\r\n        '&:hover': {\r\n            color: 'white',\r\n            textDecoration: 'underline',\r\n            boxShadow: 'none',\r\n            background: 'transparent'\r\n        }\r\n    },\r\n    timePassed: {\r\n        fontSize: '12px',\r\n        padding: '0px 2px',\r\n        margin: '0 2px',\r\n        minWidth: '0',\r\n        width: 'fit-content',\r\n        color: 'rgba(255,255,255,0.4)',\r\n    },\r\n    multiLine: {\r\n        padding: '0px 20px'\r\n    }\r\n\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultViews.js",["408","409","410","411","412"],"import React, { useEffect, useState } from 'react';\r\nimport { makeStyles, Grid, LinearProgress, useMediaQuery } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next'\r\nimport { FaultsControls } from './FaultsControls';\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport { useQuery } from '../../reuseables/customHooks/useQuery';\r\nimport { addQueryParam, removeQueryParam } from '../../../api/genericApi';\r\nimport { FaultListView } from './FaultListView';\r\nimport { getFaults, getFaultsQueryParams, getMinifiedFaults } from '../../../api/faultsApi';\r\n\r\nexport const FaultViews = () => {\r\n\r\n\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const classes = useStyles();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('sm'));\r\n    const { t, i18n } = useTranslation();\r\n    const [ viewType, setViewType ] = useState(query['viewType'] || 'list');\r\n    const [ isLoading, setIsLoading ] = useState(true);\r\n    const [ faults, setFaults ] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (!isLoading) return;\r\n        getMinifiedFaults(query)\r\n        .then(data => {\r\n            if (data) {\r\n                console.log(data)\r\n                setFaults(data)\r\n            }\r\n        })\r\n        .finally(() => {\r\n            setIsLoading(false)\r\n        })\r\n    }, [isLoading])\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true)\r\n    }, [location.search])\r\n\r\n    useEffect(() => {\r\n        if (viewType === 'blocks') {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: removeQueryParam(location.search, 'status')\r\n            });\r\n        }\r\n        history.push({\r\n            path: location.pathname,\r\n            search: addQueryParam(location.search, [{ name: 'viewType', value: viewType}] )\r\n        });      \r\n    }, [viewType])\r\n \r\n    return (\r\n        <Grid container justify={ 'center'} >\r\n            <div className={classes.pageModule}>\r\n                    {t(\"assetsModule.faults\")}\r\n            </div>\r\n            <Grid item xs={12}>\r\n                <FaultsControls \r\n                    viewType={viewType}\r\n                    setViewType={setViewType}    \r\n                />\r\n            </Grid>\r\n            {\r\n                isLoading ?\r\n                <LinearProgress />\r\n                :\r\n                <Grid item xs={12} \r\n                    className={classes.faultPresent}\r\n                    style={{ height: downSm ? 'auto' : '700px'}}\r\n                >\r\n                    <FaultListView \r\n                        faults={faults}\r\n                    />\r\n                </Grid>\r\n            }\r\n            \r\n        </Grid>\r\n        \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    pageModule: {\r\n        color: 'white',\r\n        padding: '10px 40px',\r\n        fontSize: '18px',\r\n        background: 'rgba(0,0,0,0.6)',\r\n        margin: '0px auto 5px',\r\n        width: '30%',\r\n        textAlign: 'center',\r\n        borderRadius: '0 0 25px 25px',\r\n        lineHeight: '1'\r\n    },\r\n    faultPresent: {\r\n        margin: '20px 10px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            margin: '20px 0',\r\n        }\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\CreateContainer.js",["413","414","415","416","417","418"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemAdditionalDetails.js",["419","420","421","422"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { Grid, makeStyles, Collapse, Tooltip, IconButton, useMediaQuery, LinearProgress } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { format } from 'date-fns'\r\nimport { LanguageContext } from '../../../context/LanguageContext';\r\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\r\nimport { UpsertSystem } from './UpsertSystem';\r\n\r\nexport const SystemAdditionalDetails = ({ data, isOpen, systemId, toggleEdit }) => {\r\n\r\n    const classes = useStyles();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const { lang } = useContext(LanguageContext);\r\n    const [ systemData, setSystemData ] = useState(null);\r\n    const { t, i18n } = useTranslation(); \r\n    const [ isLoading, setIsLoading ] = useState(true)\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        setSystemData(data);\r\n        setIsLoading(false);\r\n    }, [data])\r\n\r\n    return (\r\n      \r\n            isLoading ?\r\n            <LinearProgress />\r\n            :\r\n            <Collapse in={isOpen} >\r\n                <div className={classes.container}>\r\n                    <Grid container justify={'center'} className={classes.grid} spacing={2}>\r\n                        <Grid container className={classes.gridItem}>\r\n                            <Grid item xs={12} className={classes.headerRow}>\r\n                                <div className={classes.title}>\r\n                                    {t(\"systemsModule.additionalDetails\")}\r\n                                </div>\r\n                                <IconButton \r\n                                    className={classes.iconBtn}\r\n                                    onClick={toggleEdit}\r\n                                >\r\n                                    <EditRoundedIcon className={classes.icon}/>\r\n                                </IconButton>\r\n                            </Grid>\r\n                            <Grid item md={6} lg={3} xl={4} className={classes.fieldContainer}>\r\n                                <div className={classes.label}>\r\n                                    {t(\"systemsModule.location\")}\r\n                                </div>\r\n                                <div className={classes.fieldData}>\r\n                                    {systemData.general.location || t(\"general.noData\")}\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={12} md={6} lg={3} xl={4} className={classes.fieldContainer}>\r\n                                <div className={classes.label}>\r\n                                    {t(\"systemsModule.manufacturingYear\")}\r\n                                </div>\r\n                                <div className={classes.fieldData}>\r\n                                    {systemData.general.manufacturingYear || t(\"general.noData\")}\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={12} md={6} lg={3} xl={4} className={classes.fieldContainer}>\r\n                                <div className={classes.label}>\r\n                                    {t(\"systemsModule.SID\")}\r\n                                </div>\r\n                                <div className={classes.fieldData}>\r\n                                    {systemData.general.SID || t(\"general.noData\")}\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={12} md={6} lg={3} xl={4} className={classes.fieldContainer}>\r\n                                <div className={classes.label}>\r\n                                    {t(\"systemsModule.warrantyDetails.issuer\")}\r\n                                </div>\r\n                                <div className={classes.fieldData}>\r\n                                    {t(`systemsModule.warrantyDetails.${systemData.warranty.issuer || 'nowarranty'}`)}\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={12} md={6} lg={3} xl={4} className={classes.fieldContainer}>\r\n                                <div className={classes.label}>\r\n                                    {t(\"systemsModule.warrantyDetails.expiryDate\")}\r\n                                </div>\r\n                                <div className={classes.fieldData}>\r\n                                    {systemData.warranty.expiryDate ? format(new Date(systemData.warranty.expiryDate), lang.dateformat) : t(\"systemsModule.warrantyDetails.nowarranty\")}\r\n                                </div>\r\n                            </Grid>\r\n                            \r\n                        </Grid>\r\n                        <Grid item xs={12} lg={4} xl={4} className={classes.gridItem}>\r\n                            <div className={classes.card}>\r\n                                <div className={classes.cardTitle}>\r\n                                    {t(\"systemsModule.manufacturer\")}\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.manufacturerDetails.name\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.manufacturer.name || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.manufacturerDetails.contactName\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.manufacturer.contactName || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.manufacturerDetails.email\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.manufacturer.email || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.manufacturerDetails.phoneNumber\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.manufacturer.phoneNumber || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.manufacturerDetails.extension\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.manufacturer.extension || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12} lg={4} xl={4} className={classes.gridItem}>\r\n                        <div className={classes.card}>\r\n                                <div className={classes.cardTitle}>\r\n                                    {t(\"systemsModule.supplier\")}\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.supplierDetails.name\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.supplier.name || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.supplierDetails.contactName\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.supplier.contactName || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.supplierDetails.email\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.supplier.email || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.supplierDetails.phoneNumber\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.supplier.phoneNumber || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.supplierDetails.extension\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.supplier.extension || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12} lg={4} xl={4} className={classes.gridItem}>\r\n                            <div className={classes.card}>\r\n                                <div className={classes.cardTitle}>\r\n                                    {t(\"systemsModule.insurance\")}\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.insuranceDetails.name\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.insurance.name || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.insuranceDetails.contactName\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.insurance.contactName || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.insuranceDetails.email\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.insurance.email || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.insuranceDetails.phoneNumber\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.insurance.phoneNumber || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.insuranceDetails.extension\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.insurance.extension || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </Collapse>\r\n      \r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        borderRadius: '5px',\r\n        margin: '10px',\r\n        padding: '10px'\r\n    },\r\n    grid: {\r\n        padding: '10px',\r\n    },\r\n    gridItem: {\r\n        display: 'flex',\r\n        margin: '10px 0'\r\n    },\r\n    fieldContainer: {\r\n        padding: '10px',\r\n        margin : '15px 0', \r\n        height: '60px',\r\n    },\r\n    label: {\r\n        padding: '5px 10px',\r\n        borderRadius: '5px 5px 0px 0',\r\n        background: 'rgba(0,0,0,0.3)',\r\n        color: 'white',\r\n        width: 'fit-content',\r\n        fontSize: '13px'\r\n    },\r\n    fieldData: {\r\n        padding: '15px 20px',\r\n        width: '200px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '0 5px 5px 5px',\r\n        color: 'white'\r\n    },\r\n    card: {\r\n        margin: '10px 0px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '5px',\r\n        padding: '10px',\r\n        width: '100%'\r\n    },\r\n    cardTitle: {\r\n        color: 'white',\r\n        fontSize: '20px',\r\n        padding: '10px',\r\n        background: 'rgba(0,0,0,0.3)',\r\n        borderRadius: '5px',\r\n        \r\n    },\r\n    cardRow: {\r\n        padding: '10px',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'space-between',\r\n        color: 'white',\r\n        borderBottom: '1px solid rgba(255,255,255,0.2)'\r\n    },\r\n    rowLabel: {\r\n        padding: '3px 0',\r\n        fontSize: '14px',\r\n        color: 'rgba(255,255,255,0.6)'\r\n    },\r\n    rowData: {\r\n        fontSize: '16px'\r\n    },\r\n    headerRow: {\r\n        color: 'white',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        padding: '0px 10px 10px 10px',\r\n        fontSize: '20px',\r\n        borderBottom: '1px solid rgba(255,255,255,0.2)'\r\n    },\r\n    iconBtn: {\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.3)'\r\n        }\r\n    },\r\n    icon: {\r\n        color: 'white',\r\n        fontSize: '20px'\r\n    },\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\UpsertSystem.js",["423","424","425","426","427","428","429","430"],"import heLocale from \"date-fns/locale/he\";\r\nimport React, { useState, useContext, useEffect } from 'react';\r\nimport { makeStyles, useMediaQuery, Paper, Grid, Fade, IconButton, Button, TextField, Select, MenuItem, FormHelperText, Chip, Input, Avatar, RadioGroup, FormControlLabel, Radio } from '@material-ui/core';\r\nimport { DatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { LanguageContext } from '../../../context/LanguageContext';\r\nimport { CheckBox, ClearRounded } from '@material-ui/icons';\r\nimport { AuthContext } from '../../../context/AuthContext';\r\nimport { createUserOptions } from '../../../api/userApi';\r\nimport clsx from 'clsx'\r\nimport { UserItem } from '../../user/UserItem';\r\nimport { getFullName } from '../../../api/genericApi';\r\nimport { getAssetsSuggestions } from '../../../api/systemsApi';\r\n\r\n\r\n\r\n\r\nexport const UpsertSystem = ({ handleClose, handleSave, handleUpdate, systemId, data }) => {\r\n    const classes = useStyles();\r\n    const { lang } = useContext(LanguageContext);\r\n    const { auth } = useContext(AuthContext);\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const { t, i18n } = useTranslation();\r\n    const [ mode, setMode ] = useState(handleUpdate ? 'update' : 'create')\r\n    const [ errors, setErrors ] = useState([]);\r\n    const [ assets, setAssets ] = useState([]);\r\n    const [ userList, setUserList ] = useState([]);\r\n    const [ details, setDetails ] = useState({\r\n        name: '',\r\n        asset: '',\r\n        owner: '',\r\n        linkedUsers: []\r\n    });\r\n    const [ addData, setAddData ] = useState(data || {\r\n        general: {\r\n            location: '',\r\n            manufacturingYear: '',\r\n            SID: '',\r\n        },\r\n        manufacturer: {\r\n            name: '',\r\n            contactName: '',\r\n            email: '',\r\n            phoneNumber: '',\r\n            extension: '', \r\n        },\r\n        supplier: {\r\n            name: '',\r\n            contactName: '',\r\n            email: '',\r\n            phoneNumber: '',\r\n            extension: '',\r\n        },\r\n        insurance: {\r\n            name: '',\r\n            contanctName: '',\r\n            email: '',\r\n            phoneNumber: '',\r\n            extension: '',\r\n            expiryDate: null,\r\n        },\r\n        warranty: {\r\n            issuer: '',\r\n            expiryDate: null\r\n        }\r\n    })\r\n\r\n    const validateFields = () => {\r\n        return new Promise((resolve,reject) => {\r\n            let errList = [];\r\n            if (handleUpdate) resolve(true);\r\n            if (!details.owner) {\r\n                errList.push({ field: 'owner', text: t(\"errors.isRequired\")})\r\n            }\r\n            if (!details.asset) {\r\n                errList.push({ field: 'asset', text: t(\"errors.isRequired\")})\r\n            }\r\n            if (!details.name) {\r\n                errList.push({ field: 'name', text: t(\"errors.isRequired\")})\r\n            }\r\n            \r\n            if (errList.length) {\r\n                setErrors(errList);\r\n                resolve(false);\r\n            };\r\n            resolve(true);\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        createUserOptions()\r\n        .then(data => {\r\n            setUserList(data);\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        getAssetsSuggestions()\r\n        .then(data => {\r\n            if (data.length){\r\n                console.log(data)\r\n                setAssets(data);\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    const handleConfirm = () => {\r\n        validateFields()\r\n        .then(res => {\r\n            if (res) {\r\n                if (mode === 'update') {\r\n                    handleUpdate({system: systemId, data: addData});\r\n                    return;\r\n                }\r\n                handleSave({ ...details, data: addData});\r\n                return;\r\n            };\r\n        })      \r\n    }\r\n\r\n    const handleChangeAddData = obj => event => {\r\n        setAddData({\r\n            ...addData,\r\n            [obj.type]: {\r\n                ...addData[obj.type],\r\n                [obj.field]: event.target.value\r\n            }\r\n        })\r\n    };\r\n\r\n    const handleChange = field => event => {\r\n        console.log(event.target.value)\r\n        setDetails({\r\n            ...details,\r\n            [field]: event.target.value\r\n        })\r\n        if (errors.length) {\r\n            setErrors(errors.filter(err => err.field !== field))\r\n        }\r\n    }\r\n\r\n    const handleChangeMultiple = (event) => {\r\n        setDetails({...details, \r\n            linkedUsers: event.target.value\r\n        });\r\n    };\r\n\r\n    const handleLinkedRemove = (linkedUser) => event => {\r\n        event.stopPropagation();\r\n        console.log('clicked')\r\n        setDetails({ ...details, \r\n            linkedUsers: details.linkedUsers.filter(lu => lu !== linkedUser)\r\n        })\r\n        \r\n    }\r\n\r\n    const handleChangeInsuranceExpiry = date => {\r\n        setAddData({\r\n            ...addData,\r\n            insurance: {\r\n                ...addData.insurance,\r\n                expiryDate: date\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleChangeWarrantyExpiry = date => {\r\n        setAddData({\r\n            ...addData,\r\n            warranty: {\r\n                ...addData.warranty,\r\n                expiryDate: date\r\n            }\r\n        })\r\n    }\r\n    \r\n    \r\n\r\n    return (\r\n        <Fade in={true}>\r\n            <Grid container justify='center' alignItems='center' style={{ outline: '0'}}>\r\n                <Grid item xs={12} sm={10} md={8} lg={8} xl={6} className={classes.gridCont}>\r\n                    <Paper\r\n                        elevation={6}\r\n                        className={classes.paper}\r\n                        style={{ direction: lang.dir }}\r\n                    >\r\n                        <Grid container>\r\n                            <Grid item xs={12} className={classes.headerRow}>\r\n                                <div className={classes.title}>\r\n                                    {mode === 'update' ? t(\"systemsModule.updateSystemDetails\") : t(\"systemsModule.createSystem\")}\r\n                                </div>\r\n                                <div className={classes.close}>\r\n                                    <IconButton\r\n                                        className={classes.iconBtn}\r\n                                        onClick={handleClose}\r\n                                    >\r\n                                        <ClearRounded className={classes.icon}/>\r\n                                    </IconButton>\r\n                                </div>\r\n                            </Grid>\r\n                            {\r\n                                mode === 'create' &&\r\n                                <React.Fragment>\r\n                                    <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.section}>\r\n                                        <Grid item xs={12}>\r\n                                            <div className={classes.sectionTitle}>\r\n                                                {t(\"systemsModule.generalDetails\")}\r\n                                            </div>\r\n                                        </Grid>\r\n                                        <Grid item xs={12} className={classes.fields}>\r\n                                            <Grid container justify='flex-start'>\r\n                                                <Grid item xs={12} className={classes.textContainer}>\r\n                                                    <TextField\r\n                                                        variant={\"outlined\"}\r\n                                                        label={t(`systemsModule.systemName`)}\r\n                                                        error={ errors.filter(e => e.field === `name`).length > 0 }\r\n                                                        value={ details.name }\r\n                                                        onChange={handleChange('name')}\r\n                                                        className={classes.textField}\r\n                                                        size={'medium'}\r\n                                                        helperText={ errors.filter(e => e.field === `name`).length > 0 ? t(\"errors.isRequired\"): null }\r\n                                                    />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={6} md={6} lg={6} xl={6} className={classes.section}>\r\n                                        <Grid item xs={12}>\r\n                                            <div className={classes.sectionTitle}>\r\n                                                {t(\"systemsModule.owningAsset\")}\r\n                                            </div>\r\n                                        </Grid>\r\n                                        <Grid item xs={12} className={classes.fields}>\r\n                                            <Grid container justify='flex-start'>\r\n                                                <Grid item xs={12} className={classes.textContainer}>\r\n                                                <Select\r\n                                                    variant={\"outlined\"}\r\n                                                    error={ errors.filter(e => e.field === `asset`).length > 0 }\r\n                                                    value={ details.asset }\r\n                                                    onChange={handleChange(`asset`)}\r\n                                                    className={classes.selectInput}\r\n                                                    MenuProps={{\r\n                                                        anchorOrigin: {\r\n                                                            vertical: \"bottom\",\r\n                                                            horizontal: \"center\",\r\n                                                        },\r\n                                                        transformOrigin: {\r\n                                                            vertical: \"top\",\r\n                                                            horizontal: \"center\",\r\n                                                        },\r\n                                                        getContentAnchorEl: null,\r\n                                                        disablePortal: true,\r\n                                                        classes: {\r\n                                                            paper: classes.menupaper,\r\n                                                    \r\n                                                        }\r\n                                                    }}\r\n                                                    \r\n                                                >\r\n                                                    {\r\n                                                        assets.map((asset, i) => \r\n                                                            <MenuItem \r\n                                                                key={i}\r\n                                                                value={asset.value}\r\n                                                                style={{ direction: lang.dir }}\r\n                                                                className={classes.menuitem}\r\n                                                            >\r\n                                                                {asset.text}\r\n                                                            </MenuItem>\r\n                                                        )\r\n                                                    }\r\n                                                </Select>\r\n                                                {\r\n                                                    errors.filter(e => e.field === 'asset').length > 0 &&\r\n                                                    <FormHelperText style={{ color: '#f44336', marginRight: '15px'}}>{t(\"errors.isRequired\")}</FormHelperText>\r\n                                                }\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={6} md={6} lg={4} xl={4}  className={classes.section}>\r\n                                        <Grid item xs={12}>\r\n                                            <div className={classes.sectionTitle}>\r\n                                                {t(\"systemsModule.systemOwner\")}\r\n                                            </div>\r\n                                        </Grid>\r\n                                        <Grid item xs={12} className={classes.fields}>\r\n                                            <Grid item xs={12} className={classes.textContainer}>\r\n                                                <Select\r\n                                                    variant={\"outlined\"}\r\n                                                    error={ errors.filter(e => e.field === `owner`).length > 0 }\r\n                                                    value={ details.owner }\r\n                                                    onChange={handleChange(`owner`)}\r\n                                                    className={classes.selectInput}\r\n                                                    MenuProps={{\r\n                                                        anchorOrigin: {\r\n                                                            vertical: \"bottom\",\r\n                                                            horizontal: \"center\",\r\n                                                        },\r\n                                                        transformOrigin: {\r\n                                                            vertical: \"top\",\r\n                                                            horizontal: \"center\",\r\n                                                        },\r\n                                                        getContentAnchorEl: null,\r\n                                                        disablePortal: true,\r\n                                                        classes: {\r\n                                                            paper: classes.menupaper,\r\n                                                    \r\n                                                        }\r\n                                                    }}\r\n                                                    renderValue={(selected) => {\r\n                                                        let user = userList.find( f => f._id === selected);\r\n                                                        return (\r\n                                                            \r\n                                                                <Chip\r\n                                                                    size={'medium'}\r\n                                                                    avatar={<Avatar style={{ height: '40px', width: '40px'}} src={user.avatar} />}\r\n                                                                    label={getFullName(user)}\r\n                                                                    className={classes.chip}\r\n                                                                    \r\n                                                                />\r\n                                                        \r\n                                                        )\r\n                                                    }}\r\n                                                >\r\n                                                    {\r\n                                                        userList.map((user, i) => \r\n                                                            <MenuItem \r\n                                                                key={i}\r\n                                                                value={user.value}\r\n                                                                style={{ direction: lang.dir }}\r\n                                                                className={classes.menuitem}\r\n                                                            >\r\n                                                                <div className={classes.userCont}>\r\n                                                                    <UserItem\r\n                                                                        user={user}\r\n                                                                        avatarSize={40}\r\n                                                                        size={13}\r\n                                                                    />\r\n                                                                </div>\r\n                                                                \r\n                                                            </MenuItem>\r\n                                                        )\r\n                                                    }\r\n                                                </Select>\r\n                                                {\r\n                                                    errors.filter(e => e.field === 'owner').length > 0 &&\r\n                                                    <FormHelperText style={{ color: '#f44336', marginRight: '15px'}}>{t(\"errors.isRequired\")}</FormHelperText>\r\n                                                }\r\n                                                \r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={6} md={6} lg={7} xl={7} className={classes.section}>\r\n                                    <Grid item xs={12}>\r\n                                        <div className={classes.sectionTitle}>\r\n                                            {t(\"systemsModule.linkedUsers\")}\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} className={classes.fields}>\r\n                                        <Grid item xs={12} className={classes.textContainer}>\r\n                                        <Select\r\n                                            variant={\"outlined\"}\r\n                                            multiple\r\n                                            value={details.linkedUsers}\r\n                                            onChange={handleChangeMultiple}\r\n                                            className={classes.selectInput}\r\n                                            MenuProps={{\r\n                                                classes: {\r\n                                                    paper: classes.menupaper,\r\n                                            \r\n                                                },\r\n                                                anchorOrigin: {\r\n                                                    vertical: \"bottom\",\r\n                                                    horizontal: \"center\",\r\n                                                },\r\n                                                transformOrigin: {\r\n                                                    vertical: \"top\",\r\n                                                    horizontal: \"center\",\r\n                                                },\r\n                                                getContentAnchorEl: null,\r\n                                                disablePortal: true,\r\n                                                classes: {\r\n                                                    paper: classes.menupaper,\r\n                                \r\n                                                }\r\n                                            }}\r\n                                            renderValue={(selected) => (\r\n                                                <div className={classes.chips}>\r\n                                                {\r\n                                                    selected.map((value) => {\r\n                                                        let user = userList.find( f => f._id === value);\r\n                                                        return (\r\n                                                            <div className={classes.chipsCont}>\r\n                                                                <Chip\r\n                                                                    clickable\r\n                                                                    size={'medium'}\r\n                                                                    avatar={<Avatar style={{ height: '40px', width: '40px'}} src={user.avatar} />}\r\n                                                                    label={getFullName(user)}\r\n                                                                    onDelete={handleLinkedRemove(value)}\r\n                                                                    deleteIcon={<ClearRounded className={classes.removeIcon}/>}\r\n                                                                    onMouseDown={e => e.stopPropagation()}\r\n                                                                    className={classes.chip}\r\n                                                                />\r\n                                                            </div>\r\n                                                        )\r\n\r\n                                                        \r\n                                                    })\r\n                                                }\r\n                                                </div>\r\n                                            )}\r\n                                \r\n                                            >\r\n                                            {\r\n                                                    userList.map((user, i) => \r\n                                                        <MenuItem \r\n                                                            key={i}\r\n                                                            value={user.value}\r\n                                                            style={{ direction: lang.dir }}\r\n                                                            className={classes.menuitem}\r\n                                                        >\r\n                                                            <div className={classes.userCont}>\r\n                                                                <UserItem\r\n                                                                    user={user}\r\n                                                                    avatarSize={40}\r\n                                                                    size={14}\r\n                                                                />\r\n                                                            </div>\r\n                                                            \r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }\r\n                                            </Select>\r\n                                            \r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                </React.Fragment>\r\n                            }\r\n                            <Grid item xs={12} className={classes.section}>\r\n                                <Grid item xs={4}>\r\n                                    <div \r\n                                        className={classes.sectionTitle}\r\n                                    >\r\n                                        {t(\"systemsModule.additionalDetails\")}\r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid container className={classes.fields}>\r\n                                    <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                        <TextField\r\n                                            variant={\"outlined\"}\r\n                                            label={t(`systemsModule.location`)}\r\n                                            value={ addData.general.location }\r\n                                            onChange={handleChangeAddData({ type: 'general', field: 'location'})}\r\n                                            className={classes.textField}\r\n                                            size={'medium'}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                        <TextField\r\n                                            variant={\"outlined\"}\r\n                                            label={t(`systemsModule.manufacturingYear`)}\r\n                                            value={ addData.general.manufacturingYear }\r\n                                            onChange={handleChangeAddData({ type: 'general', field: 'manufacturingYear'})}\r\n                                            className={classes.textField}\r\n                                            size={'medium'}\r\n\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                        <TextField\r\n                                            variant={\"outlined\"}\r\n                                            label={t(`systemsModule.SID`)}\r\n                                            value={ addData.general.SID }\r\n                                            onChange={handleChangeAddData({ type: 'general', field: 'SID'})}\r\n                                            className={classes.textField}\r\n                                            size={'medium'}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item xs={12} className={classes.section}>\r\n                                <Grid item xs={4}>\r\n                                    <div \r\n                                        className={classes.sectionTitle}\r\n                                    >\r\n                                        {t(\"systemsModule.manufacturer\")}\r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid container className={classes.fields}>\r\n                                    <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                        <TextField\r\n                                            variant={\"outlined\"}\r\n                                            label={t(`systemsModule.manufacturerDetails.name`)}\r\n                                            value={ addData.manufacturer.name }\r\n                                            onChange={handleChangeAddData({ type: 'manufacturer', field: 'name'})}\r\n                                            className={classes.textField}\r\n                                            size={'medium'}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                        <TextField\r\n                                            variant={\"outlined\"}\r\n                                            label={t(`systemsModule.manufacturerDetails.contactName`)}\r\n                                            value={ addData.manufacturer.contactName }\r\n                                            onChange={handleChangeAddData({ type: 'manufacturer', field: 'contactName'})}\r\n                                            className={classes.textField}\r\n                                            size={'medium'}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                        <TextField\r\n                                            variant={\"outlined\"}\r\n                                            label={t(`systemsModule.manufacturerDetails.email`)}\r\n                                            value={  addData.manufacturer.email }\r\n                                            onChange={handleChangeAddData({ type: 'manufacturer', field: 'email'})}\r\n                                            className={classes.textField}\r\n                                            size={'medium'}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                        <TextField\r\n                                            variant={\"outlined\"}\r\n                                            label={t(`systemsModule.manufacturerDetails.phoneNumber`)}\r\n                                            value={ addData.manufacturer.phoneNumber }\r\n                                            onChange={handleChangeAddData({ type: 'manufacturer', field: 'phoneNumber'})}\r\n                                            className={classes.textField}\r\n                                            size={'medium'}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                        <TextField\r\n                                            variant={\"outlined\"}\r\n                                            label={t(`systemsModule.manufacturerDetails.extension`)}\r\n                                            value={ addData.manufacturer.extension }\r\n                                            onChange={handleChangeAddData({ type: 'manufacturer', field: 'extension'})}\r\n                                            className={classes.textField}\r\n                                            size={'medium'}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item xs={12} className={classes.section}>\r\n                                <Grid item xs={4}>\r\n                                    <div \r\n                                        className={classes.sectionTitle}\r\n                                    >\r\n                                        {t(\"systemsModule.supplier\")}\r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid container className={classes.fields}>\r\n                                    <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                        <TextField\r\n                                            variant={\"outlined\"}\r\n                                            label={t(`systemsModule.supplierDetails.name`)}\r\n                                            value={ addData.supplier.name }\r\n                                            onChange={handleChangeAddData({ type: 'supplier', field: 'name'})}\r\n                                            className={classes.textField}\r\n                                            size={'medium'}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                        <TextField\r\n                                            variant={\"outlined\"}\r\n                                            label={t(`systemsModule.supplierDetails.contactName`)}\r\n                                            value={ addData.supplier.contactName }\r\n                                            onChange={handleChangeAddData({ type: 'supplier', field: 'contactName'})}\r\n                                            className={classes.textField}\r\n                                            size={'medium'}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                        <TextField\r\n                                            variant={\"outlined\"}\r\n                                            label={t(`systemsModule.supplierDetails.email`)}\r\n                                            value={  addData.supplier.email }\r\n                                            onChange={handleChangeAddData({ type: 'supplier', field: 'email'})}\r\n                                            className={classes.textField}\r\n                                            size={'medium'}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                        <TextField\r\n                                            variant={\"outlined\"}\r\n                                            label={t(`systemsModule.supplierDetails.phoneNumber`)}\r\n                                            value={ addData.supplier.phoneNumber }\r\n                                            onChange={handleChangeAddData({ type: 'supplier', field: 'phoneNumber'})}\r\n                                            className={classes.textField}\r\n                                            size={'medium'}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                        <TextField\r\n                                            variant={\"outlined\"}\r\n                                            label={t(`systemsModule.supplierDetails.extension`)}\r\n                                            value={ addData.supplier.extension }\r\n                                            onChange={handleChangeAddData({ type: 'supplier', field: 'extension'})}\r\n                                            className={classes.textField}\r\n                                            size={'medium'}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item xs={12} className={classes.section}>\r\n                                <Grid item xs={4}>\r\n                                    <div \r\n                                        className={classes.sectionTitle}\r\n                                    >\r\n                                        {t(\"systemsModule.insurance\")}\r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid container className={classes.fields}>\r\n                                    <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                        <TextField\r\n                                            variant={\"outlined\"}\r\n                                            label={t(`systemsModule.insuranceDetails.name`)}\r\n                                            value={ addData.insurance.name }\r\n                                            onChange={handleChangeAddData({ type: 'insurance', field: 'name'})}\r\n                                            className={classes.textField}\r\n                                            size={'medium'}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                        <TextField\r\n                                            variant={\"outlined\"}\r\n                                            label={t(`systemsModule.insuranceDetails.contactName`)}\r\n                                            value={ addData.insurance.contactName }\r\n                                            onChange={handleChangeAddData({ type: 'insurance', field: 'contactName'})}\r\n                                            className={classes.textField}\r\n                                            size={'medium'}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                        <TextField\r\n                                            variant={\"outlined\"}\r\n                                            label={t(`systemsModule.insuranceDetails.email`)}\r\n                                            value={  addData.insurance.email }\r\n                                            onChange={handleChangeAddData({ type: 'insurance', field: 'email'})}\r\n                                            className={classes.textField}\r\n                                            size={'medium'}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                        <TextField\r\n                                            variant={\"outlined\"}\r\n                                            label={t(`systemsModule.insuranceDetails.phoneNumber`)}\r\n                                            value={ addData.insurance.phoneNumber }\r\n                                            onChange={handleChangeAddData({ type: 'insurance', field: 'phoneNumber'})}\r\n                                            className={classes.textField}\r\n                                            size={'medium'}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                        <TextField\r\n                                            variant={\"outlined\"}\r\n                                            label={t(`systemsModule.insuranceDetails.extension`)}\r\n                                            value={ addData.insurance.extension }\r\n                                            onChange={handleChangeAddData({ type: 'insurance', field: 'extension'})}\r\n                                            className={classes.textField}\r\n                                            size={'medium'}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                        \r\n                                        <MuiPickersUtilsProvider utils={DateFnsUtils} locale={heLocale}>\r\n                                            <DatePicker\r\n                                                \r\n                                                format=\"dd/MM/yyyy\"\r\n                                                label={t(`systemsModule.insuranceDetails.expiryDate`)}\r\n                                                value={addData.insurance.expiryDate}\r\n                                                onChange={handleChangeInsuranceExpiry}\r\n                                                inputVariant={\"outlined\"}\r\n                                                className={classes.textField}\r\n                                                autoOk={true}\r\n                                                disablePast={true}\r\n                                               \r\n                                            />\r\n                                        </MuiPickersUtilsProvider>\r\n                                    </Grid>\r\n                                    \r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item xs={12} className={classes.section}>\r\n                                <Grid item xs={4}>\r\n                                    <div \r\n                                        className={classes.sectionTitle}\r\n                                    >\r\n                                        {t(\"systemsModule.warranty\")}\r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid container className={classes.fields}>\r\n                                    <Grid item xs={12} sm={6} md={6} lg={8} xl={8} className={classes.textContainer}>\r\n                                        <RadioGroup\r\n                                            value={addData.warranty.issuer}\r\n                                            onChange={handleChangeAddData({ type: 'warranty', field: 'issuer'})}\r\n                                            className={classes.radioGroup}\r\n                                        >\r\n                                            <FormControlLabel value='supplier' control={<Radio color={'white'} className={classes.radioBtn}/>} label={t(\"systemsModule.warrantyDetails.supplier\")}/>\r\n                                            <FormControlLabel value='manufacturer' control={<Radio color={'white'} className={classes.radioBtn} />} label={t(\"systemsModule.warrantyDetails.manufacturer\")}/>\r\n                                            <FormControlLabel value='' control={<Radio color={'white'} className={classes.radioBtn} />} label={t(\"systemsModule.warrantyDetails.nowarranty\")}/>\r\n                                        </RadioGroup>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                        <MuiPickersUtilsProvider utils={DateFnsUtils} locale={heLocale}>\r\n                                            <DatePicker\r\n                                                format=\"dd/MM/yyyy\"\r\n                                                label={t(`systemsModule.warrantyDetails.expiryDate`)}\r\n                                                value={addData.warranty.expiryDate}\r\n                                                onChange={handleChangeWarrantyExpiry}\r\n                                                inputVariant={\"outlined\"}\r\n                                                className={classes.textField}\r\n                                                autoOk={true}\r\n                                                disablePast={true}\r\n                                            />\r\n                                        </MuiPickersUtilsProvider>\r\n                                    </Grid>\r\n                                    \r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item xs={12} className={classes.controls}>\r\n                                <Button\r\n                                    className={clsx(classes.control, classes.save)}\r\n                                    onClick={handleConfirm}\r\n                                >\r\n                                    {t(\"controls.confirm\")}\r\n                                </Button>\r\n                                <Button\r\n                                    className={clsx(classes.control, classes.cancel)}\r\n                                    onClick={handleClose}\r\n                                >\r\n                                    {t(\"controls.cancel\")}\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        </Fade>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    gridCont: {\r\n        height: 'fit-content'\r\n    },\r\n    paper: {\r\n        background: 'rgba(0,0,0,0.4)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '10px',\r\n        padding: '10px 20px',\r\n        overflowY: 'overlay',\r\n        height: '80vh',\r\n        '&:focus': {\r\n            outline: 'none'\r\n        },\r\n        [theme.breakpoints.down('sm')]: {\r\n            height: '81vh',\r\n            borderRadius: '0',\r\n            border: '0'\r\n        },\r\n    },\r\n    headerRow: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        width: '100%',      \r\n        borderBottom: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    title: {\r\n        color: 'white',\r\n        padding: '20px 10px 10px',\r\n        fontSize: '20px',\r\n        whiteSpace: 'nowrap'\r\n    },\r\n    iconBtn: {\r\n        margin: '10px',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.3)'\r\n        }\r\n    },\r\n    icon: {\r\n        color: 'white',\r\n        fontSize: '20px'\r\n    },\r\n    section: {\r\n        margin: '10px 5px',\r\n        \r\n    },\r\n    sectionTitle: {\r\n        color: 'white',\r\n        fontSize: '16px',\r\n        padding: '10px 20px',\r\n        width: 'fit-content',\r\n        borderRadius: '10px 10px 0 0',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        whiteSpace: 'nowrap'\r\n    },\r\n    fields: {\r\n        padding: '10px 20px',\r\n        borderRadius: '0px 10px 10px 10px',\r\n        background: 'rgba(0,0,0,0.4)',\r\n    },\r\n    textContainer: {\r\n        padding: '5px',\r\n    },\r\n    textField: {\r\n        width: '100%',\r\n        '& fieldset': {\r\n            borderRadius: '5px',\r\n        },  \r\n    },\r\n    selectInput: {\r\n        width: '100%',\r\n        '& fieldset': {\r\n            borderRadius: '5px',\r\n        }   \r\n    },\r\n    menupaper: {\r\n        background: 'rgba(0,0,0,0.8)',\r\n        backdropFilter: 'blur(10px)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        marginRight: '7px',\r\n        marginLeft: '-5px'\r\n\r\n    },\r\n    menuitem: {\r\n        color: 'white',\r\n        width: '100%',\r\n        '&:hover': {\r\n            background: 'rgba(255,255,255,0.1)'\r\n        }\r\n    },\r\n    controls: {\r\n        borderTop: '1px solid rgba(255,255,255,0.2)',\r\n        padding: '10px 0',\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    control: {\r\n        width: '30%',\r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        fontSize: '16px',\r\n        margin: '5px',\r\n        padding: '5px 30px',\r\n        borderRadius: '30px',\r\n        color: 'white',\r\n       \r\n    },\r\n    save: {\r\n        background: 'rgba(0,0,0,0.2)', \r\n        '&:hover': {\r\n            background: 'black'\r\n        },\r\n        '&:disabled': {\r\n            color: 'rgba(255,255,255,0.3)'\r\n        }\r\n    },\r\n    cancel: {\r\n        '&:hover': { \r\n            boxShadow: 'inset rgba(255,255,255,0.3) 0 0 2px 1px'\r\n        }\r\n    },\r\n    chips: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap'\r\n    },\r\n    chip: {\r\n        height: '50px',\r\n        fontSize: '14px',\r\n        borderRadius: '50px',\r\n        display: 'flex',\r\n        justifyContent: 'flex-start',\r\n        color: 'white',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        background: 'rgba(0,0,0,0.6)',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.6)',\r\n            boxShadow: 'inset lightgrey 0px 0px 1px 1px'\r\n        } \r\n    },\r\n    userCont: {\r\n        height: 'fit-content',\r\n        padding: 0,\r\n        margin: 0,\r\n        margin: '5px 0',\r\n        \r\n    },\r\n    chipsCont: {\r\n        height: 'fit-content',\r\n        padding: 0,\r\n        margin: '3px',\r\n        borderRadius: '50px',\r\n        background: 'rgba(255,255,255,0.1)',\r\n        boxShadow: 'inset rgba(0,0,0,0.5) 0px 0px 2px 1px',\r\n        display: 'flex',\r\n        jutifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        \r\n    },\r\n    removeIcon: {\r\n        color: 'rgba(255,255,255,0.2)',\r\n        padding: '5px',\r\n        marginRight: '5px',\r\n        borderRadius: '50px',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.8)',\r\n            color: 'white',\r\n        }\r\n    },\r\n    radioGroup: {\r\n        color: 'white',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignitems: 'center',\r\n        \r\n    },\r\n    radioBtn: {\r\n        color: 'white',\r\n        padding: '15px'\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\UpsertFault.js",["431","432","433","434","435","436","437","438","439","440","441","442","443","444","445","446"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\UpdateOwner.js",["447","448","449"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\UpsertAsset.js",["450","451","452","453"],{"ruleId":"454","replacedBy":"455"},{"ruleId":"456","replacedBy":"457"},{"ruleId":"458","severity":1,"message":"459","line":1,"column":42,"nodeType":"460","messageId":"461","endLine":1,"endColumn":51},{"ruleId":"458","severity":1,"message":"462","line":1,"column":17,"nodeType":"460","messageId":"461","endLine":1,"endColumn":25},{"ruleId":"463","severity":1,"message":"464","line":11,"column":27,"nodeType":"465","messageId":"466","endLine":11,"endColumn":29},{"ruleId":"458","severity":1,"message":"467","line":14,"column":11,"nodeType":"460","messageId":"461","endLine":14,"endColumn":17},{"ruleId":"468","severity":1,"message":"469","line":33,"column":8,"nodeType":"470","endLine":33,"endColumn":10,"suggestions":"471"},{"ruleId":"468","severity":1,"message":"469","line":34,"column":8,"nodeType":"470","endLine":34,"endColumn":10,"suggestions":"472"},{"ruleId":"458","severity":1,"message":"473","line":19,"column":16,"nodeType":"460","messageId":"461","endLine":19,"endColumn":20},{"ruleId":"458","severity":1,"message":"473","line":14,"column":16,"nodeType":"460","messageId":"461","endLine":14,"endColumn":20},{"ruleId":"458","severity":1,"message":"473","line":15,"column":16,"nodeType":"460","messageId":"461","endLine":15,"endColumn":20},{"ruleId":"468","severity":1,"message":"474","line":38,"column":8,"nodeType":"470","endLine":38,"endColumn":19,"suggestions":"475"},{"ruleId":"476","severity":1,"message":"477","line":95,"column":41,"nodeType":"478","messageId":"466","endLine":95,"endColumn":43},{"ruleId":"458","severity":1,"message":"459","line":1,"column":17,"nodeType":"460","messageId":"461","endLine":1,"endColumn":26},{"ruleId":"458","severity":1,"message":"479","line":17,"column":10,"nodeType":"460","messageId":"461","endLine":17,"endColumn":21},{"ruleId":"458","severity":1,"message":"473","line":25,"column":16,"nodeType":"460","messageId":"461","endLine":25,"endColumn":20},{"ruleId":"480","severity":1,"message":"481","line":225,"column":9,"nodeType":"482","messageId":"466","endLine":225,"endColumn":19},{"ruleId":"458","severity":1,"message":"483","line":3,"column":42,"nodeType":"460","messageId":"461","endLine":3,"endColumn":48},{"ruleId":"458","severity":1,"message":"484","line":9,"column":13,"nodeType":"460","messageId":"461","endLine":9,"endColumn":17},{"ruleId":"458","severity":1,"message":"485","line":4,"column":8,"nodeType":"460","messageId":"461","endLine":4,"endColumn":25},{"ruleId":"458","severity":1,"message":"486","line":9,"column":10,"nodeType":"460","messageId":"461","endLine":9,"endColumn":29},{"ruleId":"458","severity":1,"message":"473","line":43,"column":16,"nodeType":"460","messageId":"461","endLine":43,"endColumn":20},{"ruleId":"458","severity":1,"message":"487","line":5,"column":8,"nodeType":"460","messageId":"461","endLine":5,"endColumn":41},{"ruleId":"458","severity":1,"message":"473","line":12,"column":16,"nodeType":"460","messageId":"461","endLine":12,"endColumn":20},{"ruleId":"458","severity":1,"message":"473","line":17,"column":20,"nodeType":"460","messageId":"461","endLine":17,"endColumn":24},{"ruleId":"458","severity":1,"message":"473","line":19,"column":16,"nodeType":"460","messageId":"461","endLine":19,"endColumn":20},{"ruleId":"468","severity":1,"message":"488","line":33,"column":8,"nodeType":"470","endLine":33,"endColumn":16,"suggestions":"489"},{"ruleId":"458","severity":1,"message":"459","line":1,"column":42,"nodeType":"460","messageId":"461","endLine":1,"endColumn":51},{"ruleId":"490","severity":1,"message":"491","line":49,"column":28,"nodeType":"492","messageId":"493","endLine":49,"endColumn":29,"suggestions":"494"},{"ruleId":"458","severity":1,"message":"495","line":3,"column":43,"nodeType":"460","messageId":"461","endLine":3,"endColumn":62},{"ruleId":"458","severity":1,"message":"496","line":4,"column":50,"nodeType":"460","messageId":"461","endLine":4,"endColumn":54},{"ruleId":"468","severity":1,"message":"497","line":22,"column":8,"nodeType":"470","endLine":22,"endColumn":20,"suggestions":"498"},{"ruleId":"458","severity":1,"message":"499","line":4,"column":25,"nodeType":"460","messageId":"461","endLine":4,"endColumn":43},{"ruleId":"468","severity":1,"message":"500","line":25,"column":8,"nodeType":"470","endLine":25,"endColumn":10,"suggestions":"501"},{"ruleId":"468","severity":1,"message":"502","line":41,"column":8,"nodeType":"470","endLine":41,"endColumn":15,"suggestions":"503"},{"ruleId":"458","severity":1,"message":"496","line":2,"column":22,"nodeType":"460","messageId":"461","endLine":2,"endColumn":26},{"ruleId":"458","severity":1,"message":"504","line":2,"column":28,"nodeType":"460","messageId":"461","endLine":2,"endColumn":45},{"ruleId":"458","severity":1,"message":"505","line":2,"column":47,"nodeType":"460","messageId":"461","endLine":2,"endColumn":58},{"ruleId":"458","severity":1,"message":"506","line":2,"column":60,"nodeType":"460","messageId":"461","endLine":2,"endColumn":73},{"ruleId":"458","severity":1,"message":"499","line":4,"column":25,"nodeType":"460","messageId":"461","endLine":4,"endColumn":43},{"ruleId":"458","severity":1,"message":"507","line":7,"column":8,"nodeType":"460","messageId":"461","endLine":7,"endColumn":12},{"ruleId":"468","severity":1,"message":"508","line":32,"column":8,"nodeType":"470","endLine":32,"endColumn":10,"suggestions":"509"},{"ruleId":"468","severity":1,"message":"502","line":50,"column":8,"nodeType":"470","endLine":50,"endColumn":16,"suggestions":"510"},{"ruleId":"458","severity":1,"message":"511","line":2,"column":8,"nodeType":"460","messageId":"461","endLine":2,"endColumn":15},{"ruleId":"458","severity":1,"message":"483","line":2,"column":10,"nodeType":"460","messageId":"461","endLine":2,"endColumn":16},{"ruleId":"458","severity":1,"message":"512","line":2,"column":52,"nodeType":"460","messageId":"461","endLine":2,"endColumn":57},{"ruleId":"458","severity":1,"message":"513","line":12,"column":10,"nodeType":"460","messageId":"461","endLine":12,"endColumn":22},{"ruleId":"458","severity":1,"message":"467","line":19,"column":11,"nodeType":"460","messageId":"461","endLine":19,"endColumn":17},{"ruleId":"458","severity":1,"message":"473","line":20,"column":16,"nodeType":"460","messageId":"461","endLine":20,"endColumn":20},{"ruleId":"468","severity":1,"message":"474","line":44,"column":8,"nodeType":"470","endLine":44,"endColumn":19,"suggestions":"514"},{"ruleId":"458","severity":1,"message":"473","line":37,"column":16,"nodeType":"460","messageId":"461","endLine":37,"endColumn":20},{"ruleId":"468","severity":1,"message":"515","line":60,"column":8,"nodeType":"470","endLine":60,"endColumn":25,"suggestions":"516"},{"ruleId":"458","severity":1,"message":"495","line":3,"column":43,"nodeType":"460","messageId":"461","endLine":3,"endColumn":62},{"ruleId":"458","severity":1,"message":"499","line":3,"column":64,"nodeType":"460","messageId":"461","endLine":3,"endColumn":82},{"ruleId":"458","severity":1,"message":"496","line":4,"column":50,"nodeType":"460","messageId":"461","endLine":4,"endColumn":54},{"ruleId":"468","severity":1,"message":"517","line":30,"column":8,"nodeType":"470","endLine":30,"endColumn":20,"suggestions":"518"},{"ruleId":"468","severity":1,"message":"519","line":45,"column":8,"nodeType":"470","endLine":45,"endColumn":15,"suggestions":"520"},{"ruleId":"476","severity":1,"message":"477","line":81,"column":42,"nodeType":"478","messageId":"466","endLine":81,"endColumn":44},{"ruleId":"458","severity":1,"message":"521","line":4,"column":10,"nodeType":"460","messageId":"461","endLine":4,"endColumn":27},{"ruleId":"458","severity":1,"message":"473","line":18,"column":16,"nodeType":"460","messageId":"461","endLine":18,"endColumn":20},{"ruleId":"458","severity":1,"message":"467","line":15,"column":11,"nodeType":"460","messageId":"461","endLine":15,"endColumn":17},{"ruleId":"458","severity":1,"message":"473","line":16,"column":16,"nodeType":"460","messageId":"461","endLine":16,"endColumn":20},{"ruleId":"468","severity":1,"message":"522","line":25,"column":8,"nodeType":"470","endLine":25,"endColumn":10,"suggestions":"523"},{"ruleId":"458","severity":1,"message":"473","line":15,"column":16,"nodeType":"460","messageId":"461","endLine":15,"endColumn":20},{"ruleId":"458","severity":1,"message":"467","line":16,"column":11,"nodeType":"460","messageId":"461","endLine":16,"endColumn":17},{"ruleId":"458","severity":1,"message":"467","line":15,"column":11,"nodeType":"460","messageId":"461","endLine":15,"endColumn":17},{"ruleId":"458","severity":1,"message":"473","line":16,"column":16,"nodeType":"460","messageId":"461","endLine":16,"endColumn":20},{"ruleId":"468","severity":1,"message":"524","line":26,"column":8,"nodeType":"470","endLine":26,"endColumn":10,"suggestions":"525"},{"ruleId":"458","severity":1,"message":"473","line":9,"column":16,"nodeType":"460","messageId":"461","endLine":9,"endColumn":20},{"ruleId":"458","severity":1,"message":"459","line":1,"column":17,"nodeType":"460","messageId":"461","endLine":1,"endColumn":26},{"ruleId":"458","severity":1,"message":"462","line":1,"column":28,"nodeType":"460","messageId":"461","endLine":1,"endColumn":36},{"ruleId":"458","severity":1,"message":"512","line":2,"column":34,"nodeType":"460","messageId":"461","endLine":2,"endColumn":39},{"ruleId":"458","severity":1,"message":"473","line":16,"column":16,"nodeType":"460","messageId":"461","endLine":16,"endColumn":20},{"ruleId":"458","severity":1,"message":"473","line":20,"column":16,"nodeType":"460","messageId":"461","endLine":20,"endColumn":20},{"ruleId":"480","severity":1,"message":"526","line":211,"column":9,"nodeType":"482","messageId":"466","endLine":211,"endColumn":16},{"ruleId":"458","severity":1,"message":"459","line":1,"column":17,"nodeType":"460","messageId":"461","endLine":1,"endColumn":26},{"ruleId":"458","severity":1,"message":"462","line":1,"column":28,"nodeType":"460","messageId":"461","endLine":1,"endColumn":36},{"ruleId":"458","severity":1,"message":"527","line":2,"column":28,"nodeType":"460","messageId":"461","endLine":2,"endColumn":42},{"ruleId":"458","severity":1,"message":"528","line":13,"column":11,"nodeType":"460","messageId":"461","endLine":13,"endColumn":18},{"ruleId":"458","severity":1,"message":"529","line":15,"column":11,"nodeType":"460","messageId":"461","endLine":15,"endColumn":16},{"ruleId":"458","severity":1,"message":"530","line":16,"column":11,"nodeType":"460","messageId":"461","endLine":16,"endColumn":18},{"ruleId":"458","severity":1,"message":"467","line":17,"column":11,"nodeType":"460","messageId":"461","endLine":17,"endColumn":17},{"ruleId":"458","severity":1,"message":"531","line":20,"column":19,"nodeType":"460","messageId":"461","endLine":20,"endColumn":22},{"ruleId":"458","severity":1,"message":"532","line":4,"column":10,"nodeType":"460","messageId":"461","endLine":4,"endColumn":19},{"ruleId":"458","severity":1,"message":"533","line":5,"column":10,"nodeType":"460","messageId":"461","endLine":5,"endColumn":24},{"ruleId":"458","severity":1,"message":"473","line":54,"column":16,"nodeType":"460","messageId":"461","endLine":54,"endColumn":20},{"ruleId":"468","severity":1,"message":"534","line":76,"column":8,"nodeType":"470","endLine":76,"endColumn":25,"suggestions":"535"},{"ruleId":"458","severity":1,"message":"536","line":1,"column":10,"nodeType":"460","messageId":"461","endLine":1,"endColumn":21},{"ruleId":"458","severity":1,"message":"537","line":5,"column":10,"nodeType":"460","messageId":"461","endLine":5,"endColumn":27},{"ruleId":"458","severity":1,"message":"538","line":6,"column":10,"nodeType":"460","messageId":"461","endLine":6,"endColumn":23},{"ruleId":"458","severity":1,"message":"528","line":11,"column":11,"nodeType":"460","messageId":"461","endLine":11,"endColumn":18},{"ruleId":"458","severity":1,"message":"529","line":13,"column":11,"nodeType":"460","messageId":"461","endLine":13,"endColumn":16},{"ruleId":"458","severity":1,"message":"462","line":1,"column":17,"nodeType":"460","messageId":"461","endLine":1,"endColumn":25},{"ruleId":"458","severity":1,"message":"483","line":2,"column":22,"nodeType":"460","messageId":"461","endLine":2,"endColumn":28},{"ruleId":"458","severity":1,"message":"467","line":12,"column":11,"nodeType":"460","messageId":"461","endLine":12,"endColumn":17},{"ruleId":"458","severity":1,"message":"539","line":13,"column":13,"nodeType":"460","messageId":"461","endLine":13,"endColumn":14},{"ruleId":"458","severity":1,"message":"473","line":13,"column":16,"nodeType":"460","messageId":"461","endLine":13,"endColumn":20},{"ruleId":"458","severity":1,"message":"473","line":15,"column":16,"nodeType":"460","messageId":"461","endLine":15,"endColumn":20},{"ruleId":"540","severity":1,"message":"541","line":34,"column":68,"nodeType":"542","endLine":34,"endColumn":92},{"ruleId":"458","severity":1,"message":"543","line":3,"column":10,"nodeType":"460","messageId":"461","endLine":3,"endColumn":20},{"ruleId":"458","severity":1,"message":"544","line":2,"column":43,"nodeType":"460","messageId":"461","endLine":2,"endColumn":47},{"ruleId":"458","severity":1,"message":"545","line":2,"column":49,"nodeType":"460","messageId":"461","endLine":2,"endColumn":57},{"ruleId":"458","severity":1,"message":"546","line":2,"column":59,"nodeType":"460","messageId":"461","endLine":2,"endColumn":69},{"ruleId":"458","severity":1,"message":"547","line":2,"column":71,"nodeType":"460","messageId":"461","endLine":2,"endColumn":78},{"ruleId":"458","severity":1,"message":"548","line":8,"column":10,"nodeType":"460","messageId":"461","endLine":8,"endColumn":30},{"ruleId":"458","severity":1,"message":"536","line":8,"column":32,"nodeType":"460","messageId":"461","endLine":8,"endColumn":43},{"ruleId":"458","severity":1,"message":"549","line":12,"column":10,"nodeType":"460","messageId":"461","endLine":12,"endColumn":22},{"ruleId":"458","severity":1,"message":"550","line":20,"column":10,"nodeType":"460","messageId":"461","endLine":20,"endColumn":36},{"ruleId":"458","severity":1,"message":"529","line":28,"column":11,"nodeType":"460","messageId":"461","endLine":28,"endColumn":16},{"ruleId":"458","severity":1,"message":"473","line":29,"column":16,"nodeType":"460","messageId":"461","endLine":29,"endColumn":20},{"ruleId":"458","severity":1,"message":"467","line":32,"column":11,"nodeType":"460","messageId":"461","endLine":32,"endColumn":17},{"ruleId":"458","severity":1,"message":"551","line":38,"column":13,"nodeType":"460","messageId":"461","endLine":38,"endColumn":21},{"ruleId":"468","severity":1,"message":"552","line":53,"column":8,"nodeType":"470","endLine":53,"endColumn":19,"suggestions":"553"},{"ruleId":"458","severity":1,"message":"459","line":1,"column":39,"nodeType":"460","messageId":"461","endLine":1,"endColumn":48},{"ruleId":"458","severity":1,"message":"554","line":2,"column":22,"nodeType":"460","messageId":"461","endLine":2,"endColumn":27},{"ruleId":"458","severity":1,"message":"555","line":11,"column":13,"nodeType":"460","messageId":"461","endLine":11,"endColumn":20},{"ruleId":"458","severity":1,"message":"556","line":12,"column":13,"nodeType":"460","messageId":"461","endLine":12,"endColumn":27},{"ruleId":"557","severity":1,"message":"558","line":53,"column":13,"nodeType":"559","endLine":53,"endColumn":81},{"ruleId":"458","severity":1,"message":"496","line":2,"column":22,"nodeType":"460","messageId":"461","endLine":2,"endColumn":26},{"ruleId":"458","severity":1,"message":"473","line":13,"column":16,"nodeType":"460","messageId":"461","endLine":13,"endColumn":20},{"ruleId":"458","severity":1,"message":"560","line":5,"column":10,"nodeType":"460","messageId":"461","endLine":5,"endColumn":24},{"ruleId":"458","severity":1,"message":"528","line":13,"column":11,"nodeType":"460","messageId":"461","endLine":13,"endColumn":18},{"ruleId":"458","severity":1,"message":"561","line":14,"column":11,"nodeType":"460","messageId":"461","endLine":14,"endColumn":19},{"ruleId":"458","severity":1,"message":"562","line":17,"column":23,"nodeType":"460","messageId":"461","endLine":17,"endColumn":34},{"ruleId":"458","severity":1,"message":"563","line":4,"column":8,"nodeType":"460","messageId":"461","endLine":4,"endColumn":22},{"ruleId":"458","severity":1,"message":"564","line":6,"column":10,"nodeType":"460","messageId":"461","endLine":6,"endColumn":18},{"ruleId":"458","severity":1,"message":"549","line":7,"column":10,"nodeType":"460","messageId":"461","endLine":7,"endColumn":22},{"ruleId":"458","severity":1,"message":"528","line":18,"column":11,"nodeType":"460","messageId":"461","endLine":18,"endColumn":18},{"ruleId":"458","severity":1,"message":"561","line":19,"column":11,"nodeType":"460","messageId":"461","endLine":19,"endColumn":19},{"ruleId":"458","severity":1,"message":"473","line":21,"column":16,"nodeType":"460","messageId":"461","endLine":21,"endColumn":20},{"ruleId":"458","severity":1,"message":"467","line":24,"column":11,"nodeType":"460","messageId":"461","endLine":24,"endColumn":17},{"ruleId":"458","severity":1,"message":"565","line":25,"column":26,"nodeType":"460","messageId":"461","endLine":25,"endColumn":40},{"ruleId":"476","severity":1,"message":"477","line":75,"column":44,"nodeType":"478","messageId":"466","endLine":75,"endColumn":46},{"ruleId":"458","severity":1,"message":"566","line":9,"column":10,"nodeType":"460","messageId":"461","endLine":9,"endColumn":19},{"ruleId":"458","severity":1,"message":"567","line":9,"column":21,"nodeType":"460","messageId":"461","endLine":9,"endColumn":41},{"ruleId":"458","severity":1,"message":"473","line":19,"column":16,"nodeType":"460","messageId":"461","endLine":19,"endColumn":20},{"ruleId":"468","severity":1,"message":"568","line":36,"column":8,"nodeType":"470","endLine":36,"endColumn":19,"suggestions":"569"},{"ruleId":"468","severity":1,"message":"488","line":53,"column":8,"nodeType":"470","endLine":53,"endColumn":18,"suggestions":"570"},{"ruleId":"458","severity":1,"message":"462","line":1,"column":17,"nodeType":"460","messageId":"461","endLine":1,"endColumn":25},{"ruleId":"458","severity":1,"message":"459","line":1,"column":39,"nodeType":"460","messageId":"461","endLine":1,"endColumn":48},{"ruleId":"458","severity":1,"message":"571","line":21,"column":13,"nodeType":"460","messageId":"461","endLine":21,"endColumn":17},{"ruleId":"458","severity":1,"message":"467","line":22,"column":11,"nodeType":"460","messageId":"461","endLine":22,"endColumn":17},{"ruleId":"458","severity":1,"message":"539","line":23,"column":13,"nodeType":"460","messageId":"461","endLine":23,"endColumn":14},{"ruleId":"458","severity":1,"message":"473","line":23,"column":16,"nodeType":"460","messageId":"461","endLine":23,"endColumn":20},{"ruleId":"458","severity":1,"message":"547","line":2,"column":38,"nodeType":"460","messageId":"461","endLine":2,"endColumn":45},{"ruleId":"458","severity":1,"message":"513","line":7,"column":10,"nodeType":"460","messageId":"461","endLine":7,"endColumn":22},{"ruleId":"458","severity":1,"message":"467","line":12,"column":11,"nodeType":"460","messageId":"461","endLine":12,"endColumn":17},{"ruleId":"458","severity":1,"message":"473","line":15,"column":16,"nodeType":"460","messageId":"461","endLine":15,"endColumn":20},{"ruleId":"458","severity":1,"message":"572","line":3,"column":127,"nodeType":"460","messageId":"461","endLine":3,"endColumn":132},{"ruleId":"458","severity":1,"message":"573","line":8,"column":10,"nodeType":"460","messageId":"461","endLine":8,"endColumn":18},{"ruleId":"458","severity":1,"message":"484","line":22,"column":13,"nodeType":"460","messageId":"461","endLine":22,"endColumn":17},{"ruleId":"458","severity":1,"message":"467","line":23,"column":11,"nodeType":"460","messageId":"461","endLine":23,"endColumn":17},{"ruleId":"458","severity":1,"message":"473","line":24,"column":16,"nodeType":"460","messageId":"461","endLine":24,"endColumn":20},{"ruleId":"458","severity":1,"message":"574","line":25,"column":19,"nodeType":"460","messageId":"461","endLine":25,"endColumn":26},{"ruleId":"480","severity":1,"message":"575","line":385,"column":49,"nodeType":"482","messageId":"466","endLine":385,"endColumn":56},{"ruleId":"480","severity":1,"message":"576","line":889,"column":9,"nodeType":"482","messageId":"466","endLine":889,"endColumn":15},{"ruleId":"458","severity":1,"message":"577","line":1,"column":8,"nodeType":"460","messageId":"461","endLine":1,"endColumn":16},{"ruleId":"458","severity":1,"message":"572","line":3,"column":127,"nodeType":"460","messageId":"461","endLine":3,"endColumn":132},{"ruleId":"458","severity":1,"message":"578","line":3,"column":142,"nodeType":"460","messageId":"461","endLine":3,"endColumn":152},{"ruleId":"458","severity":1,"message":"579","line":3,"column":154,"nodeType":"460","messageId":"461","endLine":3,"endColumn":170},{"ruleId":"458","severity":1,"message":"580","line":3,"column":172,"nodeType":"460","messageId":"461","endLine":3,"endColumn":177},{"ruleId":"458","severity":1,"message":"581","line":4,"column":10,"nodeType":"460","messageId":"461","endLine":4,"endColumn":20},{"ruleId":"458","severity":1,"message":"582","line":4,"column":22,"nodeType":"460","messageId":"461","endLine":4,"endColumn":45},{"ruleId":"458","severity":1,"message":"583","line":5,"column":8,"nodeType":"460","messageId":"461","endLine":5,"endColumn":20},{"ruleId":"458","severity":1,"message":"573","line":8,"column":10,"nodeType":"460","messageId":"461","endLine":8,"endColumn":18},{"ruleId":"458","severity":1,"message":"467","line":24,"column":11,"nodeType":"460","messageId":"461","endLine":24,"endColumn":17},{"ruleId":"458","severity":1,"message":"473","line":25,"column":16,"nodeType":"460","messageId":"461","endLine":25,"endColumn":20},{"ruleId":"458","severity":1,"message":"574","line":26,"column":19,"nodeType":"460","messageId":"461","endLine":26,"endColumn":26},{"ruleId":"468","severity":1,"message":"584","line":69,"column":8,"nodeType":"470","endLine":69,"endColumn":10,"suggestions":"585"},{"ruleId":"458","severity":1,"message":"586","line":141,"column":11,"nodeType":"460","messageId":"461","endLine":141,"endColumn":31},{"ruleId":"458","severity":1,"message":"587","line":147,"column":11,"nodeType":"460","messageId":"461","endLine":147,"endColumn":32},{"ruleId":"480","severity":1,"message":"576","line":600,"column":9,"nodeType":"482","messageId":"466","endLine":600,"endColumn":15},{"ruleId":"458","severity":1,"message":"467","line":15,"column":11,"nodeType":"460","messageId":"461","endLine":15,"endColumn":17},{"ruleId":"458","severity":1,"message":"473","line":16,"column":16,"nodeType":"460","messageId":"461","endLine":16,"endColumn":20},{"ruleId":"468","severity":1,"message":"588","line":28,"column":8,"nodeType":"470","endLine":28,"endColumn":10,"suggestions":"589"},{"ruleId":"458","severity":1,"message":"574","line":18,"column":19,"nodeType":"460","messageId":"461","endLine":18,"endColumn":26},{"ruleId":"458","severity":1,"message":"467","line":19,"column":11,"nodeType":"460","messageId":"461","endLine":19,"endColumn":17},{"ruleId":"458","severity":1,"message":"473","line":20,"column":16,"nodeType":"460","messageId":"461","endLine":20,"endColumn":20},{"ruleId":"468","severity":1,"message":"590","line":60,"column":7,"nodeType":"470","endLine":60,"endColumn":9,"suggestions":"591"},"no-native-reassign",["592"],"no-negated-in-lhs",["593"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'downSm' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkUserAuthentication'. Either include it or remove the dependency array.","ArrayExpression",["594"],["595"],"'i18n' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'location.search'. Either include it or remove the dependency array.",["596"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'UpdateOwner' is defined but never used.","no-dupe-keys","Duplicate key 'background'.","ObjectExpression","'Button' is defined but never used.","'auth' is assigned a value but never used.","'SearchRoundedIcon' is defined but never used.","'FilterByMultiSelect' is defined but never used.","'TransferWithinAStationRoundedIcon' is defined but never used.","React Hook useEffect has missing dependencies: 'history', 'location.pathname', and 'location.search'. Either include them or remove the dependency array.",["597"],"no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["598","599"],"'queryParamsToObject' is defined but never used.","'Grid' is defined but never used.","React Hook useEffect has missing dependencies: 'filterField', 'handleSearch', and 'query'. Either include them or remove the dependency array.",["600"],"'specialStringPurge' is defined but never used.","React Hook useEffect has a missing dependency: 'optionsFunc'. Either include it or remove the dependency array. If 'optionsFunc' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["601"],"React Hook useEffect has missing dependencies: 'filterField', 'history', 'location.pathname', 'location.search', and 'query'. Either include them or remove the dependency array.",["602"],"'ClickAwayListener' is defined but never used.","'FormControl' is defined but never used.","'OutlinedInput' is defined but never used.","'clsx' is defined but never used.","React Hook useEffect has missing dependencies: 'filterField', 'optionsFunc', and 'query'. Either include them or remove the dependency array. If 'optionsFunc' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["603"],["604"],"'Backend' is defined but never used.","'Paper' is defined but never used.","'UpsertSystem' is defined but never used.",["605"],"React Hook useEffect has a missing dependency: 'query.asset'. Either include it or remove the dependency array.",["606"],"React Hook useEffect has a missing dependency: 'handleSearch'. Either include it or remove the dependency array.",["607"],"React Hook useEffect has missing dependencies: 'filterField', 'history', 'location.pathname', and 'location.search'. Either include them or remove the dependency array.",["608"],"'UpdateSystemOwner' is defined but never used.","React Hook useEffect has a missing dependency: 'currentOwner._id'. Either include it or remove the dependency array. If 'setUserList' needs the current value of 'currentOwner._id', you can also switch to useReducer instead of useState and read 'currentOwner._id' in the reducer.",["609"],"React Hook useEffect has a missing dependency: 'linkedUsers'. Either include it or remove the dependency array.",["610"],"Duplicate key 'padding'.","'LinearProgress' is defined but never used.","'history' is assigned a value but never used.","'query' is assigned a value but never used.","'classes' is assigned a value but never used.","'url' is assigned a value but never used.","'SearchBox' is defined but never used.","'FilterBySelect' is defined but never used.","React Hook useEffect has missing dependencies: 'history', 'location.pathname', and 'query.asset'. Either include them or remove the dependency array.",["611"],"'ImageSearch' is defined but never used.","'getSystemsByAsset' is defined but never used.","'addQueryParam' is defined but never used.","'t' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'makeStyles' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'IconButton' is defined but never used.","'Tooltip' is defined but never used.","'CheckBoxOutlineBlank' is defined but never used.","'ClearRounded' is defined but never used.","'updateSystemAdditionalData' is defined but never used.","'notExist' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'faultId' and 'fid'. Either include them or remove the dependency array.",["612"],"'Slide' is defined but never used.","'slideIn' is assigned a value but never used.","'slideDirection' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useTranslation' is defined but never used.","'location' is assigned a value but never used.","'setUserList' is assigned a value but never used.","'AddRoundedIcon' is defined but never used.","'UserItem' is defined but never used.","'setCommentList' is assigned a value but never used.","'getFaults' is defined but never used.","'getFaultsQueryParams' is defined but never used.","React Hook useEffect has a missing dependency: 'query'. Either include it or remove the dependency array.",["613"],["614"],"'lang' is assigned a value but never used.","'Input' is defined but never used.","'CheckBox' is defined but never used.","'setMode' is assigned a value but never used.","Duplicate key 'classes'.","Duplicate key 'margin'.","'heLocale' is defined but never used.","'RadioGroup' is defined but never used.","'FormControlLabel' is defined but never used.","'Radio' is defined but never used.","'DatePicker' is defined but never used.","'MuiPickersUtilsProvider' is defined but never used.","'DateFnsUtils' is defined but never used.","React Hook useEffect has a missing dependency: 'faultId'. Either include it or remove the dependency array.",["615"],"'handleChangeMultiple' is assigned a value but never used.","'handleFollowingRemove' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'currentOwner'. Either include it or remove the dependency array.",["616"],"React Hook useEffect has a missing dependency: 'assetId'. Either include it or remove the dependency array.",["617"],"no-global-assign","no-unsafe-negation",{"desc":"618","fix":"619"},{"desc":"618","fix":"620"},{"desc":"621","fix":"622"},{"desc":"623","fix":"624"},{"messageId":"625","fix":"626","desc":"627"},{"messageId":"628","fix":"629","desc":"630"},{"desc":"631","fix":"632"},{"desc":"633","fix":"634"},{"desc":"635","fix":"636"},{"desc":"637","fix":"638"},{"desc":"639","fix":"640"},{"desc":"621","fix":"641"},{"desc":"642","fix":"643"},{"desc":"644","fix":"645"},{"desc":"646","fix":"647"},{"desc":"648","fix":"649"},{"desc":"650","fix":"651"},{"desc":"652","fix":"653"},{"desc":"654","fix":"655"},{"desc":"656","fix":"657"},{"desc":"658","fix":"659"},{"desc":"660","fix":"661"},{"desc":"662","fix":"663"},{"desc":"664","fix":"665"},"Update the dependencies array to be: [checkUserAuthentication]",{"range":"666","text":"667"},{"range":"668","text":"667"},"Update the dependencies array to be: [isLoading, location.search]",{"range":"669","text":"670"},"Update the dependencies array to be: [history, location.pathname, location.search, values]",{"range":"671","text":"672"},"removeEscape",{"range":"673","text":"674"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"675","text":"676"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [filterField, handleSearch, query, searchText]",{"range":"677","text":"678"},"Update the dependencies array to be: [optionsFunc]",{"range":"679","text":"680"},"Update the dependencies array to be: [filterField, history, location.pathname, location.search, query, value]",{"range":"681","text":"682"},"Update the dependencies array to be: [filterField, optionsFunc, query]",{"range":"683","text":"684"},"Update the dependencies array to be: [filterField, history, location.pathname, location.search, query, values]",{"range":"685","text":"686"},{"range":"687","text":"670"},"Update the dependencies array to be: [location.search, query.asset]",{"range":"688","text":"689"},"Update the dependencies array to be: [handleSearch, searchText]",{"range":"690","text":"691"},"Update the dependencies array to be: [filterField, history, location.pathname, location.search, value]",{"range":"692","text":"693"},"Update the dependencies array to be: [currentOwner._id]",{"range":"694","text":"695"},"Update the dependencies array to be: [linkedUsers]",{"range":"696","text":"697"},"Update the dependencies array to be: [history, location.pathname, location.search, query.asset]",{"range":"698","text":"699"},"Update the dependencies array to be: [faultId, fid, isLoading]",{"range":"700","text":"701"},"Update the dependencies array to be: [isLoading, query]",{"range":"702","text":"703"},"Update the dependencies array to be: [history, location.pathname, location.search, viewType]",{"range":"704","text":"705"},"Update the dependencies array to be: [faultId]",{"range":"706","text":"707"},"Update the dependencies array to be: [currentOwner]",{"range":"708","text":"709"},"Update the dependencies array to be: [assetId]",{"range":"710","text":"711"},[1060,1062],"[checkUserAuthentication]",[1038,1040],[1320,1331],"[isLoading, location.search]",[1451,1459],"[history, location.pathname, location.search, values]",[1522,1523],"",[1522,1522],"\\",[1105,1117],"[filterField, handleSearch, query, searchText]",[1096,1098],"[optionsFunc]",[1571,1578],"[filterField, history, location.pathname, location.search, query, value]",[1442,1444],"[filterField, optionsFunc, query]",[1971,1979],"[filterField, history, location.pathname, location.search, query, values]",[1597,1608],[2096,2113],"[location.search, query.asset]",[1527,1539],"[handleSearch, searchText]",[1986,1993],"[filterField, history, location.pathname, location.search, value]",[1061,1063],"[currentOwner._id]",[1105,1107],"[linkedUsers]",[2822,2839],"[history, location.pathname, location.search, query.asset]",[2271,2282],"[faultId, fid, isLoading]",[1392,1403],"[isLoading, query]",[1897,1907],"[history, location.pathname, location.search, viewType]",[2751,2753],"[faultId]",[1167,1169],"[currentOwner]",[2120,2122],"[assetId]"]