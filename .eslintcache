[{"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\index.js":"1","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\App.js":"2","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\authContext.js":"3","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\themes\\theme.js":"4","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\workspace\\Workspace.js":"5","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\workspace\\ProtectedWorkspace.js":"6","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\routes\\InitialRouter.js":"7","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\user\\Login.js":"8","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\userApi.js":"9","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\Controls.js":"10","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\Navbar.js":"11","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\SideMenu.js":"12","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\AddMenu.js":"13","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\Assets.js":"14","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\assetsApi.js":"15","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\Asset.js":"16","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\user\\UserItem.js":"17","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\AssetsControls.js":"18","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\AssetControls.js":"19","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\SortBy.js":"20","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\FiltersContext.js":"21","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\AuthContext.js":"22","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\genericApi.js":"23","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\customHooks\\useQuery.js":"24","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\SearchBox.js":"25","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\FilterBySelect.js":"26","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\FilterByMultiSelect.js":"27","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\LanguageContext.js":"28","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\i18n.js":"29","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\Systems.js":"30","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemsControls.js":"31","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\SearchBoxSelect.js":"32","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\systemsApi.js":"33","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\System.js":"34","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemName.js":"35","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\AddLinkedUser.js":"36","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemsHeader.js":"37","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemControls.js":"38","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemLinkedUsers.js":"39","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\Faults.js":"40","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultsControls.js":"41","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\faultsApi.js":"42","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultListView.js":"43","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultMinified.js":"44","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\StatusTag.js":"45","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultLink.js":"46","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultView.js":"47","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\Carousel.js":"48","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultViewControls.js":"49","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\UserList.js":"50","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\CommentSection.js":"51","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultViews.js":"52","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\CreateContainer.js":"53","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemAdditionalDetails.js":"54","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\UpsertSystem.js":"55","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\UpsertFault.js":"56","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\UpdateOwner.js":"57","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\UpsertAsset.js":"58","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\AddFollower.js":"59","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\AlertDialog.js":"60","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\UpdateStatus.js":"61","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultBlockView.js":"62","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\FaultsContext.js":"63","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultBlock.js":"64","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\UpsertTask.js":"65","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\tasksApi.js":"66","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\TaskSteps.js":"67","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\Tasks.js":"68","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\TasksList.js":"69","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\TaskView.js":"70","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\TaskMinified.js":"71","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\ItemLink.js":"72","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\TimeActive.js":"73","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\TaskViewControls.js":"74","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\TasksControls.js":"75","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\scheduler\\Scheduler.js":"76","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\scheduler\\ScheduleItem.js":"77","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\datepickers\\CustomDateTimePicker.js":"78","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\datepickers\\CustomTimePicker.js":"79","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\scheduler\\DayOfWeek.js":"80"},{"size":569,"mtime":1612721733308,"results":"81","hashOfConfig":"82"},{"size":1652,"mtime":1612719602814,"results":"83","hashOfConfig":"82"},{"size":457,"mtime":1612222036105,"results":"84","hashOfConfig":"82"},{"size":2206,"mtime":1615962163898,"results":"85","hashOfConfig":"82"},{"size":3083,"mtime":1615909095525,"results":"86","hashOfConfig":"82"},{"size":1455,"mtime":1615321776971,"results":"87","hashOfConfig":"82"},{"size":1448,"mtime":1612592795916,"results":"88","hashOfConfig":"82"},{"size":9718,"mtime":1612221364508,"results":"89","hashOfConfig":"82"},{"size":2557,"mtime":1613880846308,"results":"90","hashOfConfig":"82"},{"size":2216,"mtime":1615507197102,"results":"91","hashOfConfig":"82"},{"size":5163,"mtime":1615504683964,"results":"92","hashOfConfig":"82"},{"size":7538,"mtime":1615146699014,"results":"93","hashOfConfig":"82"},{"size":5739,"mtime":1615264239597,"results":"94","hashOfConfig":"82"},{"size":3607,"mtime":1614379036632,"results":"95","hashOfConfig":"82"},{"size":3970,"mtime":1615321825927,"results":"96","hashOfConfig":"82"},{"size":13344,"mtime":1615146717032,"results":"97","hashOfConfig":"82"},{"size":3284,"mtime":1615418509259,"results":"98","hashOfConfig":"82"},{"size":4604,"mtime":1613282044486,"results":"99","hashOfConfig":"82"},{"size":1910,"mtime":1614315481710,"results":"100","hashOfConfig":"82"},{"size":5216,"mtime":1613281720174,"results":"101","hashOfConfig":"82"},{"size":463,"mtime":1615321663340,"results":"102","hashOfConfig":"82"},{"size":457,"mtime":1612222036105,"results":"103","hashOfConfig":"82"},{"size":4818,"mtime":1615954589256,"results":"104","hashOfConfig":"82"},{"size":164,"mtime":1612245702093,"results":"105","hashOfConfig":"82"},{"size":3685,"mtime":1613353209720,"results":"106","hashOfConfig":"82"},{"size":6761,"mtime":1615321550119,"results":"107","hashOfConfig":"82"},{"size":8707,"mtime":1615321565082,"results":"108","hashOfConfig":"82"},{"size":666,"mtime":1615999173838,"results":"109","hashOfConfig":"82"},{"size":699,"mtime":1615321533737,"results":"110","hashOfConfig":"82"},{"size":3489,"mtime":1615323853923,"results":"111","hashOfConfig":"82"},{"size":5612,"mtime":1614317588999,"results":"112","hashOfConfig":"82"},{"size":8024,"mtime":1615323030893,"results":"113","hashOfConfig":"82"},{"size":4983,"mtime":1615783220782,"results":"114","hashOfConfig":"82"},{"size":8672,"mtime":1615866957443,"results":"115","hashOfConfig":"82"},{"size":5213,"mtime":1612941646899,"results":"116","hashOfConfig":"82"},{"size":7680,"mtime":1615334003502,"results":"117","hashOfConfig":"82"},{"size":2790,"mtime":1613954845212,"results":"118","hashOfConfig":"82"},{"size":5352,"mtime":1615867000701,"results":"119","hashOfConfig":"82"},{"size":8059,"mtime":1615147028522,"results":"120","hashOfConfig":"82"},{"size":669,"mtime":1615323273680,"results":"121","hashOfConfig":"82"},{"size":8273,"mtime":1615783261818,"results":"122","hashOfConfig":"82"},{"size":5641,"mtime":1615783216365,"results":"123","hashOfConfig":"82"},{"size":3651,"mtime":1615742705395,"results":"124","hashOfConfig":"82"},{"size":2598,"mtime":1615743796783,"results":"125","hashOfConfig":"82"},{"size":2282,"mtime":1615420409909,"results":"126","hashOfConfig":"82"},{"size":531,"mtime":1614989032934,"results":"127","hashOfConfig":"82"},{"size":13875,"mtime":1615853937967,"results":"128","hashOfConfig":"82"},{"size":7651,"mtime":1614357220658,"results":"129","hashOfConfig":"82"},{"size":2523,"mtime":1615740542832,"results":"130","hashOfConfig":"82"},{"size":5882,"mtime":1615748491859,"results":"131","hashOfConfig":"82"},{"size":12308,"mtime":1615333603787,"results":"132","hashOfConfig":"82"},{"size":3265,"mtime":1615333254231,"results":"133","hashOfConfig":"82"},{"size":2995,"mtime":1615744139637,"results":"134","hashOfConfig":"82"},{"size":16098,"mtime":1614052542930,"results":"135","hashOfConfig":"82"},{"size":52524,"mtime":1615938891358,"results":"136","hashOfConfig":"82"},{"size":33817,"mtime":1615471974958,"results":"137","hashOfConfig":"82"},{"size":7826,"mtime":1615334026849,"results":"138","hashOfConfig":"82"},{"size":22309,"mtime":1615471981368,"results":"139","hashOfConfig":"82"},{"size":7789,"mtime":1615333976609,"results":"140","hashOfConfig":"82"},{"size":3226,"mtime":1614380845240,"results":"141","hashOfConfig":"82"},{"size":7931,"mtime":1615347003423,"results":"142","hashOfConfig":"82"},{"size":2648,"mtime":1615420405961,"results":"143","hashOfConfig":"82"},{"size":372,"mtime":1615321404995,"results":"144","hashOfConfig":"82"},{"size":940,"mtime":1615145318433,"results":"145","hashOfConfig":"82"},{"size":41181,"mtime":1615954049030,"results":"146","hashOfConfig":"82"},{"size":5351,"mtime":1615838351007,"results":"147","hashOfConfig":"82"},{"size":4909,"mtime":1615941061458,"results":"148","hashOfConfig":"82"},{"size":661,"mtime":1615410729805,"results":"149","hashOfConfig":"82"},{"size":1935,"mtime":1615845887519,"results":"150","hashOfConfig":"82"},{"size":13829,"mtime":1615954021113,"results":"151","hashOfConfig":"82"},{"size":5278,"mtime":1615853700570,"results":"152","hashOfConfig":"82"},{"size":398,"mtime":1615508958584,"results":"153","hashOfConfig":"82"},{"size":1011,"mtime":1615599052948,"results":"154","hashOfConfig":"82"},{"size":5029,"mtime":1615952515138,"results":"155","hashOfConfig":"82"},{"size":5329,"mtime":1615783398216,"results":"156","hashOfConfig":"82"},{"size":5368,"mtime":1615998119820,"results":"157","hashOfConfig":"82"},{"size":8106,"mtime":1616001633584,"results":"158","hashOfConfig":"82"},{"size":1137,"mtime":1615962286107,"results":"159","hashOfConfig":"82"},{"size":1174,"mtime":1615962255157,"results":"160","hashOfConfig":"82"},{"size":893,"mtime":1616001623687,"results":"161","hashOfConfig":"82"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},"2s6085",{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"164"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"164"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"164"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"164"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"164"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"164"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"164"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"164"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"164"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"164"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"164"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"164"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"164"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"164"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"164"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"244","messages":"245","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"246","messages":"247","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"164"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"164"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"164"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"257","messages":"258","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"164"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"264","messages":"265","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"266","messages":"267","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"268","messages":"269","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"270","messages":"271","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"164"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"164"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"278","messages":"279","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"164"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"283","messages":"284","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"285","messages":"286","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"164"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"164"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"293","messages":"294","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"164"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"298","messages":"299","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"164"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"164"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"164"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"164"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"164"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"164"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"164"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"325","messages":"326","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"327","messages":"328","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"333","messages":"334","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"341","messages":"342","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"343","messages":"344","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"345","messages":"346","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"347","messages":"348","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"349","messages":"350","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"164"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"164"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\index.js",[],["357","358"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\App.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\authContext.js",["359"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\themes\\theme.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\workspace\\Workspace.js",["360"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\workspace\\ProtectedWorkspace.js",["361"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { AuthContext } from '../../context/AuthContext';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { authenticate, handleLS } from '../../api/userApi';\r\n\r\nexport const ProtectedWorkspace = ({ children, isAuthenticated,...rest}) => {\r\n    \r\n    const { auth, setAuth } = useContext(AuthContext);\r\n    const [ isLoading, setIsLoading ] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const checkUserAuthentication = async () => {\r\n            let token = await handleLS('wb_token', 'get');\r\n            if (!token) {\r\n                setIsLoading(false);\r\n                return;\r\n            };\r\n            let res = await authenticate(token);\r\n            if (res.auth) {\r\n               setAuth({\r\n                    isAuth: res.auth,\r\n                    user: res.user,\r\n                    token: res.token.token,\r\n                    refreshToken: res.token.refreshToken\r\n                });\r\n                  \r\n            }\r\n            setIsLoading(false);\r\n            return;\r\n        }\r\n        checkUserAuthentication();\r\n    }, []);\r\n\r\n    return (\r\n        <Route {...rest}\r\n          render={() => isLoading ? \r\n            'loading' : \r\n            auth.isAuth\r\n            ? children\r\n            :   <Redirect\r\n                    to={{\r\n                    pathname: \"/login\"\r\n                }}/>\r\n            }      \r\n        />\r\n      );\r\n}\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\routes\\InitialRouter.js",["362"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { AuthContext } from '../../context/AuthContext';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { authenticate, handleLS } from '../../api/userApi';\r\n\r\nexport const InitialRouter = ({...rest}) => {\r\n    \r\n    const { auth, setAuth } = useContext(AuthContext);\r\n    const [ isLoading, setIsLoading ] = useState(true);\r\n\r\n    const checkUserAuthentication = async () => {\r\n        let token = await handleLS('wb_token', 'get');\r\n        if (!token) {\r\n            setIsLoading(false);\r\n            return;\r\n        };\r\n        let res = await authenticate(token);\r\n        \r\n        if (res.auth) {\r\n           setAuth({\r\n                isAuth: res.auth,\r\n                user: res.user,\r\n                token: res.token.token,\r\n                refreshToken: res.token.refreshToken\r\n            });\r\n              \r\n        }\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n    useEffect(() => {\r\n        checkUserAuthentication();\r\n    }, []);\r\n\r\n    return (\r\n        <Route {...rest}\r\n          render={() => isLoading ? \r\n            'loading' : \r\n            auth.isAuth\r\n            ? <Redirect\r\n                to={{\r\n                    pathname: \"/workspace\"\r\n            }}/> \r\n            :   <Redirect\r\n                    to={{\r\n                    pathname: \"/login\"\r\n                }}/>\r\n            }      \r\n        />\r\n      );\r\n}\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\user\\Login.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\userApi.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\Controls.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\Navbar.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\SideMenu.js",["363"],"import React, { useContext } from 'react'\r\nimport { makeStyles, List, ListItem, ListItemIcon, ListItemText, Grow, ClickAwayListener, useMediaQuery } from '@material-ui/core'\r\nimport BusinessRoundedIcon from '@material-ui/icons/BusinessRounded';\r\nimport AssignmentRoundedIcon from '@material-ui/icons/AssignmentRounded';\r\nimport WarningRoundedIcon from '@material-ui/icons/WarningRounded';\r\nimport DescriptionRoundedIcon from '@material-ui/icons/DescriptionRounded';\r\nimport BlurOnRoundedIcon from '@material-ui/icons/BlurOnRounded';\r\nimport { UserItem } from '../../user/UserItem'\r\nimport ExitToAppRoundedIcon from '@material-ui/icons/ExitToAppRounded';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport { useHistory } from 'react-router-dom'; \r\nimport { useTranslation } from 'react-i18next';\r\nimport { AuthContext } from '../../../context/AuthContext';\r\n\r\nexport const SideMenu = ({toggleMenu}) => {\r\n\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const { t, i18n } = useTranslation();\r\n    const matches = useMediaQuery(theme => theme.breakpoints.up('sm'));\r\n    const { auth } = useContext(AuthContext);\r\n\r\n    const closeMenu = () => {\r\n        if (matches) {\r\n            toggleMenu()\r\n        }\r\n    }\r\n    \r\n    const handleClick = type => event => {\r\n        toggleMenu();\r\n        history.push(`/workspace/${type}`)\r\n    }\r\n\r\n    return (\r\n        <ClickAwayListener onClickAway={closeMenu}>\r\n            <Grow in={true}>\r\n                <div className={classes.sidemenuContainer}>\r\n                    <div className={classes.userContainer}>   \r\n                        <UserItem \r\n                            showTitle\r\n                            showName\r\n                            user={auth.user}\r\n                        />\r\n                    </div>\r\n                    <List className= { classes.list}>\r\n                        <ListItem button={true} className={classes.listItem}\r\n                            onClick={handleClick('assets')}\r\n                        >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <BusinessRoundedIcon fontSize={'medium'} className={classes.icon}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"sideMenu.assets\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem button={true} className={classes.listItem}\r\n                            onClick={handleClick('systems')}\r\n                        >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <BlurOnRoundedIcon fontSize={'medium'} className={classes.icon}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"sideMenu.systems\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem button={true} className={classes.listItem}\r\n                            onClick={handleClick('tasks')}\r\n                        >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <AssignmentRoundedIcon fontSize={'medium'}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"sideMenu.myTasks\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem button={true} className={classes.listItem}\r\n                            onClick={handleClick('faults')}\r\n                        >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <WarningRoundedIcon fontSize={'medium'}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"sideMenu.faults\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem button={true} className={classes.listItem}\r\n                            onClick={handleClick('docs')}\r\n                        >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <DescriptionRoundedIcon fontSize={'medium'}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"sideMenu.documents\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                    </List>\r\n                    <List className={classes.bottomList}>\r\n                        <ListItem button={true} >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <SettingsIcon fontSize={'medium'} />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"sideMenu.settings\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem button={true} >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <ExitToAppRoundedIcon fontSize={'medium'} />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"sideMenu.logout\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                    </List>\r\n                </div>\r\n            </Grow>\r\n        </ClickAwayListener>\r\n        \r\n        \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    userContainer: {\r\n        width: '85%',\r\n        margin: '20px auto',\r\n        padding: '15px 10px',\r\n        borderRadius: '10px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        background: 'rgba(0,0,0,0.7)',\r\n        boxShadow: '0 8px 32px 0 rgb(0 0 0 / 37%)',\r\n        '&:hover' :{\r\n            background: 'black',\r\n            transition: 'background 0.2s ease',\r\n            boxShadow: '0 8px 32px 0 rgb(0 0 0 / 80%)',\r\n        }\r\n    },\r\n    sidemenuContainer: {\r\n        zIndex: 2,\r\n        width: '300px',\r\n        background: theme.palette.primary.main,\r\n        backdropFilter: 'blur(10px)',\r\n        boxShadow: 'rgba(0,0,0,0.25) 0px 0px 6px 3px',\r\n        position: 'absolute',\r\n        top: '80px',\r\n        left: '10px',\r\n        borderRadius: '10px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        [theme.breakpoints.down('sm')]: {\r\n            maxHeight: '70vh',\r\n            overflow: 'scroll'\r\n        }\r\n\r\n    },\r\n    list: {\r\n        width: '90%',\r\n        borderTop: '1px solid rgba(255,255,255,0.3)',\r\n        borderBottom: '1px solid rgba(255,255,255,0.3)',\r\n        margin: '0px auto',\r\n        padding: '20px 0'\r\n    },\r\n    listItem: {\r\n        color: 'theme.palette.primary.main',\r\n        margin: '7px auto',\r\n        borderRadius: '10px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        transition: 'background box-shadow 0.3s ease-in-out',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.6)',\r\n            transition: 'background box-shadow 0.2s ease-in-out',\r\n            boxShadow: '0 8px 32px 0 rgb(0 0 0 / 80%)',\r\n        }\r\n    }, \r\n    listItemIcon: {\r\n        color: 'white'\r\n    },\r\n    listItemText: {     \r\n        fontSize: '14px',\r\n        color: 'white'\r\n        \r\n    },\r\n    bottomList: {\r\n        padding: '10px 0'\r\n    }\r\n\r\n}));","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\AddMenu.js",["364"],"import React from 'react'\r\nimport { makeStyles, List, ListItem, ListItemIcon, ListItemText, Grow, ClickAwayListener, useMediaQuery } from '@material-ui/core'\r\nimport AddLocationOutlinedIcon from '@material-ui/icons/AddLocationOutlined';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport QueueIcon from '@material-ui/icons/Queue';\r\nimport PostAddIcon from '@material-ui/icons/PostAdd';\r\nimport NoteAddOutlinedIcon from '@material-ui/icons/NoteAddOutlined';\r\nimport BlurOnRoundedIcon from '@material-ui/icons/BlurOnRounded';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport const AddMenu = ({toggleAddMenu, toggleAdd}) => {\r\n\r\n    const classes = useStyles();\r\n    const { t, i18n } = useTranslation();\r\n    const matches = useMediaQuery(theme => theme.breakpoints.up('sm'));\r\n\r\n    const closeMenu = () => {\r\n        if (matches) {\r\n            toggleAddMenu()\r\n        }\r\n    }  \r\n\r\n    return (\r\n        <ClickAwayListener onClickAway={closeMenu}>\r\n            <Grow in={true}>\r\n                <div className={classes.addMenuContainer}>\r\n                    <List className= { classes.list}>\r\n                        <ListItem \r\n                            button={true} \r\n                            className={classes.listItem}\r\n                            onClick={toggleAdd('asset')}\r\n                        >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <AddLocationOutlinedIcon  className={classes.icon}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"createMenu.addAsset\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem \r\n                            button={true} \r\n                            className={classes.listItem}\r\n                            onClick={toggleAdd('system')}\r\n                        >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <BlurOnRoundedIcon  className={classes.icon}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"createMenu.addSystem\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem button={true} className={classes.listItem}>\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <GroupAddIcon />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"createMenu.createUser\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem \r\n                            button={true} \r\n                            className={classes.listItem}\r\n                            onClick={toggleAdd('task')}\r\n                        >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <PostAddIcon />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"createMenu.createTask\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem \r\n                            button={true} \r\n                            className={classes.listItem}\r\n                            onClick={toggleAdd('fault')}\r\n                        >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <QueueIcon />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"createMenu.createFault\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem button={true} className={classes.listItem}>\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <NoteAddOutlinedIcon />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"createMenu.addDocument\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                    </List>  \r\n                </div>\r\n            </Grow>\r\n        </ClickAwayListener>\r\n        \r\n        \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    addMenuContainer: {\r\n        zIndex: 2,\r\n        width: '240px',\r\n        background: theme.palette.primary.main,\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        backdropFilter: 'blur(10px)',\r\n        boxShadow: 'rgba(0,0,0,0.25) 0px 0px 6px 3px',\r\n        position: 'absolute',\r\n        top: '80px',\r\n        right: '2%',\r\n        borderRadius: '10px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            maxHeight: '70vh',\r\n            overflow: 'scroll'\r\n        }\r\n\r\n    },\r\n    list: {\r\n        width: '90%',\r\n        margin: '0px auto'\r\n    },\r\n    listItem: {\r\n        color: 'theme.palette.primary.main',\r\n        margin: '7px auto',\r\n        borderRadius: '10px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        transition: 'background box-shadow 0.3s ease-in-out',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.6)',\r\n            transition: 'background box-shadow 0.2s ease-in-out',\r\n            boxShadow: '0 8px 32px 0 rgb(0 0 0 / 80%)',\r\n        }\r\n    }, \r\n    listItemIcon: {\r\n        color: 'white'\r\n    },\r\n    listItemText: {     \r\n        fontSize: '14px',\r\n        color: 'white'\r\n        \r\n    },\r\n    bottomList: {\r\n        padding: '10px 0'\r\n    }\r\n\r\n}));","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\Assets.js",["365","366","367"],"import React, { useEffect, useState } from 'react'\r\nimport { Grid, LinearProgress, makeStyles } from '@material-ui/core'\r\nimport { getAssets, removeAsset,getFullAddress, applyFilters } from '../../../api/assetsApi'\r\nimport { Asset } from './Asset'\r\nimport { AssetsControls } from './AssetsControls'\r\nimport { AlertDialog } from '../../reuseables/AlertDialog'\r\nimport { queryParamsToObject } from '../../../api/genericApi';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport const Assets = () => {\r\n\r\n    const location = useLocation();\r\n    const classes = useStyles();\r\n    const { t, i18n } = useTranslation();\r\n    const [ assets, setAssets ] = useState([]);\r\n    const [ isLoading, setIsLoading ] = useState(true);\r\n    const [ alertDialog , setAlertDialog ] = useState(null)\r\n\r\n    useEffect(() => {\r\n        if(!isLoading) return;\r\n        getAssets()\r\n        .then(res => {\r\n            if (res) {\r\n                return applyFilters(queryParamsToObject(location.search), res.data)   \r\n            }\r\n        })\r\n        .then(data => {\r\n            if (data) {\r\n                setAssets(data)\r\n            }\r\n        }) \r\n        .catch(e => {\r\n            console.log(e.message)\r\n        })\r\n        .finally(() => setIsLoading(false))\r\n        \r\n    }, [isLoading])\r\n\r\n    useEffect(()=> {\r\n        setIsLoading(true)\r\n    }, [location.search])\r\n\r\n    const removeAsset = (assetId, data) => {\r\n        setAlertDialog({\r\n            handleConfirm: async () => {\r\n                const res = await removeAsset(assetId);\r\n                if (res) {\r\n                    setAlertDialog(null)\r\n                    setIsLoading(true);\r\n                } else {\r\n                    console.log(res)\r\n                }\r\n            },\r\n            handleCancel: () => setAlertDialog(null),\r\n            text: `${t(\"assetsModule.deleteConfirmation\")} ${getFullAddress(data)}?`,\r\n            title: `${t(\"assetsModule.deleteAsset\")}`\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Grid container >\r\n                <Grid item xs={12}>\r\n                    <div className={classes.pageModule}>\r\n                        {t(\"assetsModule.assets\")}\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} md={12} >\r\n                    <AssetsControls />\r\n                </Grid>\r\n                <Grid container justify='center'>\r\n                    {\r\n                        isLoading ?\r\n                        <LinearProgress /> :\r\n                        assets.map((v,i) => \r\n                            <Asset \r\n                                assetData={v} \r\n                                key={i} \r\n                                order={i}\r\n                                removeAsset={removeAsset}\r\n                                \r\n                            />\r\n                        )    \r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n            {\r\n                Boolean(alertDialog) &&\r\n                <AlertDialog \r\n                    open={Boolean(alertDialog)}\r\n                    alertDialog={alertDialog}\r\n                />\r\n            }\r\n            \r\n        </div>\r\n            \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    pageModule: {\r\n        color: 'white',\r\n        padding: '10px 40px',\r\n        fontSize: '18px',\r\n        background: 'rgba(0,0,0,0.6)',\r\n        margin: '0px auto 5px',\r\n        width: '30%',\r\n        textAlign: 'center',\r\n        borderRadius: '0 0 25px 25px',\r\n        lineHeight: '1'\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\assetsApi.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\Asset.js",["368","369","370","371","372","373"],"import React, { useEffect, useState } from 'react'\r\nimport { makeStyles, Grid, ClickAwayListener, Paper, Typography, Fade, useMediaQuery, IconButton, Tooltip, Backdrop, Modal } from '@material-ui/core'\r\nimport clsx from 'clsx'\r\nimport { UserItem } from '../../user/UserItem'\r\nimport { AssetControls } from './AssetControls'\r\nimport CategoryOutlinedIcon from '@material-ui/icons/CategoryOutlined';\r\nimport VerticalSplitRoundedIcon from '@material-ui/icons/VerticalSplitRounded';\r\nimport HomeRoundedIcon from '@material-ui/icons/HomeRounded';\r\nimport WarningRoundedIcon from '@material-ui/icons/WarningRounded';\r\nimport AssignmentRoundedIcon from '@material-ui/icons/AssignmentRounded';\r\nimport DescriptionRoundedIcon from '@material-ui/icons/DescriptionRounded';\r\nimport { updateAsset } from '../../../api/assetsApi'\r\nimport PeopleOutlineRoundedIcon from '@material-ui/icons/PeopleOutlineRounded';\r\nimport BlurOnRoundedIcon from '@material-ui/icons/BlurOnRounded';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useHistory } from 'react-router'\r\nimport { UpdateOwner } from '../../reuseables/UpdateOwner'\r\nimport { UpsertAsset } from './UpsertAsset'\r\n\r\n\r\nexport const Asset = ({assetData, order, removeAsset }) => {\r\n\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const { t, i18n } = useTranslation();\r\n    const [ controlsVisible, setControlsVisible ] = useState(false);\r\n    const [ editMode, setEditMode ] = useState(false);\r\n    const matches = useMediaQuery(theme => theme.breakpoints.up('sm'));\r\n    const [ data, setData ] = useState(assetData);\r\n    \r\n    \r\n    const toggleEditMode = type => event => {\r\n        if (editMode === type) {\r\n            setEditMode(false)\r\n        } else {\r\n            setEditMode(type)\r\n        }\r\n    }\r\n\r\n    const handleUpdate = async (details) => {\r\n        const res = await updateAsset(details);\r\n        if (res) {\r\n            setEditMode(false);\r\n            setData(res.data);\r\n        }\r\n        \r\n    }\r\n\r\n    const handleReferralClick = type => event => {\r\n        history.push(`${type}/?asset=${data._id}`)\r\n    }\r\n\r\n\r\n    return (\r\n        <Fade in={true}>\r\n            <Grid item xs={12} sm={7} md={6} lg={4} xl={4} >\r\n                <ClickAwayListener onClickAway={() => editMode ? setEditMode(false) : null }>\r\n                    <Paper \r\n                        className={classes.assetContainer} \r\n                        elevation={9}\r\n                        onMouseEnter={() => setControlsVisible(true)}\r\n                        onMouseLeave={() => setControlsVisible(false)}\r\n                    >\r\n                        <div className={classes.topMain} >\r\n                            <div className={classes.address}>\r\n                                <Typography className={classes.addMain}>\r\n                                    {`${data.address.street} ${data.address.streetNumber}${data.address.entrance || ''}`}\r\n                                </Typography>\r\n                                <Typography className={classes.addSec}>\r\n                                    {`${data.address.city}`}\r\n                                </Typography>\r\n                                <Typography className={classes.addZip}> \r\n                                    {`${data.address.zipcode}, ${data.address.country}`}\r\n                                </Typography>\r\n                            </div>\r\n                            <div className={classes.owner}>\r\n                                <UserItem user={data.owner} showPhone showName avatarSize={'40px'} size={12}/>\r\n                            </div>\r\n                            {\r\n                                (controlsVisible || !matches) &&\r\n                                <AssetControls \r\n                                    removeAsset={() => removeAsset(data._id, data)} \r\n                                    toggleEditMode={toggleEditMode}/>\r\n                            }\r\n                        </div>\r\n                        <div \r\n                            className={classes.bottomMain}\r\n                        >\r\n                            <div className={classes.extraDetails}>\r\n                                <div className={classes.type}>\r\n                                    <CategoryOutlinedIcon className={classes.typeIcon}/>\r\n                                    <div className={classes.typeDetails}>\r\n                                        <div className={classes.typeData}>\r\n                                            {t(`assetsModule.${data.type}`)}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                {\r\n                                    data.addInfo.floors ? \r\n                                    <div className={clsx(classes.type, classes.floor)}>\r\n                                        <VerticalSplitRoundedIcon className={classes.typeIcon}/>\r\n                                        <div className={classes.typeDetails}>\r\n                                            <div className={classes.typeData}>\r\n                                                {`${data.addInfo.floors} ${t(\"assetsModule.floors\")}`}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    : null\r\n                                }\r\n                                {\r\n                                    data.addInfo.floor ?\r\n                                    <div className={clsx(classes.type, classes.floor)} >\r\n                                        <VerticalSplitRoundedIcon className={classes.typeIcon}/>\r\n                                        <div className={classes.typeDetails}>\r\n                                            <div className={classes.typeData}>\r\n                                            {`${t(\"assetsModule.floor\")} ${data.addInfo.floor}`}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    : null\r\n                                }\r\n                                {\r\n                                    data.addInfo.unit ?\r\n                                    <div className={clsx(classes.type, classes.unit)}>\r\n                                        <HomeRoundedIcon className={classes.typeIcon}/>\r\n                                        <div className={classes.typeDetails}>\r\n                                            <div className={classes.typeData}>\r\n                                            {`${t(\"assetsModule.unit\")} ${data.addInfo.unit}`}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    : null\r\n                                }\r\n                                {\r\n                                    data.addInfo.units ?\r\n                                    <div className={clsx(classes.type, classes.units)}>\r\n                                        <HomeRoundedIcon className={classes.typeIcon}/>\r\n                                        <div className={classes.typeDetails}>\r\n                                            <div className={classes.typeData}>\r\n                                            {`${data.addInfo.units} ${t(\"assetsModule.units\")}`}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    : null\r\n                                }\r\n                                \r\n                            </div>\r\n                            <div className={clsx(classes.buttonsContainer, Boolean(editMode) && classes.buttonsContainerRound)} >\r\n                                <Tooltip title={t(\"assetsModule.systems\")}>\r\n                                    <IconButton \r\n                                        className={classes.button}\r\n                                        onClick={handleReferralClick('systems')}\r\n                                    >\r\n                                        <BlurOnRoundedIcon className={classes.typeIcon}/>\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title={t(\"assetsModule.tasks\")}>\r\n                                    <IconButton className={classes.button}>\r\n                                        <AssignmentRoundedIcon className={classes.typeIcon}/>\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title={t(\"assetsModule.faults\")}>\r\n                                    <IconButton className={classes.button}>\r\n                                        <WarningRoundedIcon className={classes.typeIcon}/>\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title={t(\"assetsModule.documents\")}>\r\n                                    <IconButton className={classes.button}>\r\n                                        <DescriptionRoundedIcon className={classes.typeIcon}/>\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title={t(\"assetsModule.users\")}>\r\n                                    <IconButton className={classes.button}>\r\n                                        <PeopleOutlineRoundedIcon className={classes.typeIcon}/>\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                                \r\n                            </div>\r\n                        </div>\r\n                        {   \r\n                            editMode === \"address\" &&\r\n                            <UpsertAsset \r\n                                assetId={data._id} \r\n                                handleUpdate={handleUpdate}\r\n                                handleClose={() => setEditMode(false)}\r\n                            />   \r\n                        }\r\n                    </Paper>\r\n                </ClickAwayListener>\r\n            </Grid>\r\n        </Fade>\r\n        \r\n        \r\n    )\r\n\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({  \r\n   \r\n    assetContainer: {\r\n        margin: '10px',\r\n        background: 'white',\r\n        borderRadius: '10px',\r\n        height: 'auto',\r\n        color: 'white',\r\n        background: 'rgba(0,0,0,0.3)',\r\n        border: '1px solid rgba(255,255,255,0.2)', \r\n        [theme.breakpoints.down('sm')] : {\r\n            margin: '10px 0',\r\n            borderRadius: '0',\r\n            border: '0', \r\n        } \r\n    },\r\n    topMain: {\r\n        height: '120px',\r\n        borderRadius: '25px',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        position: 'relative',\r\n        [theme.breakpoints.down('sm')] : {\r\n            borderRadius: '0',\r\n        } \r\n    },\r\n    address: {\r\n        padding: `${theme.spacing(3)}px 0 0 ${theme.spacing(3)}px`,\r\n         \r\n        maxWidth: '45%'\r\n    },\r\n    addMain: {\r\n        fontSize: '20px',\r\n        lineHeight: 1\r\n    },\r\n    addSec: {\r\n        fontSize: '14px'\r\n    },\r\n    addZip: {\r\n        fontSize: '14px'\r\n    },\r\n    bottomMain: {\r\n        height: 'auto',\r\n        borderRadius: '25px',\r\n        position: 'relative',\r\n        background: 'transparent',\r\n        display: 'grid',\r\n        placeItems: 'center'\r\n    },\r\n    owner: {\r\n        width: '160px',\r\n        height: '50px',\r\n        padding: '3px 5px 3px',\r\n        borderRadius: '0px 10px 0px 5px',\r\n        boxShadow: '-2px 2px 2px 0 rgb(0 0 0 / 37%)',\r\n        '&:hover' :{\r\n            background: 'black',\r\n            transition: 'background 0.2s ease',\r\n            boxShadow: '0 8px 32px 0 rgb(0 0 0 / 80%)',\r\n        },\r\n         \r\n    },\r\n    extraDetails: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        height: '30px',\r\n        borderRadius: '25px',\r\n        background: theme.palette.primary.main,\r\n        width: 'fit-content',\r\n        boxShadow: 'rgba(0,0,0,0.4) 0px 0px 5px 2px'\r\n    },\r\n    type: {\r\n        position: 'relative',\r\n        display: 'flex',\r\n        padding: '5px 10px',\r\n        width: 'fit-content',\r\n        background: 'transparent',\r\n        color: 'white',\r\n        alignItems: 'center'\r\n    },\r\n    typeIcon: {\r\n        fontSize: '20px',\r\n        color: 'white'\r\n    },\r\n    typeData: {\r\n        padding: '0 10px 0 10px',\r\n        lineHeight: 1\r\n    },\r\n    buttonsContainer: {\r\n        width: 'fit-content',\r\n        margin: '10px auto 0',\r\n        height: 'auto',\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-between',\r\n        borderRadius: '10px 10px 0 0',\r\n        transition: 'border-radius 0.5s ease',\r\n        background: theme.palette.primary.main,\r\n        boxShadow: 'rgba(0,0,0,0.4) 0px 0px 5px 2px'  \r\n    },\r\n    buttonsContainerRound: {\r\n        borderRadius: '25px',\r\n        transition: 'border-radius 0.5s ease'\r\n    },\r\n    button: {\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.5)',\r\n        }\r\n    },\r\n    \r\n    \r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\user\\UserItem.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\AssetsControls.js",["374","375","376"],"import React, { useState } from 'react'\r\nimport { Grid, makeStyles,  useMediaQuery, Collapse, Button } from '@material-ui/core'\r\nimport { SortBy } from '../../reuseables/SortBy'\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\nimport { SearchBox } from '../../reuseables/SearchBox';\r\nimport { FilterBySelect } from '../../reuseables/FilterBySelect';\r\nimport PersonRoundedIcon from '@material-ui/icons/PersonRounded';\r\nimport { getUserList } from '../../../api/userApi';\r\nimport { FilterByMultiSelect } from '../../reuseables/FilterByMultiSelect';\r\nimport { useTranslation } from 'react-i18next';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport ExpandMoreRoundedIcon from '@material-ui/icons/ExpandMoreRounded';\r\nimport { ClearRounded } from '@material-ui/icons';\r\n\r\n\r\nconst sortOptions = [\r\n    {\r\n        text: 'כתובת',\r\n        field: 'street'\r\n    },\r\n    {\r\n        text: 'עיר',\r\n        field: 'city'\r\n    },\r\n    {\r\n        text: 'מנהל בניין',\r\n        field: 'owner'\r\n    },\r\n    {\r\n        text: 'כמות משימות פתוחות',\r\n        field: 'openTasksCount'\r\n    },\r\n    {\r\n        text: 'כמות תקלות פתוחות',\r\n        field: 'openFaultsCount'\r\n    },\r\n    \r\n]\r\n\r\nexport const AssetsControls = ({ components }) => {\r\n    \r\n    const classes = useStyles();\r\n    const { t, i18n } = useTranslation();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const [ collapsed, setCollapsed ] = useState(!downSm ? true : false);\r\n    \r\n\r\n    const createUserOptions = () => {\r\n        return getUserList()\r\n        .then(data => {\r\n            let userList = [];\r\n            data.forEach(user => {\r\n                userList.push({label: `${user.firstName} ${user.lastName}`, value: user._id })\r\n            });\r\n            return userList;\r\n        })\r\n    }\r\n\r\n    const toggleCollapse = () => {\r\n        if (collapsed) {\r\n            setCollapsed(false);\r\n            return;\r\n        }\r\n        setCollapsed(true)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                downSm &&\r\n                <Grid container justify='center'>\r\n                    <Grid item xs={11} className={classes.gridItem}>\r\n                        <Button\r\n                        className={classes.sortandfilter}\r\n                        startIcon={<FilterListIcon className={classes.icon} />}\r\n                        endIcon={collapsed ? <ClearRounded /> : <ExpandMoreRoundedIcon />}\r\n                        onClick={toggleCollapse}\r\n                    >\r\n                        {t(`faultsModule.${ collapsed ? 'hide' : 'show'}Filters`)}\r\n                    </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                    \r\n            }\r\n            <Collapse in={collapsed}>\r\n                <Grid container justify='center' >\r\n                    <Grid item xs={11} sm={9} md={7} lg={5} xl={4} className={classes.gridItem}>\r\n                        <SearchBox \r\n                            placeholder={t(\"assetsModule.filterByCityOrAddress\")}\r\n                            filterField={'searchText'}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={11} className={classes.gridItem}>         \r\n                        <FilterBySelect \r\n                            optionsFunc={createUserOptions}\r\n                            placeholder={t(\"assetsModule.filterByAssetOwner\")}\r\n                            filterIcon={<PersonRoundedIcon className={classes.icon }/>}\r\n                            filterField={'owner'}\r\n                        \r\n                        />\r\n                    \r\n                        <SortBy \r\n                            menuOptions={sortOptions}\r\n                        />   \r\n                    </Grid>  \r\n                </Grid>\r\n            </Collapse>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(them => ({\r\n    gridItem: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap'\r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        marginLeft: '4px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    sortandfilter: {\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        background: 'rgba(0,0,0,0.7)',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '5px 25px 5px 3px',\r\n        whiteSpace: 'nowrap',\r\n        '&:hover': {\r\n            background: 'black'\r\n        }\r\n    }\r\n}))\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\AssetControls.js",["377","378"],"import React from 'react'\r\nimport { makeStyles, Fade, IconButton, Tooltip } from '@material-ui/core'\r\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\r\nimport DeleteOutlineRoundedIcon from '@material-ui/icons/DeleteOutlineRounded';\r\nimport TransferWithinAStationRoundedIcon from '@material-ui/icons/TransferWithinAStationRounded';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n\r\nexport const AssetControls = ({removeAsset, toggleEditMode}) => {\r\n    \r\n    const classes = useStyles();\r\n    const { t, i18n } = useTranslation();\r\n    \r\n    return (\r\n        <Fade in={true} timeout={500}>\r\n            <div className={ classes.container}>               \r\n                <Tooltip title={t(\"assetsModule.editAddress\")}>\r\n                    <IconButton \r\n                        className={classes.iconbutton}\r\n                        onClick={toggleEditMode('address')}\r\n                    >\r\n                        <EditRoundedIcon className={classes.icon} />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title={t(\"assetsModule.deleteAsset\")}>\r\n                    <IconButton \r\n                        className={classes.iconbutton}\r\n                        onClick={removeAsset}    \r\n                    >\r\n                        <DeleteOutlineRoundedIcon className={classes.icon} />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            </div>\r\n        </Fade>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        display: 'flex',\r\n        position: 'absolute',\r\n        right: 0,\r\n        top: '55%',\r\n        \r\n    },\r\n    iconbutton: {\r\n        margin: '7px 5px',\r\n        boxShadow: 'rgba(0,0,0,0.2) 0px 0px 3px 3px ',\r\n        background: theme.palette.primary.main,\r\n        color: 'white',\r\n        padding: '8px'\r\n       \r\n    },\r\n    icon: {\r\n        fontSize: '20px'\r\n    }\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\SortBy.js",["379","380"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport { makeStyles, ButtonGroup, Button, Menu, MenuItem } from '@material-ui/core'\r\nimport SortRoundedIcon from '@material-ui/icons/SortRounded';\r\nimport ArrowDropUpOutlinedIcon from '@material-ui/icons/ArrowDropUpOutlined';\r\nimport ArrowDropDownOutlinedIcon from '@material-ui/icons/ArrowDropDownOutlined';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { addQueryParam } from '../../api/genericApi';\r\nimport { useQuery } from './customHooks/useQuery';\r\nimport { useTranslation } from 'react-i18next'\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\n\r\n\r\nexport const SortBy = ({menuOptions, handleSortChange}) => {\r\n    \r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const { t, i18n } = useTranslation();\r\n    const { lang } = useContext(LanguageContext);\r\n    const [ values, setValues ] = useState({\r\n        sortBy: query.sortBy || '',\r\n        sortOrder: query.sortOrder || 'asc' \r\n    })\r\n    const [ anchorEl, setAnchorEl ] = useState(null);\r\n \r\n    useEffect(() => {\r\n        if (!values.sortBy) return;\r\n        history.push({\r\n            path: location.pathname,\r\n            search: addQueryParam(location.search, [{ name: 'sortBy', value: values.sortBy}, {name: 'sortOrder', value: values.sortOrder}])\r\n        })\r\n    }, [values])\r\n\r\n    const handleClick = menuOption => event => {\r\n        setValues({\r\n            ...values, \r\n            sortBy: menuOption\r\n        })\r\n        setAnchorEl(null);\r\n    }\r\n\r\n    const handleChange = () => {\r\n        if (values.sortBy) {\r\n            setValues({\r\n                ...values, \r\n                sortOrder: values.sortOrder === 'asc' ? 'desc' : 'asc'\r\n            })\r\n        }\r\n    }\r\n    \r\n    const getOptionText = (option) => {\r\n        const result = menuOptions.find( mo => option === mo.field);\r\n        if (result) {\r\n            return result.text\r\n        }\r\n        return t(\"sort.sortBy\")\r\n    }\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <ButtonGroup \r\n                className={classes.sort}\r\n            >\r\n\r\n                <Button \r\n                    className={classes.sortBy}\r\n                    onClick={event => setAnchorEl(event.currentTarget)}\r\n                    startIcon={<SortRoundedIcon className={classes.icon}/>}\r\n                >\r\n                    {values.sortBy ? getOptionText(values.sortBy) : `${t(\"sort.sortBy\")}`}\r\n                </Button>\r\n                <Menu\r\n                    anchorEl={anchorEl}\r\n                    open={Boolean(anchorEl)}\r\n                    onClose={() => setAnchorEl(null)}\r\n                    classes={{\r\n                        paper : classes.menu\r\n                    }}\r\n                    keepMounted\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'right',\r\n                    }}\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'right',\r\n                    }}\r\n                >\r\n                    {\r\n                        menuOptions.map((v,i) => {\r\n                            return (\r\n                                <MenuItem\r\n                                    key={i}\r\n                                    onClick={handleClick(v.field)}\r\n                                    style={{ direction: lang.code === 'he' ? 'rtl' : 'ltr'}}\r\n                                >\r\n                                    {v.text}\r\n                                </MenuItem>\r\n                            )\r\n                            \r\n                        })\r\n                    }\r\n                </Menu>\r\n                <Button\r\n                    endIcon={ values.sortOrder === 'asc' ? <ArrowDropUpOutlinedIcon /> : <ArrowDropDownOutlinedIcon />}\r\n                    onClick={handleChange}\r\n                    className={classes.sortOrder}\r\n                >\r\n                    { `${ values.sortOrder === 'asc' ? `${t(\"sort.asc\")}` : `${t(\"sort.desc\")}`}`}\r\n                </Button> \r\n            </ButtonGroup>\r\n            \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    sort: {\r\n        margin: '5px',\r\n        height: '45px',\r\n        \r\n    },\r\n    sortBy: {\r\n        borderRadius: '25px 0 0 25px',\r\n        padding: '0 15px 0 3px',\r\n        color: 'white',\r\n        width: 'auto',\r\n        whiteSpace: 'nowrap',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    sortOrder: {\r\n        borderRadius: '0px 25px 25px 0px',\r\n        padding: 0,\r\n        color: 'white',\r\n       width: '100px',\r\n       border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    menu: {\r\n        marginTop: '55px',\r\n        background: 'rgba(0,0,0,0.5)',\r\n        backdropFilter: 'blur(10px)',\r\n        color: 'white'\r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        margin: '0 6px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        \r\n    }\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\FiltersContext.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\AuthContext.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\genericApi.js",["381"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\customHooks\\useQuery.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\SearchBox.js",["382","383","384"],"import React, { useState, useEffect } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { addQueryParam, removeQueryParam, queryParamsToObject, specialStringPurge} from '../../api/genericApi';\r\nimport { OutlinedInput, FormControl, makeStyles, Grid, ClickAwayListener } from '@material-ui/core'\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\nimport { useQuery } from './customHooks/useQuery';\r\nimport clsx from 'clsx';\r\n\r\nexport const SearchBox = ({ placeholder, filterField }) => {\r\n    \r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const [ onFocus, setOnFocus ] = useState(false);\r\n    const [ searchText, setSearchText ] = useState(specialStringPurge(query[filterField]) || '');\r\n    \r\n    useEffect(() => {\r\n        if (Boolean(searchText) && searchText === specialStringPurge(query[filterField])) return;\r\n        const timeOutId = setTimeout(() => handleSearch(searchText), 700);\r\n        return () => clearTimeout(timeOutId);\r\n    }, [searchText])\r\n\r\n    const handleChange = event => {\r\n        setSearchText(event.target.value)\r\n    }\r\n\r\n    const handleSearch = searchText => {\r\n        if (searchText) {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: addQueryParam(location.search, [{ name: filterField, value: searchText}])\r\n            });\r\n            return; \r\n        }\r\n        history.push({\r\n            path: location.pathname,\r\n            search: removeQueryParam(location.search, filterField)\r\n        });\r\n        \r\n    }\r\n\r\n    return (\r\n        <ClickAwayListener onClickAway={() => setOnFocus(false)}>\r\n            <div className={clsx(classes.container , onFocus && classes.focused)} xs={11} sm={9} md={8} lg={6}>\r\n                    <SearchRoundedIcon className={classes.icon}/>\r\n                    <FormControl variant='outlined' className={classes.form}>\r\n                        <OutlinedInput\r\n                            value={ searchText || '' }\r\n                            onChange={handleChange}\r\n                            placeholder={placeholder}\r\n                            className={clsx(classes.searchInput)}\r\n                            onFocus={() => setOnFocus(true)}\r\n                        />\r\n                    </FormControl>\r\n            </div>\r\n        </ClickAwayListener>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        margin: '5px',\r\n        height: '45px',\r\n        maxWidth: '450px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '25px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        transition: 'box-shadow 0.2s ease-in',\r\n        '&:hover': {\r\n            boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n            transition: 'box-shadow 0.2s ease-in'\r\n        }\r\n\r\n    },\r\n    focused: {\r\n        boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n        background: 'rgba(0,0,0,0.1)',\r\n        backdropFilter: 'blur(40px)'\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        \r\n    },\r\n    searchInput: {\r\n        height: '34px',\r\n        width: '98.5%',\r\n        margin: '3px 0.75%',\r\n        borderRadius: '5px 25px 25px 5px',\r\n        color: 'white',\r\n        '& input': {\r\n            padding: '12.5px 14px',\r\n        },\r\n        '& fieldset': {\r\n            border: '0'\r\n        } \r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        margin: '0 5px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        \r\n    }\r\n}))\r\n\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\FilterBySelect.js",["385","386"],"import { Button, IconButton, makeStyles, Menu, MenuItem } from '@material-ui/core';\r\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { addQueryParam, removeQueryParam } from '../../api/genericApi';\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\nimport { useQuery } from './customHooks/useQuery';\r\n\r\nexport const FilterBySelect = ({ filterField, placeholder, filterIcon, optionsFunc }) => {\r\n    \r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const { lang } = useContext(LanguageContext);\r\n    const [ menuOptions, setMenuOptions] = useState([]);\r\n    const [ anchorEl, setAnchorEl ] = useState(null);\r\n    const [ value, setValue ] = useState(query[filterField] || '')\r\n\r\n    useEffect(() => {\r\n        optionsFunc()\r\n        .then(data => {\r\n            setMenuOptions(data)\r\n        }) \r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (value) {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: addQueryParam(location.search, [{ name: filterField, value }])\r\n            });\r\n            return;\r\n        }\r\n        if(query[filterField]) {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: removeQueryParam(location.search, filterField)\r\n            });\r\n        }     \r\n    }, [value])\r\n\r\n    const createTag = val => {\r\n        let data = menuOptions.find(op => val === op.value);\r\n        if (!data) return;\r\n        return (\r\n            <div className={classes.tag}>\r\n                <label className={classes.tagLabel}>\r\n                    { data.label }\r\n                </label>\r\n                <IconButton \r\n                    className={classes.removeBtn}\r\n                    onClick={removeChoice(data.value)}\r\n                >\r\n                    <CloseRoundedIcon className={classes.tagRemove}/>\r\n                </IconButton>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const removeChoice = value => event => {\r\n        event.stopPropagation();\r\n        setValue('')\r\n    }\r\n\r\n    const handleClick = val => event => {\r\n        setValue(val);\r\n        setAnchorEl(null)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                Boolean(menuOptions.length) &&\r\n                    <div item className={classes.select}>\r\n                        <Button \r\n                            className={classes.filterBy}\r\n                            onClick={event => setAnchorEl(event.currentTarget)}\r\n                            startIcon={filterIcon}\r\n                        >\r\n                            { value ? createTag(value) : <label style={{ padding: '0 15px', cursor: 'pointer' }}>{placeholder}</label>}\r\n                        </Button>\r\n                        <Menu\r\n                            anchorEl={anchorEl}\r\n                            open={Boolean(anchorEl)}\r\n                            onClose={() => setAnchorEl(null)}\r\n                            classes={{\r\n                                paper : classes.menu\r\n                            }}\r\n                            keepMounted\r\n                            anchorOrigin={{\r\n                                vertical: 'bottom',\r\n                                horizontal: 'right',\r\n                            }}\r\n                            transformOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'right',\r\n                            }}\r\n                        >\r\n                            {\r\n                                menuOptions.map((v,i) => {\r\n                                    return (\r\n                                        <MenuItem\r\n                                            key={i}\r\n                                            onClick={handleClick(v.value)}\r\n                                            className={classes.menuitem}\r\n                                            style={{ direction: lang.code === 'he' ? 'rtl' : 'ltr'}}\r\n                                        >\r\n                                            {v.label}\r\n                                        </MenuItem>\r\n                                    )\r\n                                    \r\n                                })\r\n                            }\r\n                        </Menu>\r\n                    </div>\r\n            }          \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    select: {\r\n        margin: '5px',\r\n        height: '45px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    filterBy: {\r\n        textTransform: 'none',\r\n        color: 'white',\r\n        padding: '0 4px',\r\n        height: '45px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '25px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        whiteSpace: 'nowrap',\r\n        '&:hover': {\r\n            boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n            \r\n        }\r\n    },\r\n    menu: {\r\n        marginTop: '55px',\r\n        background: 'rgba(0,0,0,0.5)',\r\n        backdropFilter: 'blur(10px)',\r\n        color: 'white'\r\n    },\r\n    menuitem: {\r\n        minWidth: '200px'\r\n    },\r\n    container: {\r\n        height: '45px',\r\n        border: '1px solid rgba(0,0,0,0.25)',\r\n        borderRadius: '25px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        '&:hover': {\r\n            boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n            \r\n        }\r\n    },\r\n    focused: {\r\n        border: `2px solid ${theme.palette.primary.main}`\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        \r\n    },\r\n    searchInput: {\r\n        height: '34px',\r\n        width: '98.5%',\r\n        margin: '3px 0.75%',\r\n        borderRadius: '5px 25px 25px 5px',\r\n        color: 'white',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        '& fieldset': {\r\n            border: '0'\r\n        } \r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        margin: '0 5px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    tag: {\r\n        padding: '5px 10px',\r\n        borderRadius: '50px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    tagLabel: {\r\n        padding: '0 5px'\r\n    },\r\n    removeBtn: {\r\n        padding: '4px',\r\n        color: 'white'\r\n    },\r\n    tagRemove: {\r\n        fontSize: '16px'\r\n    }\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\FilterByMultiSelect.js",["387","388"],"import { Button, IconButton, makeStyles, Menu, MenuItem } from '@material-ui/core';\r\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { addQueryParam, removeQueryParam } from '../../api/genericApi';\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\nimport { useQuery } from './customHooks/useQuery';\r\n\r\nexport const FilterByMultiSelect = ({ filterField, placeholder, filterIcon, optionsFunc }) => {\r\n    \r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const { lang } = useContext(LanguageContext);\r\n    const [ menuOptions, setMenuOptions] = useState([]);\r\n    const [ orgMenuOptions, setOrgMenuOptions ] = useState([])\r\n    const [ anchorEl, setAnchorEl ] = useState(null);\r\n    const [ values, setValues ] = useState( query[filterField] || [])\r\n\r\n    useEffect(() => {\r\n        optionsFunc()\r\n        .then(data => {\r\n            setOrgMenuOptions(data);\r\n            if (query[filterField]) {\r\n                data = data.filter(op => query[filterField].indexOf(op.value) === -1 )\r\n            }\r\n            setMenuOptions(data);\r\n            \r\n        }) \r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (values.length) {\r\n            \r\n            history.push({\r\n                path: location.pathname,\r\n                search: addQueryParam(location.search, [{ name: filterField, value: values }])\r\n            });\r\n            return;\r\n        }\r\n        if (query[filterField] && !values.length) {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: removeQueryParam(location.search, filterField)\r\n            });\r\n        }\r\n        \r\n    }, [values])\r\n\r\n    useEffect(() => {\r\n        if(!menuOptions.length) {\r\n            setAnchorEl(null)\r\n        }\r\n    }, [menuOptions])\r\n\r\n    const createTag = (val, key) => {\r\n        let data = orgMenuOptions.find(op => val === op.value);\r\n        if (!data) return;\r\n        return (\r\n            <div className={classes.tag} key={key}>\r\n                <label className={classes.tagLabel}>\r\n                    { data.label }\r\n                </label>\r\n                <IconButton \r\n                    className={classes.removeBtn}\r\n                    onClick={removeChoice(data.value)}\r\n                >\r\n                    <CloseRoundedIcon className={classes.tagRemove}/>\r\n                </IconButton>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const removeChoice = value => event => {\r\n        event.stopPropagation();\r\n        getMenuOptions(value)\r\n        .then(data => {\r\n            setValues(values => values.filter(val => val !== value ));\r\n            if (!menuOptions.length) {\r\n                setAnchorEl(null)\r\n            }\r\n            setMenuOptions(data)\r\n        });  \r\n    }\r\n\r\n    const handleClick = val => event => {\r\n        setValues([...values, val]);\r\n        setMenuOptions(menuOptions => menuOptions.filter( op => op.value !== val));\r\n    }\r\n\r\n    const getMenuOptions = (value) => {\r\n        return new Promise((resolve, reject) => {\r\n            let mop = menuOptions;\r\n            mop.push(orgMenuOptions.find( op => op.value === value));\r\n            resolve(mop);\r\n        }) \r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                Boolean(orgMenuOptions.length) &&\r\n                <div className={classes.select}>\r\n                        <Button \r\n                            className={classes.filterBy}\r\n                            onClick={event => setAnchorEl(event.currentTarget)}\r\n                            startIcon={filterIcon}\r\n                        >\r\n                            { \r\n                                values.length \r\n                                ?   \r\n                                    <div className={classes.selectedContainer}>\r\n                                        {\r\n                                             values.map((val, i ) => createTag(val, i)) \r\n                                        }\r\n                                    </div>\r\n                               \r\n                                :   <label style={{ \r\n                                        padding: '5px 0px 5px 20px', \r\n                                        cursor: 'pointer' \r\n                                    }}>\r\n                                        {placeholder}\r\n                                    </label>\r\n                            }\r\n                        </Button>\r\n                        <Menu\r\n                            anchorEl={anchorEl}\r\n                            open={Boolean(anchorEl)}\r\n                            onClose={() => setAnchorEl(null)}\r\n                            classes={{\r\n                                paper : classes.menu\r\n                            }}\r\n                            keepMounted\r\n                            anchorOrigin={{\r\n                                vertical: 'bottom',\r\n                                horizontal: 'right',\r\n                            }}\r\n                            transformOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'right',\r\n                            }}\r\n                        >\r\n                            {\r\n                                menuOptions.map((v,i) => {\r\n                                    return (\r\n                                        <MenuItem\r\n                                            key={i}\r\n                                            onClick={handleClick(v.value)}\r\n                                            className={classes.menuitem}\r\n                                            style={{ direction: lang.code === 'he' ? 'rtl' : 'ltr'}}\r\n                                        >\r\n                                            {v.label}\r\n                                        </MenuItem>\r\n                                    )\r\n                                    \r\n                                })\r\n                            }\r\n                        </Menu>\r\n               </div>\r\n            }          \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    select: {\r\n        margin: '5px',\r\n        height: 'auto',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        whiteSpace: 'nowrap'\r\n    },\r\n    filterBy: {\r\n        textTransform: 'none',\r\n        color: 'white',\r\n        padding: '0 5px',\r\n        minHeight: '45px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '25px',\r\n        \r\n        '&:hover': {\r\n            boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n        }\r\n    },\r\n    selectedContainer: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        whiteSpace: 'nowrap',\r\n        flexWrap: 'wrap',\r\n        width: 'fit-content',\r\n        maxWidth: '400px'\r\n    },\r\n    menu: {\r\n        marginTop: '55px',\r\n        background: 'rgba(0,0,0,0.5)',\r\n        backdropFilter: 'blur(10px)',\r\n        color: 'white'\r\n    },\r\n    menuitem: {\r\n        minWidth: '200px'\r\n    },\r\n    container: {\r\n        height: '45px',\r\n        border: '1px solid rgba(0,0,0,0.25)',\r\n        borderRadius: '25px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        '&:hover': {\r\n            boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n            \r\n        }\r\n    },\r\n    focused: {\r\n        boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n        background: 'rgba(0,0,0,0.1)',\r\n        backdropFilter: 'blur(40px)'\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        \r\n    },\r\n    searchInput: {\r\n        height: '34px',\r\n        width: '98.5%',\r\n        margin: '3px 0.75%',\r\n        borderRadius: '5px 25px 25px 5px',\r\n        color: 'white',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        '& fieldset': {\r\n            border: '0'\r\n        } \r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        margin: '0 5px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    tag: {\r\n        padding: '5px 10px',\r\n        borderRadius: '50px',\r\n        boxShadow: 'rgba(0,0,0,0.25) 0px 0px 3px 1px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        margin: '3px'\r\n    },\r\n    tagLabel: {\r\n        padding: '0 5px'\r\n    },\r\n    removeBtn: {\r\n        padding: '4px',\r\n        color: 'white'\r\n    },\r\n    tagRemove: {\r\n        fontSize: '16px'\r\n    }\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\LanguageContext.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\i18n.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\Systems.js",["389","390"],"import { Grid, LinearProgress, makeStyles, useMediaQuery } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useLocation } from 'react-router';\r\nimport { queryParamsToObject } from '../../../api/genericApi';\r\nimport { applyFilters, getSystemsByAsset } from '../../../api/systemsApi';\r\nimport { useQuery } from '../../reuseables/customHooks/useQuery';\r\nimport { System } from './System';\r\nimport { SystemsControls } from './SystemsControls';\r\nimport { SystemsHeader } from './SystemsHeader';\r\n\r\nexport const Systems = () => {\r\n\r\n    const classes = useStyles();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const { t } = useTranslation();\r\n    const [ systems, setSystems ] = useState([]);\r\n    const [ isLoading, setIsLoading ] = useState(false);\r\n \r\n\r\n    useEffect(() => {\r\n        if (!isLoading) return;    \r\n        let queryParams = queryParamsToObject(location.search);\r\n        if (!queryParams.asset) {\r\n            setIsLoading(false);\r\n            return;\r\n        }\r\n        \r\n\r\n        getSystemsByAsset(queryParams.asset)\r\n        .then(data => {\r\n            return applyFilters(queryParams, data);\r\n        })\r\n        .then(data => {\r\n            setSystems(data);     \r\n        })\r\n        .finally(() => {\r\n            setIsLoading(false);\r\n        });\r\n    }, [isLoading])\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n    }, [location.search])\r\n\r\n\r\n    return(\r\n        <div>\r\n            <Grid container justify='center'>\r\n                <Grid item xs={12}>\r\n                    <div className={classes.pageModule}>\r\n                        {t(\"assetsModule.systems\")}\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} >\r\n                    <SystemsControls />\r\n                </Grid>\r\n                <Grid container justify='center' >\r\n                    {\r\n                        !query.asset \r\n                        ?   <div \r\n                                className={classes.initMessage}>\r\n                                {t(\"systemsModule.initMessage\")}\r\n                            </div>\r\n                        :   isLoading \r\n                            ?   <LinearProgress />\r\n                            :   \r\n                            <React.Fragment>\r\n                                <SystemsHeader />\r\n                                {\r\n                                    systems.map((system, i) => \r\n                                        <System systemData={system} key={i} />\r\n                                    )\r\n                                }\r\n                            </React.Fragment>\r\n                            \r\n                    }   \r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    initMessage: {\r\n        color: 'white',\r\n        padding: '10px 40px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '50px',\r\n        width: 'fit-content',\r\n        margin: '5px auto',\r\n        textAlign: 'center',\r\n        fontSize: '16px'\r\n    },\r\n    pageModule: {\r\n        color: 'white',\r\n        padding: '10px 40px',\r\n        fontSize: '18px',\r\n        background: 'rgba(0,0,0,0.6)',\r\n        margin: '0px auto 5px',\r\n        width: '30%',\r\n        textAlign: 'center',\r\n        borderRadius: '0 0 25px 25px',\r\n        lineHeight: '1'\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemsControls.js",["391","392"],"import React, { useState, useEffect } from 'react'\r\nimport { Grid, makeStyles, useMediaQuery, Button, Collapse } from '@material-ui/core'\r\nimport { SortBy } from '../../reuseables/SortBy'\r\nimport { SearchBox } from '../../reuseables/SearchBox';\r\nimport { FilterBySelect } from '../../reuseables/FilterBySelect';\r\nimport PersonRoundedIcon from '@material-ui/icons/PersonRounded';\r\nimport { createUserOptions } from '../../../api/userApi';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { SearchBoxSelect } from '../../reuseables/SearchBoxSelect';\r\nimport { getAssetsSuggestions } from '../../../api/systemsApi';\r\nimport { getFullAddress, getAsset } from '../../../api/assetsApi';\r\nimport { useLocation } from 'react-router';\r\nimport { useQuery } from '../../reuseables/customHooks/useQuery';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport ExpandMoreRoundedIcon from '@material-ui/icons/ExpandMoreRounded';\r\nimport { ClearRounded } from '@material-ui/icons';\r\n\r\nconst sortOptions = [\r\n    {\r\n        text: 'שם מערכת',\r\n        field: 'systemName'\r\n    },\r\n    {\r\n        text: 'מנהל מערכת',\r\n        field: 'owner'\r\n    },\r\n    {\r\n        text: 'כמות תקלות פתוחות',\r\n        field: 'openFaultsCount'\r\n    },\r\n    \r\n]\r\n\r\nexport const SystemsControls = () => {\r\n    \r\n    const classes = useStyles();\r\n    const { t, i18n } = useTranslation();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const [ reloadedValue, setReloadedValue ] = useState(null);\r\n    const [ collapsed, setCollapsed ] = useState(!downSm ? true : false);\r\n    \r\n    useEffect(() => {\r\n        if (query.asset) {\r\n            handleReloaded(query.asset)\r\n            .then(data => {\r\n                if (data) {\r\n                    setReloadedValue(data);\r\n                } else {\r\n                    \r\n                }\r\n            })\r\n        } else {\r\n            setReloadedValue({\r\n                label: '',\r\n                value: null\r\n            });\r\n        }\r\n    }, [location.search])\r\n\r\n    const handleReloaded = async (assetId) => {\r\n        const res = await getAsset(assetId, false);\r\n        if (res) {\r\n            return {\r\n                label: getFullAddress(res),\r\n                value: res._id\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    const toggleCollapse = () => {\r\n        if (collapsed) {\r\n            setCollapsed(false);\r\n            return;\r\n        }\r\n        setCollapsed(true)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                downSm &&\r\n                <Grid container justify='center'>\r\n                    <Grid item xs={11} className={classes.gridItem}>\r\n                        <Button\r\n                        className={classes.sortandfilter}\r\n                        startIcon={<FilterListIcon className={classes.icon} />}\r\n                        endIcon={collapsed ? <ClearRounded /> : <ExpandMoreRoundedIcon />}\r\n                        onClick={toggleCollapse}\r\n                    >\r\n                        {t(`faultsModule.${ collapsed ? 'hide' : 'show'}Filters`)}\r\n                    </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                    \r\n            }\r\n            <Collapse in={collapsed}>\r\n                <Grid container justify='center' >\r\n                    <Grid item xs={12} className={classes.gridItem}>\r\n\r\n                        {\r\n                            reloadedValue &&\r\n                            <SearchBoxSelect\r\n                                suggestionsFunc={getAssetsSuggestions}\r\n                                placeholder={t(\"systemsModule.filterByAsset\")}\r\n                                filterField={'asset'}\r\n                                reloadedLabel={reloadedValue.label}\r\n                                reloadedValue={reloadedValue.value}\r\n                            />\r\n                        }  \r\n                        <SearchBox \r\n                                placeholder={t(\"systemsModule.filterBySystemName\")}\r\n                                filterField={'name'}\r\n                            />\r\n                        </Grid>\r\n                    <Grid xs={11} className={classes.gridItem}>\r\n                        <FilterBySelect \r\n                            optionsFunc={createUserOptions}\r\n                            placeholder={t(\"systemsModule.filterBySystemOwner\")}\r\n                            filterIcon={<PersonRoundedIcon className={classes.icon }/>}\r\n                            filterField={'owner'}\r\n                        />\r\n                        <SortBy \r\n                            menuOptions={sortOptions}\r\n                        />\r\n                    </Grid>\r\n                    \r\n                </Grid>\r\n            </Collapse>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(them => ({\r\n    gridItem: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap'\r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        marginLeft: '4px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    sortandfilter: {\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        background: 'rgba(0,0,0,0.7)',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '5px 25px 5px 3px',\r\n        whiteSpace: 'nowrap',\r\n        '&:hover': {\r\n            background: 'black'\r\n        }\r\n    }\r\n}))\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\SearchBoxSelect.js",["393","394"],"import { ClickAwayListener, FormControl, IconButton, makeStyles, Menu, MenuItem, OutlinedInput } from '@material-ui/core';\r\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded';\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\nimport clsx from 'clsx';\r\nimport React, { useContext, useEffect, useRef, useState } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { addQueryParam, removeQueryParam } from '../../api/genericApi';\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\nimport { useQuery } from './customHooks/useQuery';\r\n\r\nexport const SearchBoxSelect = ({ placeholder, filterField, suggestionsFunc, reloadedLabel, reloadedValue }) => {\r\n    \r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const cont = useRef();\r\n    const input = useRef();\r\n    const { lang } = useContext(LanguageContext);\r\n    const [ onFocus, setOnFocus ] = useState(false);\r\n    const [ searchText, setSearchText ] = useState('');\r\n    const [ anchorEl, setAnchorEl ] = useState(null);\r\n    const [ menuOptions, setMenuOptions ] = useState([]);\r\n    const [ value, setValue ] = useState(reloadedValue || null);\r\n    \r\n    useEffect(() => {\r\n        if (Boolean(!searchText)) return;\r\n        const timeOutId = setTimeout(() => handleSearch(searchText), 700);\r\n        return () => clearTimeout(timeOutId);\r\n    }, [searchText])\r\n\r\n    useEffect(() => {\r\n        if (value) {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: addQueryParam(location.search, [{ name: filterField, value: value}])\r\n            });\r\n            return;\r\n        } else {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: removeQueryParam(location.search, filterField)\r\n            });\r\n        }\r\n    }, [value])\r\n\r\n    const handleChange = event => {\r\n        setSearchText(event.target.value)\r\n    }\r\n\r\n    const handleSearch = async searchText => {\r\n        if (searchText) {\r\n            const data = await suggestionsFunc(searchText);\r\n            setMenuOptions(data || []);\r\n            setAnchorEl(input.current)      \r\n        } else {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: removeQueryParam(location.search, filterField)\r\n            });\r\n        }\r\n    }\r\n    \r\n    const getTag = val => {\r\n        let data = menuOptions.find(op => val === op.value);\r\n        return createTag(data)\r\n    }\r\n\r\n    const createTag = data => {\r\n        if (!data) return;\r\n        return (\r\n            <div className={classes.tag}>\r\n                <label className={classes.tagLabel}>\r\n                    { data.label }\r\n                </label>\r\n                <IconButton \r\n                    className={classes.removeBtn}\r\n                    onClick={removeChoice(data.value)}\r\n                >\r\n                    <CloseRoundedIcon className={classes.tagRemove}/>\r\n                </IconButton>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const removeChoice = value => event => {\r\n        event.stopPropagation();\r\n        setValue(null)\r\n    }\r\n\r\n    const handleClick = val => event => {\r\n        setValue(val);\r\n        setAnchorEl(null)\r\n    }\r\n\r\n    return (\r\n        <ClickAwayListener onClickAway={() => setOnFocus(false)}>\r\n            <div ref={cont} className={clsx(classes.container , onFocus && classes.focused, Boolean(value) && classes.selected)} xs={11} sm={9} md={8} lg={6}>\r\n                <SearchRoundedIcon className={classes.icon}/>\r\n                {\r\n                    value \r\n                    ?   query[filterField] === value\r\n                        ?  createTag(reloadedLabel && reloadedValue ? { label: reloadedLabel, value: reloadedValue} : null)\r\n                        :  getTag(value)\r\n                    :\r\n                    <FormControl variant='outlined' className={classes.form}>\r\n                        <OutlinedInput\r\n                            autoFocus={true}\r\n                            inputRef={input}\r\n                            value={ searchText || '' }\r\n                            onChange={handleChange}\r\n                            placeholder={placeholder}\r\n                            className={clsx(classes.searchInput)}\r\n                            onFocus={() => setOnFocus(true)}\r\n                        />\r\n                    </FormControl>\r\n                }\r\n                {\r\n                    Boolean(menuOptions.length) &&\r\n                    <Menu         \r\n                        anchorEl={anchorEl}\r\n                        open={Boolean(anchorEl)}\r\n                        onClose={() => setAnchorEl(null)}\r\n                        classes={{\r\n                            paper : classes.menu\r\n                        }}\r\n                        keepMounted\r\n                        anchorOrigin={{\r\n                            vertical: 'bottom',\r\n                            horizontal: 'right',\r\n                        }}\r\n                        transformOrigin={{\r\n                            vertical: 'top',\r\n                            horizontal: 'right',\r\n                        }}\r\n                    >\r\n                    {\r\n                        menuOptions.map((v,i) => {\r\n                            return (\r\n                                <MenuItem\r\n                                    key={i}\r\n                                    onClick={handleClick(v.value)}\r\n                                    className={classes.menuitem}\r\n                                    style={{ direction: lang.code === 'he' ? 'rtl' : 'ltr'}}\r\n                                >\r\n                                    {v.label}\r\n                                </MenuItem>\r\n                            )\r\n                            \r\n                        })\r\n                    }\r\n                    </Menu>\r\n                }\r\n            </div>   \r\n        </ClickAwayListener>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        margin: '5px',\r\n        padding: '0 5px',\r\n        maxWidth: '450px',\r\n        minHeight: '43px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '50px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        transition: 'box-shadow 0.2s ease-in',\r\n        '&:hover': {\r\n            boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n            transition: 'box-shadow 0.2s ease-in'\r\n        }\r\n\r\n    },\r\n    focused: {\r\n        boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n        background: 'rgba(0,0,0,0.1)',\r\n        backdropFilter: 'blur(40px)'\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        \r\n    },\r\n    searchInput: {\r\n        height: '34px',\r\n        width: '98.5%',\r\n        margin: '3px 0.75%',\r\n        borderRadius: '5px 25px 25px 5px',\r\n        color: 'white',\r\n        '& input': {\r\n            padding: '12.5px 14px',\r\n        },\r\n        '& fieldset': {\r\n            border: '0'\r\n        } \r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        marginRight: '5px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        \r\n    },\r\n    menu: {\r\n        marginTop: '55px',\r\n        background: 'rgba(0,0,0,0.5)',\r\n        backdropFilter: 'blur(10px)',\r\n        color: 'white'\r\n    },\r\n    menuitem: {\r\n        minWidth: '200px'\r\n    },\r\n    tag: {\r\n        padding: '5px 10px',\r\n        borderRadius: '50px',\r\n        boxShadow: 'rgba(0,0,0,0.25) 0px 0px 3px 1px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        color: 'white',\r\n        margin: '3px 0'\r\n    },\r\n    tagLabel: {\r\n        padding: '0 5px'\r\n    },\r\n    removeBtn: {\r\n        padding: '4px',\r\n        color: 'white'\r\n    },\r\n    tagRemove: {\r\n        fontSize: '16px'\r\n    },\r\n    selected: {\r\n        width: 'fit-content'\r\n    }\r\n}))\r\n\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\systemsApi.js",["395"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\System.js",["396","397","398"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemName.js",["399","400"],"import React, { useState } from 'react';\r\nimport { makeStyles, useMediaQuery, Button, Fade, OutlinedInput, FormControl, InputLabel, ClickAwayListener, IconButton, } from '@material-ui/core';\r\nimport SaveRoundedIcon from '@material-ui/icons/SaveRounded';\r\nimport ClearRoundedIcon from '@material-ui/icons/ClearRounded';\r\nimport { updateSystemName } from '../../../api/systemsApi'\r\n\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\r\nimport { green, red } from '@material-ui/core/colors';\r\n\r\nexport const SystemName = ({ systemId, editName, setEditName, setSystemName, title }) => {\r\n\r\n    const classes = useStyles();\r\n    const { t, i18n } = useTranslation();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const [ textValue, setTextValue ] = useState(title);\r\n    const [ editNameHover, setEditNameHover ] = useState(false);\r\n\r\n    const handleChange = event => {\r\n        setTextValue(event.target.value);\r\n    };\r\n\r\n    const handleSave = async () => {\r\n         await updateSystemName(systemId, textValue);\r\n         setSystemName(textValue);\r\n         setEditName(false);\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                editName ?\r\n                <ClickAwayListener onClickAway={() => setEditName(false)}>\r\n                    <div className={classes.editContainer}>\r\n                        <FormControl variant='outlined' className={classes.textInput}>\r\n                            <InputLabel htmlFor='olip' shrink>{t(\"systemsModule.systemName\")}</InputLabel>\r\n                            <OutlinedInput\r\n                                autoFocus\r\n                                notched\r\n                                id='olip' \r\n                                value={ textValue }\r\n                                onChange={handleChange}\r\n                                labelWidth={75}\r\n                                className={classes.input} \r\n                            />\r\n                        </FormControl>\r\n                        <IconButton \r\n                            className={classes.save}\r\n                            onClick={handleSave}\r\n                        >\r\n                            <SaveRoundedIcon className={classes.icon}/>\r\n                        </IconButton>\r\n                        <IconButton \r\n                            className={classes.cancel}\r\n                            onClick={() => setEditName(false)}\r\n                        >\r\n                            <ClearRoundedIcon className={classes.icon} />\r\n                        </IconButton>\r\n                       </div> \r\n                </ClickAwayListener>\r\n                \r\n                : \r\n                <Button \r\n                    className={classes.systemName}\r\n                    onMouseEnter={() => setEditNameHover(true)}\r\n                    onMouseLeave={() => setEditNameHover(false)}\r\n                    onClick={() => { setEditNameHover(false); setEditName(true)}}\r\n                >\r\n                    { title }\r\n                    {\r\n                        editNameHover &&\r\n                        <Fade in={true} timeout={700}>\r\n                            <EditRoundedIcon style={{ \r\n                                margin: '0 10px 0 0',\r\n                                fontSize: '16px'\r\n                            }}/>\r\n                        </Fade>\r\n                        \r\n                    }\r\n                </Button>\r\n            }\r\n        </React.Fragment>                    \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    editContainer: {\r\n        height: 'auto',\r\n        margin: 'auto 0',\r\n        width: '100%',\r\n        dispaly: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    systemName: {\r\n        width: 'auto',\r\n        color: 'white',\r\n        margin: 'auto 20px',\r\n        fontSize: '16px',\r\n        whiteSpace: 'wrap',\r\n        borderRadius: '50px',\r\n        padding: '5px 20px',\r\n        textAlign: 'left'\r\n    },\r\n    textInput: {\r\n        width: '65%',\r\n        margin: '15px 5px 15px 10px',\r\n        '& label.Mui-focused': {\r\n            color: 'white',\r\n        },\r\n        '& label': {\r\n            color: 'white'\r\n        },\r\n        '& .MuiOutlinedInput-root': {\r\n            '& fieldset': {\r\n                borderColor: 'white',\r\n            },\r\n            '&:hover fieldset': {\r\n                borderColor: 'rgba(255,255,255,0.7)',\r\n            },\r\n            '&.Mui-focused fieldset': {\r\n                borderColor: 'rgba(255,255,255,0.7)',\r\n              },\r\n        },\r\n        \r\n    },\r\n    input: {\r\n        color: 'white',\r\n        height: '45px',\r\n        borderRadius: '25px',\r\n        padding: '10px',\r\n        '&:focus': {\r\n            border: '2px solid white'\r\n        }\r\n\r\n    },\r\n    icon: {\r\n        color: 'white',\r\n        fontSize: '20px',\r\n        padding: '0px',\r\n        '&hover': {\r\n\r\n        }\r\n    },\r\n    save: {\r\n        background: green[800],\r\n        padding: '8px',\r\n        margin: '18px 5px',\r\n        \r\n    },\r\n    cancel: {\r\n        background: red[800],\r\n        padding: '8px',\r\n        margin: '18px 5px',\r\n       \r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\AddLinkedUser.js",["401","402","403"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { Grid, makeStyles, Paper, FormControl, IconButton, useMediaQuery, Fade, Modal, Backdrop,Select, MenuItem, Button } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport ClearRoundedIcon from '@material-ui/icons/ClearRounded';\r\nimport { LanguageContext } from '../../../context/LanguageContext';\r\nimport { getUserList } from '../../../api/userApi';\r\nimport clsx from 'clsx'\r\n\r\n\r\n\r\nexport const AddLinkedUser = ({ handleClose, handleSave, isOpen, linkedUsers }) => {\r\n\r\n    const classes = useStyles();\r\n    const { lang } = useContext(LanguageContext);\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const { t, i18n } = useTranslation();\r\n    const [ userList, setUserList ] = useState([]);\r\n    const [ selectedUser, setSelectedUser ] = useState(null)\r\n    \r\n    useEffect(() => {\r\n        getUserList()\r\n        .then(data => {\r\n            let ul = linkedUsers.map(l => l._id);\r\n            setUserList(data.filter(u => ul.indexOf(u._id) === -1 ));\r\n        })\r\n    }, [])\r\n\r\n    const handleChange = event => {\r\n        setSelectedUser(event.target.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal\r\n            open={isOpen}\r\n            onClose={handleClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout: 500\r\n            }}\r\n            className={classes.modal}\r\n        >\r\n            <Fade in={isOpen}>\r\n                <Grid container justify='center' alignItems='center' style={{ outline: '0'}}>\r\n                    <Grid item xl={3}>\r\n                        <Paper \r\n                            className={classes.paper} \r\n                            style={{ direction: lang.dir }}\r\n                            elevation={6}    \r\n                        >\r\n                            <div className={classes.header}>\r\n                                <div className={classes.title}>\r\n                                    {t(\"systemsModule.addRelatedUserTitle\")}\r\n                                </div>\r\n                                <IconButton className={classes.closeBtn} onClick={handleClose}>\r\n                                    <ClearRoundedIcon className={classes.icon}/>\r\n                                </IconButton>  \r\n                            </div>\r\n                            <div className={classes.instructions}>\r\n                                {t(\"systemsModule.chooseUserToAdd\")}\r\n                            </div>\r\n                            <FormControl variant='outlined' className={classes.textInput} >\r\n                                <Select\r\n                                    value={selectedUser}\r\n                                    onChange={handleChange}\r\n                                    className={classes.menu}\r\n                                    MenuProps={{\r\n                                        classes: {\r\n                                            paper: classes.menupaper,\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    {\r\n                                        userList.map( (user, i) => {\r\n                                            return (\r\n                                                <MenuItem\r\n                                                    className={classes.menuitem}\r\n                                                    value={user._id} \r\n                                                    key={i}\r\n                                                    style={{ direction: lang.code === 'he' ? 'rtl' : 'ltr'}}\r\n                                                >\r\n                                                    {`${user.firstName} ${user.lastName}`}\r\n                                                </MenuItem>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Select>\r\n                            </FormControl>\r\n                            <div className={classes.controls}>\r\n                                <Button\r\n                                    className={clsx(classes.control, classes.save)}\r\n                                    onClick={() => handleSave(selectedUser)}\r\n                                    disabled={!selectedUser}\r\n                                >\r\n                                    {t(\"alert.confirm\")}\r\n                                </Button>\r\n                                <Button\r\n                                    className={clsx(classes.control, classes.cancel)}\r\n                                    onClick={handleClose}\r\n                                >\r\n                                    {t(\"alert.cancel\")}\r\n                                </Button>\r\n                            </div>\r\n                        </Paper>\r\n                    </Grid>\r\n                    \r\n                </Grid> \r\n                \r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        background: 'rgba(0,0,0,0.4)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        padding: '10px',\r\n        borderRadius: '10px',\r\n        '&:focus': {\r\n            outline: 'none'\r\n        }\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backdropFilter: 'blur(10px)'   \r\n    },\r\n    header: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center'\r\n    },\r\n    title: {\r\n        color: 'white',\r\n        fontSize: '18px',\r\n        padding: '5px 10px',\r\n        height: 'fit-content'\r\n    },\r\n    closeBtn: {\r\n        fontSize: '20px',\r\n        height: '40px',\r\n        width: '40px'\r\n    },\r\n    icon: {\r\n        color: 'white',\r\n        borderRadius: '25px',\r\n        padding: '5px',\r\n        '&:hover': {\r\n            background: 'rgba(255,255,255,0.2)'\r\n        }\r\n    },\r\n    instructions: {\r\n        width: 'auto',\r\n        color: 'rgba(255,255,255,0.6)',\r\n        fontSize: '12px',\r\n        margin: '0px 10px'\r\n    },\r\n    menu: {\r\n        color: 'white',\r\n        '&:hover': {\r\n            borderColor: 'white'\r\n        }\r\n    },\r\n    menupaper: {\r\n        background: 'rgba(0,0,0,0.3)',\r\n        backdropFilter: 'blur(10px)',\r\n        maxHeight: '200px',\r\n        overflowY: 'auto',\r\n    },\r\n    menuitem: {\r\n        color: 'white'\r\n    },\r\n    textInput: {\r\n        margin: '20px 5px',\r\n        width: '300px',\r\n        '& input': {\r\n            color: 'white',\r\n            paddingLeft: '20px',\r\n        },\r\n        '& label': {\r\n            color: 'white',\r\n            paddingLeft: '5px' \r\n        },\r\n        '& fieldset': {\r\n            borderColor: 'rgba(255,255,255,0.6)',\r\n            borderRadius: '42px'\r\n        }    \r\n    },\r\n    controls: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    control: {\r\n        width: '30%',\r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        fontSize: '16px',\r\n        margin: '5px',\r\n        padding: '5px 30px',\r\n        borderRadius: '30px',\r\n        color: 'white', \r\n    },\r\n    save: {\r\n        background: 'rgba(0,0,0,0.2)', \r\n        '&:hover': {\r\n            background: 'black'\r\n        },\r\n        '&:disabled': {\r\n            color: 'rgba(255,255,255,0.3)'\r\n        }\r\n    },\r\n    cancel: {\r\n        border: '0px solid grey',\r\n        '&:hover': {\r\n            borderWidth: '1px'\r\n        }\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemsHeader.js",["404"],"import React from 'react';\r\nimport { Grid, makeStyles, Paper, useMediaQuery } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport const SystemsHeader = () => {\r\n\r\n    const classes = useStyles();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const { t, i18n } = useTranslation();\r\n\r\n    return (\r\n        <Grid item xs={ 12 } sm={7} md={8} lg={11} xl={11}>\r\n            <Paper elevation={9} className={classes.headerPaper}>\r\n                <div className={classes.systemName}>\r\n                    {t(\"systemsModule.systemName\")}\r\n                </div>\r\n                {\r\n                    !downSm &&\r\n                    <div className={classes.actionsContainer}>\r\n                        <div className={classes.iconHeader}>\r\n                            {t(\"systemsModule.moreDetails\")}\r\n                        </div>\r\n                        <div className={classes.iconHeader}>\r\n                            {t(\"systemsModule.tasks\")}\r\n                        </div>\r\n                        <div className={classes.iconHeader}>\r\n                            {t(\"systemsModule.faults\")}\r\n                        </div>\r\n                        <div className={classes.iconHeader}>\r\n                            {t(\"systemsModule.documents\")}\r\n                        </div>\r\n                        <div className={classes.iconHeader}>\r\n                            {t(\"systemsModule.changeManager\")}\r\n                        </div>\r\n                        <div className={classes.iconHeader}>\r\n                            {t(\"systemsModule.users\")}\r\n                        </div>      \r\n                        <div className={classes.ownerHeader}>\r\n                            {t(\"systemsModule.ownerHeader\")}\r\n                        </div>\r\n                    </div>\r\n                } \r\n            </Paper>\r\n        </Grid>                          \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    headerPaper: {\r\n        height: '45px',\r\n        background: 'rgba(0,0,0,0.7)',\r\n        margin: '5px',\r\n        borderRadius: '5px',\r\n        color: 'white',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        fontSize: '12px'\r\n    },\r\n    systemName: {\r\n        margin: 'auto 20px',\r\n        whiteSpace: 'nowrap'\r\n    },\r\n    actionsContainer: {\r\n        display: 'flex',\r\n        fontSize: '12px',\r\n        width: '668px',\r\n        justifyContent: 'flex-end'\r\n \r\n    },\r\n    iconHeader: {\r\n        width: '78px',\r\n        textAlign: 'center',\r\n        margin: 'auto'\r\n    },\r\n    ownerHeader: {\r\n        width: '190px',\r\n        textAlign: 'center',\r\n        margin: 'auto',\r\n        [theme.breakpoints.down('md')]: {\r\n            margin: 'auto 0'\r\n        }\r\n    }\r\n\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemControls.js",["405","406","407","408"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemLinkedUsers.js",["409","410"],"import React, { useState, } from 'react';\r\nimport { Grid, makeStyles, Collapse, Tooltip, IconButton, useMediaQuery, Fade } from '@material-ui/core';\r\nimport { UserItem } from '../../user/UserItem';\r\nimport { getFullName } from '../../../api/genericApi';\r\nimport ClearRoundedIcon from '@material-ui/icons/ClearRounded';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { AlertDialog } from '../../reuseables/AlertDialog';\r\nimport { addUser, removeSystemUser } from '../../../api/systemsApi';\r\nimport AddRoundedIcon from '@material-ui/icons/AddRounded';\r\nimport { AddLinkedUser } from './AddLinkedUser';\r\n\r\nexport const SystemLinkedUsers = ({ userList, setData, systemId, isOpen }) => {\r\n\r\n    const classes = useStyles();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const [ linkedUsers, setLinkedUsers ] = useState(userList || []);\r\n    const [ showControls, setShowControls ] = useState(null);\r\n    const [ showAddLinkedUser, setShowAddLinkedUser ] = useState(false);\r\n    const [ alertDialog ,setAlertDialog ] = useState(null)\r\n    const { t, i18n } = useTranslation(); \r\n\r\n    const confirmRemove = linkedUser => event => {\r\n        event.stopPropagation();\r\n        let toRemove = linkedUsers.find(user => user._id === linkedUser._id)\r\n        setAlertDialog({\r\n            text: `${t(\"systemsModule.userRemoveConfirmText\")} ${getFullName(toRemove)}?`,\r\n            title: t(\"systemsModule.userRemoveConfirmTitle\"),\r\n            handleConfirm: async () => { \r\n                const res = await removeSystemUser(systemId, linkedUser._id);\r\n                if (res) {\r\n                    setData(res);\r\n                    setAlertDialog(null);\r\n                    setLinkedUsers([]);\r\n                    setLinkedUsers(res.linkedUsers);\r\n                }  \r\n            },\r\n            handleCancel: () => setAlertDialog(null)\r\n        })\r\n    }\r\n\r\n    const handleAddLinkedUser = () => {\r\n        if (showAddLinkedUser) {\r\n            setShowAddLinkedUser(false);\r\n            return;\r\n        }\r\n        setShowAddLinkedUser(true);\r\n    }\r\n\r\n    const handleAddLinekdUser = async userId => {\r\n        const res = await addUser(systemId, userId);\r\n        if (res) {\r\n            setData(res);\r\n            setLinkedUsers(res.linkedUsers);\r\n            setShowAddLinkedUser(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Collapse in={isOpen} >\r\n            <div className={classes.linkedusers}>\r\n                <Grid container justify='flex-start' className={ classes.container} alignItems='center'>\r\n                    <Grid item xs={12} className={classes.titleContainer}>\r\n                        <div className={classes.title}>\r\n                            {t(\"systemsModule.assignedUsers\")}\r\n                        </div>\r\n                        <IconButton \r\n                            className={classes.addBtn}\r\n                            onClick={handleAddLinkedUser}\r\n                        >\r\n                            <AddRoundedIcon className={classes.icon}/>\r\n                        </IconButton>\r\n                        {\r\n                            showAddLinkedUser &&\r\n                            <AddLinkedUser \r\n                                isOpen={showAddLinkedUser}\r\n                                handleClose={handleAddLinkedUser}\r\n                                linkedUsers={linkedUsers}\r\n                                handleSave={handleAddLinekdUser}\r\n\r\n                            />\r\n                        }\r\n                        \r\n                    </Grid>\r\n                    {\r\n                        linkedUsers.length ? \r\n                        linkedUsers.map((linkedUser, i) => {\r\n                            return (\r\n                                <Grid item xs={12} sm={7} md={6} lg={3} className={classes.gridItem}>\r\n                                    <div \r\n                                        className={classes.userCont}\r\n                                        onMouseEnter={() => setShowControls(i)}\r\n                                        onMouseLeave={() => setShowControls(null)}\r\n                                        key={i}\r\n                                    >\r\n                                        <UserItem \r\n                                            user={linkedUser}\r\n                                            showTitle\r\n                                            showPhone\r\n                                            showName\r\n                                            avatarSize={'50px'}\r\n                                            size={13}\r\n                                        />\r\n                                        <Fade in={showControls === i || downSm}>\r\n                                            <Tooltip title={t(\"systemsModule.removeUser\")}>\r\n                                                <IconButton \r\n                                                    className={classes.removeuser}\r\n                                                    onClick={confirmRemove(linkedUser)}\r\n                                                >\r\n                                                    <ClearRoundedIcon className={classes.icon}/>\r\n                                                </IconButton>\r\n                                            </Tooltip>\r\n                                        </Fade> \r\n                                    </div>\r\n                                </Grid>\r\n                            )\r\n                        }) :\r\n                        <div className={classes.noUsers}>\r\n                            {t(\"systemsModule.noUsersAssigned\")}\r\n                        </div>\r\n\r\n                    }\r\n                    {\r\n                        Boolean(alertDialog) &&\r\n                        <AlertDialog \r\n                            alertDialog={alertDialog}\r\n                            open={Boolean(alertDialog)}\r\n                        />\r\n                    }    \r\n                </Grid>\r\n            </div>\r\n        </Collapse>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    linkedusers: {\r\n        width: 'auto',\r\n        margin: '10px',\r\n        borderRadius: '25px',\r\n        background: 'rgba(0,0,0,0.1)',\r\n        boxShadow: '0px 0px 5px 2px rgba(0,0,0,0.2)',\r\n    },\r\n    container: {\r\n        width: 'auto',\r\n        padding: '5px',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        borderRadius: '5px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    gridItem: {\r\n        borderRadius: '20px',\r\n        padding: '5px 10px',\r\n        '&:hover':{\r\n            background: 'rgba(0,0,0,0.2)',\r\n            boxShadow: '-0px 0px 5px 2px rgba(0,0,0,0.2)',\r\n            \r\n        }\r\n    },\r\n    titleContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        borderBottom: '1px solid rgba(255,255,255,0.2)',\r\n        margin: '0 10px',\r\n        padding: '5px 5px 10px'\r\n\r\n    },\r\n    addBtn: {\r\n        fontSize: '20px',\r\n        color: 'white',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        padding: '2px',\r\n        borderRadius: '50px',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.2)'\r\n        }\r\n    },\r\n    cell: {\r\n        color: 'white',\r\n        textAlign: 'center'\r\n    },\r\n    userCont: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        padding: '5px 10px',\r\n        position: 'relative'\r\n    },\r\n    removeuser: {\r\n        padding: '4px',\r\n        margin: 'auto 4px',\r\n        height: '50%',\r\n        '&:hover' :{\r\n            background: 'rgba(255,255,255,0.1)'\r\n        }\r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        color: 'white',\r\n        padding: '8px'\r\n    },\r\n    title: {\r\n        color: 'white',\r\n        fontSize: '16px'\r\n    },\r\n    noUsers: {\r\n        margin: '10px',\r\n        padding: '0px 0 15px',\r\n        color: 'white',\r\n        fontSize: '14px',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        padding: '10px 20px',\r\n        borderRadius: '25px'\r\n    }\r\n    \r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\Faults.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultsControls.js",["411","412","413"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\faultsApi.js",["414"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultListView.js",["415","416","417"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultMinified.js",["418","419"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\StatusTag.js",["420","421"],"\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport CheckCircleOutlineRoundedIcon from '@material-ui/icons/CheckCircleOutlineRounded';\r\nimport HourglassEmptyRoundedIcon from '@material-ui/icons/HourglassEmptyRounded';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\r\nimport clsx from 'clsx';\r\nimport { green, red, yellow } from '@material-ui/core/colors';\r\n\r\nexport const StatusTag = ({status, type, size}) => {\r\n\r\n    const classes = useStyles();\r\n    const { t, i18n } = useTranslation();\r\n    \r\n    return (\r\n        <div \r\n            className={clsx(classes.statusTag,classes[status.statusId])}\r\n            style={{ fontSize: size || '14px'}}    \r\n        >\r\n            {\r\n                status.statusId  === 'ready' ? \r\n                <PlayCircleOutlineIcon className={classes.icon}/> :\r\n                status.statusId  === 'inProgress' ? \r\n                <CachedIcon className={classes.icon} /> :\r\n                status.statusId  === 'pending' ?\r\n                <HourglassEmptyRoundedIcon className={classes.icon}className={classes.icon} /> : \r\n                status.statusId  === 'closed' ?\r\n                <CheckCircleOutlineRoundedIcon className={classes.icon} /> : null\r\n            }\r\n            <div className={classes.title}>\r\n                {t(`${type}sModule.statuses.${status.statusId}`)}\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    statusTag: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        width: 'fit-content',\r\n        padding: '0 10px',\r\n        borderRadius: '25px',\r\n        whiteSpace: 'nowrap'\r\n\r\n    },\r\n    title: {\r\n        padding: '7px 10px 7px 0px'\r\n    },\r\n    ready: {\r\n       \r\n        background: red[600],\r\n        color: 'white'\r\n    },\r\n    inProgress: {\r\n        background: yellow[500],\r\n        color: 'black',\r\n        \r\n    },\r\n    pending: {\r\n        background: 'rgba(255,255,255,0.4)',\r\n        color: 'black'\r\n    },\r\n    closed: {\r\n        background: green[800],\r\n        color: 'white'\r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        padding: '0 5px'\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultLink.js",["422"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nexport const FaultLink = ({ faultId, size }) => {\r\n\r\n    return (\r\n        <Link\r\n            to={`/workspace/faults/${faultId}`}\r\n            style={{ textDecoration: 'none' }}\r\n        >\r\n           <span style={{\r\n               color: 'white',\r\n               fontSize: `${size}px`,\r\n               whiteSpace: 'nowrap'\r\n           }}>\r\n             {faultId}\r\n           </span>\r\n        </Link>\r\n    )\r\n}","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultView.js",["423"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\Carousel.js",["424","425","426","427"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { makeStyles, Slide, Paper, IconButton, Backdrop, Modal } from '@material-ui/core'\r\nimport ChevronLeftRoundedIcon from '@material-ui/icons/ChevronLeftRounded';\r\nimport ChevronRightRoundedIcon from '@material-ui/icons/ChevronRightRounded';\r\nimport clsx from 'clsx';\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\nimport { ClearRounded } from '@material-ui/icons';\r\nimport ZoomInRoundedIcon from '@material-ui/icons/ZoomInRounded';\r\nimport ZoomOutRoundedIcon from '@material-ui/icons/ZoomOutRounded';\r\nimport ZoomOutMapRoundedIcon from '@material-ui/icons/ZoomOutMapRounded';\r\n\r\nexport const Carousel = ({ images, isOpen, size }) => {\r\n    \r\n    const classes = useStyles();\r\n    const [ slideIn, setSlideIn ] = useState(isOpen);\r\n    const [ slideDirection, setSlideDirection ] = useState('left');\r\n    const [ index, setIndex ] = useState(0);\r\n    const { lang } = useContext(LanguageContext);\r\n    const [ photoViewMode, setPhotoViewMode ] = useState(false);\r\n    const [ picSize, setPicSize ] = useState(size)\r\n\r\n    useEffect(() => {\r\n        if (photoViewMode) {\r\n            setPicSize(800)\r\n        }\r\n    }, [photoViewMode])\r\n\r\n    const handleClick = dir => event => {\r\n        setSlideDirection(dir);\r\n        setSlideIn(false);\r\n \r\n        setTimeout(() => {\r\n            setIndex((index - (dir === 'left' ? 1 : -1) + images.length) % images.length);\r\n            setSlideIn(true);\r\n        }, 100)\r\n    }\r\n\r\n    const handleZoom = up => {\r\n        if (up) {\r\n            if (picSize === 1300) return;\r\n            setPicSize(picSize + 100)\r\n        } else {\r\n            if (picSize === 300) return;\r\n            setPicSize(picSize - 100)\r\n        }\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setPicSize(300);\r\n        setPhotoViewMode(false);\r\n    }\r\n\r\n    return (\r\n        <CarouselWrapper\r\n            isModal={photoViewMode}\r\n            wrapper={ children => \r\n                <Modal\r\n                    open={true}\r\n                    onClose={handleClose}\r\n                    closeAfterTransition\r\n                    BackdropComponent={Backdrop}\r\n                    BackdropProps={{\r\n                        timeout: 500\r\n                    }}\r\n                    className={classes.modal}\r\n                >\r\n                    <div className={classes.content} >\r\n                        <CarouselControls \r\n                            handleZoom={handleZoom} \r\n                            picSize={picSize} \r\n                            handleClose={handleClose}\r\n                        />\r\n                        {children}\r\n                    </div>\r\n                    \r\n                </Modal>\r\n            }\r\n        >\r\n            <div \r\n                className={classes.container}\r\n                style={{ cursor: photoViewMode ? 'default' : 'pointer'}}\r\n            >\r\n                <IconButton\r\n                    className={clsx(classes.arrow, classes.arrowLeft)}\r\n                    onClick={handleClick('left')}\r\n                    style={{ left: lang.drection === 'rtl' ? '97%' : '3%' }}\r\n                >\r\n                    <ChevronLeftRoundedIcon className={classes.icon}/>\r\n                </IconButton>\r\n                <CarouselSlide image={images[index]} size={picSize} setPhotoViewMode={setPhotoViewMode}/>\r\n                <IconButton\r\n                    className={clsx(classes.arrow, classes.arrowRight)}\r\n                    onClick={handleClick('right')}\r\n                    style={{ right: lang.drection === 'rtl' ? '97%' : '3%' }}\r\n                >\r\n                    <ChevronRightRoundedIcon className={classes.icon}/>\r\n                </IconButton>\r\n            </div>\r\n        </CarouselWrapper>\r\n        \r\n    )\r\n}\r\n\r\nconst CarouselSlide = ({image, size, setPhotoViewMode}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Paper \r\n            className={classes.paper} \r\n            elevation={0} \r\n            style={{ height: `${size}px`}}\r\n            onClick={() => setPhotoViewMode(true)}\r\n        >\r\n            <img src={image} className={classes.image} />\r\n        </Paper>   \r\n    )\r\n}\r\n\r\nconst CarouselControls = ({handleZoom, picSize, handleClose}) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.controls}>\r\n            <div className={classes.close}>\r\n                <IconButton\r\n                    className={classes.iconBtn}\r\n                    onClick={handleClose}\r\n                >\r\n                    <ClearRounded className={classes.icon} />\r\n                </IconButton>\r\n            </div>\r\n            \r\n            <div className={classes.zoomControl}>\r\n                <IconButton \r\n                    className={classes.iconBtn} \r\n                    onClick={() => handleZoom(true)} \r\n                    disabled={picSize === 1300}\r\n                >\r\n                    <ZoomInRoundedIcon className={classes.icon} />\r\n                </IconButton>\r\n                <IconButton \r\n                    className={classes.iconBtn} \r\n                    onClick={() => handleZoom(false)}\r\n                    disabled={picSize === 300}\r\n                >\r\n                    <ZoomOutRoundedIcon className={classes.icon} />\r\n                </IconButton>\r\n                <IconButton className={classes.iconBtn} >\r\n                    <ZoomOutMapRoundedIcon className={classes.icon} />\r\n                </IconButton>\r\n            </div>\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nconst CarouselWrapper = ({isModal, wrapper, children }) =>\r\n    isModal ? wrapper(children) : children\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backdropFilter: 'blur(10px)'   \r\n    },\r\n    container: {\r\n        display: 'flex',\r\n        position: 'relative',\r\n        width: '100%',\r\n        justifyContent: 'center',\r\n        padding: '10px 5px',\r\n        borderRadius: '10px',\r\n        outline: 'none'\r\n    },\r\n    content: {\r\n        height: '100%', \r\n        width: '100%', \r\n        outline: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    paper: {\r\n        padding: 0,\r\n        margin: 0,\r\n        width: '100%',\r\n        direction: 'ltr',\r\n        background: 'transparent',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        userSelect: 'none'\r\n    },\r\n    image: {\r\n        maxHeight: '90%',\r\n        maxWidth: '90%',\r\n        borderRadius: '5px',\r\n        objectFit: 'cover',\r\n        userSelect: 'none'\r\n    },\r\n    arrow: {\r\n        position: 'absolute',\r\n        background: 'rgba(0,0,0,0.6)',\r\n        color: 'white',\r\n        zIndex: 1,\r\n        padding: '5px',\r\n\r\n    },\r\n    arrowLeft: {\r\n        top: '50%',\r\n        transform: 'translateY(-50%)'\r\n    },\r\n    arrowRight: {\r\n        top: '50%',\r\n        transform: 'translateY(-50%)'\r\n    },\r\n    icon: {\r\n        fontSize: '32px',\r\n    },\r\n    iconBtn: {\r\n        background: 'rgba(255,255,255,0.6)',\r\n        color: 'black',\r\n        padding: '8px',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.8)',\r\n            color: 'white',\r\n        }\r\n\r\n    },\r\n    controls: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        position: 'absolute',\r\n        top: 0,\r\n        width: '90%',\r\n        padding: '2% 5%',\r\n        zIndex: 1\r\n    },\r\n    zoomControl: {\r\n        width: '170px',\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultViewControls.js",["428"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\UserList.js",["429"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\CommentSection.js",["430","431","432","433"],"import { Avatar, Button, ClickAwayListener, FormControl, Grid, IconButton, makeStyles, OutlinedInput, useMediaQuery } from '@material-ui/core';\r\nimport { green, red } from '@material-ui/core/colors';\r\nimport ClearRoundedIcon from '@material-ui/icons/ClearRounded';\r\nimport SaveRoundedIcon from '@material-ui/icons/SaveRounded';\r\nimport SendRoundedIcon from '@material-ui/icons/SendRounded';\r\nimport clsx from 'clsx';\r\nimport _ from 'lodash';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport { getDatediffString } from '../../api/genericApi';\r\nimport { AuthContext } from '../../context/AuthContext';\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\n\r\n\r\n\r\nexport const CommentSection = ({ parent, saveComment, updateComment }) => {\r\n\r\n    const classes = useStyles();\r\n    const { t, }= useTranslation();\r\n    const { lang } = useContext(LanguageContext);\r\n    const { auth } = useContext(AuthContext);\r\n    const [ commentList, setCommentList ] = useState(parent.comments || []);\r\n    const [ parentId, setParentId ] = useState(parent._id)\r\n    const [ text, setText ] = useState('');\r\n    const [ textFocused, setTextFocused ] = useState(false);\r\n    const [ editComment, setEditComment ] = useState(null);\r\n    const [ numOfComments, setNumOfComments ] = useState(3); \r\n    \r\n    useEffect(() => {\r\n        setCommentList(parent.comments);\r\n        setParentId(parent._id);\r\n    }, [parent])\r\n\r\n\r\n    const handleChange = event => {\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const handleSendComment = event => {\r\n        event.stopPropagation();\r\n        saveComment(parentId, auth.user._id, text)\r\n        .then(data => {\r\n            setCommentList(data.comments)\r\n        })\r\n        .finally(() => {\r\n            setText('');\r\n            setTextFocused(false);\r\n        })\r\n        \r\n    }\r\n\r\n    const handleEditChange = event => {\r\n        setEditComment({\r\n            ...editComment,\r\n            text: event.target.value\r\n        })\r\n    }\r\n\r\n    const handleUpdateComment = async () => {\r\n        const res = await updateComment(parentId, editComment._id, editComment.text);\r\n        setCommentList(res.comments);\r\n        setEditComment(null);\r\n    }\r\n\r\n    return (\r\n        <Grid container >\r\n            <Grid item xs={12} >\r\n                <div className={classes.title}>\r\n                    {t(\"comments.title\")}\r\n                </div>\r\n            </Grid>\r\n            {\r\n                numOfComments < commentList.length &&\r\n                <Grid item xs={12}>\r\n                    <Button\r\n                        className={classes.showMore}\r\n                        onClick={() => setNumOfComments(numOfComments + 3)}\r\n                    >\r\n                        {t(\"comments.showMore\")}\r\n                    </Button>\r\n                </Grid>\r\n                \r\n            }\r\n            {\r\n                _.takeRight(commentList, numOfComments).map((c,i) => \r\n                    <Grid item xs={12} className={clsx(classes.comment)} key={i}>\r\n                        <div className={classes.commentContainer}>\r\n                            <Avatar className={classes.avatar} alt={'abc'} src={c.user.avatar} style={{ height: '50px', width: '50px' }}/>\r\n                            <div className={classes.data}>\r\n                                <div className={classes.commenter}>\r\n                                    {`${c.user.firstName} ${c.user.lastName}`}\r\n                                </div>\r\n                                {\r\n                                    (Boolean(editComment) && editComment._id === c._id) ? \r\n                                    <div className={classes.editContainer}>\r\n                                        <FormControl variant='outlined' className={classes.form}>\r\n                                            <OutlinedInput\r\n                                                value={ editComment.text || '' }\r\n                                                onChange={handleEditChange}\r\n                                                placeholder={t(\"comments.add\")}\r\n                                                className={clsx(classes.textInput, textFocused ? classes.focused : null)}\r\n                                                onFocus={() => setTextFocused(true)}\r\n                                                multiline\r\n                                                classes={{\r\n                                                    inputMultiline: classes.multiLine\r\n                                                }}\r\n                                            />\r\n                                            \r\n                                        </FormControl>\r\n                                        <IconButton \r\n                                            className={classes.save}\r\n                                            onClick={handleUpdateComment}\r\n                                        >\r\n                                            <SaveRoundedIcon className={classes.icon}/>\r\n                                        </IconButton>\r\n                                        <IconButton \r\n                                            className={classes.cancel}\r\n                                            onClick={() => setEditComment(null)}\r\n                                        >\r\n                                            <ClearRoundedIcon className={classes.icon} />\r\n                                        </IconButton>\r\n                                    </div>\r\n                                    :\r\n                                    <div className={classes.commentText}>\r\n                                        {`${c.text}`}\r\n                                    </div>\r\n                                }\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className={classes.commentFooter}>\r\n                            {/* <div className={classes.footerField}> \r\n                                <Button className={classes.footerBtn}> \r\n                                    {t(\"comments.reply\")}\r\n                                </Button>\r\n                            </div> */}\r\n                            {\r\n                                c.user._id == auth.user._id &&\r\n                                <div className={classes.footerField}>\r\n                                    {/* {` · `} */}\r\n                                    <Button \r\n                                        className={classes.footerBtn}\r\n                                        onClick={() => setEditComment(c)}\r\n                                    >\r\n                                        {t(\"comments.edit\")}\r\n                                    </Button>\r\n                                </div>\r\n                                 \r\n                            }\r\n                            <div className={classes.footerField}>\r\n                            {` · `}\r\n                            <div className={ classes.timePassed}>\r\n                                {`${getDatediffString(c.createdAt)}`}    \r\n                            </div>\r\n                            \r\n                            </div>\r\n                                      \r\n                        </div>\r\n                    </Grid>\r\n                )\r\n                \r\n            }\r\n            \r\n           \r\n            <ClickAwayListener onClickAway={() => setTextFocused(false)}> \r\n                <Grid item xs={12} sm={12} md={8} lg={6} xl={6} className={classes.addComment}>\r\n                    <FormControl variant='outlined' className={classes.form}>\r\n                        <OutlinedInput\r\n                            value={ text || '' }\r\n                            onChange={handleChange}\r\n                            placeholder={t(\"comments.add\")}\r\n                            className={clsx(classes.textInput, textFocused ? classes.focused : null)}\r\n                            onFocus={() => setTextFocused(true)}\r\n                            multiline\r\n                            classes={{\r\n                                inputMultiline: classes.multiLine\r\n                            }}\r\n                        />\r\n                        \r\n                    </FormControl>\r\n                    <IconButton \r\n                        className={classes.postBtn}\r\n                        onClick={handleSendComment}\r\n                    >\r\n                        <SendRoundedIcon className={clsx(classes.icon, lang.dir === 'rtl' ? classes.mirror : null)}/>\r\n                    </IconButton> \r\n                </Grid>\r\n            </ClickAwayListener>\r\n        </Grid>\r\n    \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    title: {\r\n        color: 'white',\r\n        fontSize: '20px',\r\n        padding: '20px 30px 10px',\r\n        marginBottom: '10px',\r\n        borderBottom: '1px solid rgba(255,255,255,0.2)'\r\n    },\r\n    addComment: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: '10px',\r\n        width: 'fit-content'\r\n    },\r\n    avatar: {\r\n        margin: '0 10px'\r\n    },\r\n    form: {\r\n        color: 'white',\r\n        width: '100%'\r\n\r\n    },\r\n    textInput: {\r\n        padding: '15px 10px',\r\n        borderRadius: '42px',\r\n        '& input': {\r\n            color: 'white',\r\n            width: '80%'\r\n        },\r\n        '& label': {\r\n            color: 'white',\r\n            paddingLeft: '5px' \r\n        },\r\n        '& fieldset': {\r\n            borderColor: 'rgba(255,255,255,0.6)',\r\n            borderRadius: '42px'\r\n        },\r\n           \r\n    },\r\n    focused: {\r\n        boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n        background: 'rgba(0,0,0,0.4)'\r\n    },\r\n    postBtn: {\r\n        color: 'white',\r\n        padding: '7px',\r\n        left: '-40px',\r\n        marginBottom: '1px',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.4)',\r\n        }\r\n    },\r\n    icon: {\r\n        fontSize: '20px'\r\n    },\r\n    mirror: {\r\n        transform: 'scaleX(-1)'\r\n    },\r\n    comment: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        margin: '5px 0'\r\n    },\r\n    commentContainer: {\r\n        width: 'fit-content',\r\n        display: 'flex',\r\n        padding: '10px 30px 10px 0px',\r\n        margin: '0px 10px',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        borderRadius: '35px',\r\n        \r\n    },\r\n    commenter: {\r\n        color: 'rgba(255,255,255,0.6)',\r\n        fontSize: '13px',\r\n        padding: '5px'\r\n    },\r\n    commentText: {\r\n        color: 'white'\r\n    },\r\n    commentFooter: {\r\n        display: 'flex',\r\n        marginLeft: '40px',\r\n        height: '20px'\r\n    },\r\n    footerField: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        fontSize: '11px',\r\n        color: 'rgba(255,255,255,0.4)',\r\n    },\r\n    footerBtn: {\r\n        fontSize: '12px',\r\n        padding: '1px 2px',\r\n        margin: '0px 2px',\r\n        minWidth: '0',\r\n        width: 'fit-content',\r\n        color: 'rgba(255,255,255,0.4)',\r\n        borderRadius: '50px',\r\n        '&:hover': {\r\n            color: 'white',\r\n            textDecoration: 'underline',\r\n            boxShadow: 'none',\r\n            background: 'transparent'\r\n        }\r\n    },\r\n    timePassed: {\r\n        fontSize: '12px',\r\n        padding: '0px 2px',\r\n        margin: '0 2px',\r\n        minWidth: '0',\r\n        width: 'fit-content',\r\n        color: 'rgba(255,255,255,0.4)',\r\n    },\r\n    multiLine: {\r\n        padding: '0px 20px'\r\n    },\r\n    showMore: {\r\n        margin: '5px 30px',\r\n        color: 'white',\r\n        fontSize: '16px',\r\n        padding: '5px',\r\n        '&:hover': {\r\n            boxShadow: 'none',\r\n            background: 'inherit',\r\n            textDecoration: 'underline'\r\n        }\r\n    },\r\n    save: {\r\n        background: green[800],\r\n        padding: '8px',\r\n        margin: '18px 5px',\r\n        \r\n    },\r\n    cancel: {\r\n        background: red[800],\r\n        padding: '8px',\r\n        margin: '18px 5px',\r\n       \r\n    },\r\n    editContainer: {\r\n        height: 'auto',\r\n        margin: 'auto 0',\r\n        width: '100%',\r\n        dispaly: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultViews.js",["434","435","436"],"import { Grid, LinearProgress, makeStyles, useMediaQuery } from '@material-ui/core';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport { getFaults } from '../../../api/faultsApi';\r\nimport { updateQueryParams } from '../../../api/genericApi';\r\nimport { FaultsContext } from '../../../context/FaultsContext';\r\nimport { useQuery } from '../../reuseables/customHooks/useQuery';\r\nimport { FaultBlockView } from './FaultBlockView';\r\nimport { FaultListView } from './FaultListView';\r\nimport { FaultsControls } from './FaultsControls';\r\n\r\nexport const FaultViews = () => {\r\n\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const classes = useStyles();\r\n    const { t } = useTranslation();\r\n    const { faults, setFaults } = useContext(FaultsContext)\r\n    const [ viewType, setViewType ] = useState(query['viewType'] || 'list');\r\n    const [ isLoading, setIsLoading ] = useState(true);\r\n    \r\n\r\n    useEffect(() => {\r\n        if (!isLoading) return;\r\n        getFaults(query)\r\n        .then(data => {\r\n            if (data) {\r\n                setFaults(data)\r\n            }      \r\n        })\r\n        .finally(() => {\r\n            setIsLoading(false)\r\n        })\r\n    }, [isLoading])\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true)\r\n    }, [location.search])\r\n\r\n    useEffect(() => { \r\n        history.push({\r\n            path: location.pathname,\r\n            search: updateQueryParams(location.search, [{ name: 'viewType', value: viewType}], ['status'] )\r\n        });   \r\n    }, [viewType]);\r\n\r\n    return (\r\n        <Grid container justify={ 'center'} >\r\n            <div className={classes.pageModule}>\r\n                    {t(\"assetsModule.faults\")}\r\n            </div>\r\n            <Grid item xs={12}>\r\n                <FaultsControls \r\n                    viewType={viewType}\r\n                    setViewType={setViewType}    \r\n                />\r\n            </Grid>\r\n            {\r\n                isLoading ?\r\n                <LinearProgress />\r\n                :\r\n                <Grid item xs={12} \r\n                    className={classes.faultPresent}\r\n                    style={{ height: 'auto' }}\r\n                >\r\n                    {\r\n                        viewType === 'list' ?\r\n                        <FaultListView \r\n                            faults={faults}\r\n                        /> :\r\n                        <FaultBlockView \r\n                            faults={faults}\r\n                        />     \r\n                    }\r\n                    \r\n                </Grid>\r\n            }\r\n            \r\n        </Grid>\r\n        \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    pageModule: {\r\n        color: 'white',\r\n        padding: '10px 40px',\r\n        fontSize: '18px',\r\n        background: 'rgba(0,0,0,0.6)',\r\n        margin: '0px auto 5px',\r\n        width: '30%',\r\n        textAlign: 'center',\r\n        borderRadius: '0 0 25px 25px',\r\n        lineHeight: '1'\r\n    },\r\n    faultPresent: {\r\n        margin: '20px 10px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            margin: '20px 0',\r\n        }\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\CreateContainer.js",["437"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemAdditionalDetails.js",["438","439","440","441"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { Grid, makeStyles, Collapse, Tooltip, IconButton, useMediaQuery, LinearProgress } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { format } from 'date-fns'\r\nimport { LanguageContext } from '../../../context/LanguageContext';\r\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\r\nimport { UpsertSystem } from './UpsertSystem';\r\n\r\nexport const SystemAdditionalDetails = ({ data, isOpen, systemId, toggleEdit }) => {\r\n\r\n    const classes = useStyles();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const { lang } = useContext(LanguageContext);\r\n    const [ systemData, setSystemData ] = useState(null);\r\n    const { t, i18n } = useTranslation(); \r\n    const [ isLoading, setIsLoading ] = useState(true)\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        setSystemData(data);\r\n        setIsLoading(false);\r\n    }, [data])\r\n\r\n    return (\r\n      \r\n            isLoading ?\r\n            <LinearProgress />\r\n            :\r\n            <Collapse in={isOpen} >\r\n                <div className={classes.container}>\r\n                    <Grid container justify={'center'} className={classes.grid} spacing={2}>\r\n                        <Grid container className={classes.gridItem}>\r\n                            <Grid item xs={12} className={classes.headerRow}>\r\n                                <div className={classes.title}>\r\n                                    {t(\"systemsModule.additionalDetails\")}\r\n                                </div>\r\n                                <IconButton \r\n                                    className={classes.iconBtn}\r\n                                    onClick={toggleEdit}\r\n                                >\r\n                                    <EditRoundedIcon className={classes.icon}/>\r\n                                </IconButton>\r\n                            </Grid>\r\n                            <Grid item md={6} lg={3} xl={4} className={classes.fieldContainer}>\r\n                                <div className={classes.label}>\r\n                                    {t(\"systemsModule.location\")}\r\n                                </div>\r\n                                <div className={classes.fieldData}>\r\n                                    {systemData.general.location || t(\"general.noData\")}\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={12} md={6} lg={3} xl={4} className={classes.fieldContainer}>\r\n                                <div className={classes.label}>\r\n                                    {t(\"systemsModule.manufacturingYear\")}\r\n                                </div>\r\n                                <div className={classes.fieldData}>\r\n                                    {systemData.general.manufacturingYear || t(\"general.noData\")}\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={12} md={6} lg={3} xl={4} className={classes.fieldContainer}>\r\n                                <div className={classes.label}>\r\n                                    {t(\"systemsModule.SID\")}\r\n                                </div>\r\n                                <div className={classes.fieldData}>\r\n                                    {systemData.general.SID || t(\"general.noData\")}\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={12} md={6} lg={3} xl={4} className={classes.fieldContainer}>\r\n                                <div className={classes.label}>\r\n                                    {t(\"systemsModule.warrantyDetails.issuer\")}\r\n                                </div>\r\n                                <div className={classes.fieldData}>\r\n                                    {t(`systemsModule.warrantyDetails.${systemData.warranty.issuer || 'nowarranty'}`)}\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={12} md={6} lg={3} xl={4} className={classes.fieldContainer}>\r\n                                <div className={classes.label}>\r\n                                    {t(\"systemsModule.warrantyDetails.expiryDate\")}\r\n                                </div>\r\n                                <div className={classes.fieldData}>\r\n                                    {systemData.warranty.expiryDate ? format(new Date(systemData.warranty.expiryDate), lang.dateformat) : t(\"systemsModule.warrantyDetails.nowarranty\")}\r\n                                </div>\r\n                            </Grid>\r\n                            \r\n                        </Grid>\r\n                        <Grid item xs={12} lg={4} xl={4} className={classes.gridItem}>\r\n                            <div className={classes.card}>\r\n                                <div className={classes.cardTitle}>\r\n                                    {t(\"systemsModule.manufacturer\")}\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.manufacturerDetails.name\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.manufacturer.name || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.manufacturerDetails.contactName\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.manufacturer.contactName || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.manufacturerDetails.email\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.manufacturer.email || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.manufacturerDetails.phoneNumber\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.manufacturer.phoneNumber || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.manufacturerDetails.extension\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.manufacturer.extension || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12} lg={4} xl={4} className={classes.gridItem}>\r\n                        <div className={classes.card}>\r\n                                <div className={classes.cardTitle}>\r\n                                    {t(\"systemsModule.supplier\")}\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.supplierDetails.name\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.supplier.name || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.supplierDetails.contactName\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.supplier.contactName || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.supplierDetails.email\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.supplier.email || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.supplierDetails.phoneNumber\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.supplier.phoneNumber || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.supplierDetails.extension\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.supplier.extension || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12} lg={4} xl={4} className={classes.gridItem}>\r\n                            <div className={classes.card}>\r\n                                <div className={classes.cardTitle}>\r\n                                    {t(\"systemsModule.insurance\")}\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.insuranceDetails.name\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.insurance.name || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.insuranceDetails.contactName\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.insurance.contactName || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.insuranceDetails.email\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.insurance.email || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.insuranceDetails.phoneNumber\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.insurance.phoneNumber || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.insuranceDetails.extension\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.insurance.extension || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </Collapse>\r\n      \r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        borderRadius: '5px',\r\n        margin: '10px',\r\n        padding: '10px'\r\n    },\r\n    grid: {\r\n        padding: '10px',\r\n    },\r\n    gridItem: {\r\n        display: 'flex',\r\n        margin: '10px 0'\r\n    },\r\n    fieldContainer: {\r\n        padding: '10px',\r\n        margin : '15px 0', \r\n        height: '60px',\r\n    },\r\n    label: {\r\n        padding: '5px 10px',\r\n        borderRadius: '5px 5px 0px 0',\r\n        background: 'rgba(0,0,0,0.3)',\r\n        color: 'white',\r\n        width: 'fit-content',\r\n        fontSize: '13px'\r\n    },\r\n    fieldData: {\r\n        padding: '15px 20px',\r\n        width: '200px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '0 5px 5px 5px',\r\n        color: 'white'\r\n    },\r\n    card: {\r\n        margin: '10px 0px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '5px',\r\n        padding: '10px',\r\n        width: '100%'\r\n    },\r\n    cardTitle: {\r\n        color: 'white',\r\n        fontSize: '20px',\r\n        padding: '10px',\r\n        background: 'rgba(0,0,0,0.3)',\r\n        borderRadius: '5px',\r\n        \r\n    },\r\n    cardRow: {\r\n        padding: '10px',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'space-between',\r\n        color: 'white',\r\n        borderBottom: '1px solid rgba(255,255,255,0.2)'\r\n    },\r\n    rowLabel: {\r\n        padding: '3px 0',\r\n        fontSize: '14px',\r\n        color: 'rgba(255,255,255,0.6)'\r\n    },\r\n    rowData: {\r\n        fontSize: '16px'\r\n    },\r\n    headerRow: {\r\n        color: 'white',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        padding: '0px 10px 10px 10px',\r\n        fontSize: '20px',\r\n        borderBottom: '1px solid rgba(255,255,255,0.2)'\r\n    },\r\n    iconBtn: {\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.3)'\r\n        }\r\n    },\r\n    icon: {\r\n        color: 'white',\r\n        fontSize: '20px'\r\n    },\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\UpsertSystem.js",["442","443","444","445","446"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\UpsertFault.js",["447","448","449","450","451"],"import { Avatar, Backdrop, Button, Chip, Fade, FormHelperText, Grid, IconButton, LinearProgress, makeStyles, MenuItem, Modal, Paper, Select, TextField, useMediaQuery } from '@material-ui/core';\r\nimport { ClearRounded } from '@material-ui/icons';\r\nimport DeleteOutlineRoundedIcon from '@material-ui/icons/DeleteOutlineRounded';\r\nimport clsx from 'clsx';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { getFault } from \"../../../api/faultsApi\";\r\nimport { getFullName } from '../../../api/genericApi';\r\nimport { createSystemMenuOptions, getAssetsSuggestions, getSystemsByAsset } from '../../../api/systemsApi';\r\nimport { createUserOptions } from '../../../api/userApi';\r\nimport { AuthContext } from '../../../context/AuthContext';\r\nimport { LanguageContext } from '../../../context/LanguageContext';\r\nimport { UserItem } from '../../user/UserItem';\r\n\r\n\r\n\r\n\r\nexport const UpsertFault = ({ handleClose, handleSave, handleUpdate, faultId}) => {\r\n    const classes = useStyles();\r\n    const { lang } = useContext(LanguageContext);\r\n    const { auth } = useContext(AuthContext);\r\n    const { t } = useTranslation();\r\n    const [ mode, setMode ] = useState(handleUpdate ? 'update' : 'create')\r\n    const [ errors, setErrors ] = useState([]);\r\n    const [ assets, setAssets ] = useState([]);\r\n    const [ systems, setSystems ] = useState([]);\r\n    const [ userList, setUserList ] = useState([]);\r\n    const [ isLoading, setIsLoading ] = useState(true);\r\n    const [ details, setDetails ] = useState({\r\n        title: '',\r\n        description: '',\r\n        asset: '',\r\n        system: '',\r\n        owner: '',\r\n        following: [],\r\n        createdBy: auth.user._id,\r\n        images: [],\r\n        uploadedImages: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        console.log(details)\r\n    }, [details])\r\n\r\n    useEffect(() => {\r\n        createUserOptions()\r\n        .then(data => {\r\n            setUserList(data);\r\n            return getAssetsSuggestions()\r\n        })\r\n        .then(data => {\r\n            setAssets(data); \r\n            if (!faultId) {\r\n                setIsLoading(false);\r\n                return;\r\n            }\r\n            getFault(faultId, true)        \r\n            .then(data => {\r\n                return Promise.all([loadSystemOptions(data.asset), Promise.resolve(data)]) \r\n            })\r\n            .then(res => {\r\n               let data = res[1];\r\n               if (!data) return;\r\n               setDetails({ ...data, images: [], uploadedImages: data.images});\r\n            })\r\n            .finally(() => {\r\n                setIsLoading(false)\r\n            }); \r\n        }) \r\n    }, []);\r\n\r\n\r\n    const validateFields = () => {\r\n        return new Promise((resolve,reject) => {\r\n            let errList = [];\r\n            if (!details.owner) {\r\n                errList.push({ field: 'owner', text: t(\"errors.isRequired\")})\r\n            }\r\n            if (!details.asset) {\r\n                errList.push({ field: 'asset', text: t(\"errors.isRequired\")})\r\n            }\r\n            if (!details.system) {\r\n                errList.push({ field: 'system', text: t(\"errors.isRequired\")})\r\n            }\r\n            if (!details.title) {\r\n                errList.push({ field: 'title', text: t(\"errors.isRequired\")})\r\n            }\r\n            \r\n            if (errList.length) {\r\n                setErrors(errList);\r\n                resolve(false);\r\n            };\r\n            resolve(true);\r\n        })\r\n    }\r\n\r\n    const loadSystemOptions = async (assetId) => {\r\n        return getSystemsByAsset(assetId)\r\n        .then(systems => {\r\n            return createSystemMenuOptions(systems)\r\n        })\r\n        .then(data => {\r\n            setSystems(data);\r\n            return true;\r\n        })\r\n    };\r\n\r\n    const handleConfirm = () => {\r\n        validateFields()\r\n        .then(res => {\r\n            if (!res) return;\r\n            if (mode === 'update') {\r\n                handleUpdate(details)\r\n            } else \r\n                handleSave(details);\r\n            }\r\n        )      \r\n    }\r\n\r\n    const handleChange = field => async event => {\r\n        setDetails({\r\n            ...details,\r\n            [field]: event.target.value\r\n        })\r\n        if (field === 'asset'){\r\n            if (event.target.value) {\r\n                await loadSystemOptions(event.target.value)\r\n            } else {\r\n                setDetails({\r\n                    ...details,\r\n                    system: null\r\n                });\r\n                setSystems([]);\r\n            }\r\n            \r\n        }\r\n        if (errors.length) {\r\n            setErrors(errors.filter(err => err.field !== field))\r\n        }\r\n    }\r\n\r\n    const handleFileUpload = event => {\r\n        setDetails({\r\n            ...details,\r\n            images: event.target.files\r\n        })\r\n    }\r\n\r\n    const removeImage = i => event => {\r\n        let im = details.uploadedImages;\r\n        im.splice(i, 1);\r\n        setDetails({ ...details, uploadedImages: im})\r\n    }\r\n\r\n    return (\r\n        isLoading ? \r\n        <LinearProgress /> :\r\n        <Modal\r\n            open={true}\r\n            onClose={handleClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout: 500\r\n            }}\r\n            className={classes.modal}\r\n        >\r\n            <Fade in={true}>\r\n                <Grid container justify='center' alignItems='center' style={{ outline: '0'}}>\r\n                    <Grid item xs={12} sm={10} md={8} lg={8} xl={6} className={classes.gridCont}>\r\n                        <Paper\r\n                            elevation={6}\r\n                            className={classes.paper}\r\n                            style={{ direction: lang.dir }}\r\n                        >\r\n                            <Grid container>\r\n                                <Grid item xs={12} className={classes.headerRow}>\r\n                                    <div className={classes.title}>\r\n                                        {mode === 'update' ? t(\"faultsModule.upsert.updateFaultDetails\") : t(\"faultsModule.upsert.createFault\")}\r\n                                    </div>\r\n                                    <div className={classes.close}>\r\n                                        <IconButton\r\n                                            className={classes.iconBtn}\r\n                                            onClick={handleClose}\r\n                                        >\r\n                                            <ClearRounded className={classes.icon}/>\r\n                                        </IconButton>\r\n                                    </div>\r\n                                </Grid>                     \r\n                                <Grid item xs={12} sm={6} md={6} lg={6} xl={6} className={classes.section}>\r\n                                    <Grid item xs={12}>\r\n                                        <div className={classes.sectionTitle}>\r\n                                            {t(\"faultsModule.upsert.asset\")}\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} className={classes.fields}>\r\n                                        <Grid container justify='flex-start'>\r\n                                            <Grid item xs={12} className={classes.textContainer}>\r\n                                            <Select\r\n                                                variant={\"outlined\"}\r\n                                                error={ errors.filter(e => e.field === `asset`).length > 0 }\r\n                                                value={ details.asset }\r\n                                                onChange={handleChange(`asset`)}\r\n                                                className={classes.selectInput}\r\n                                                MenuProps={{\r\n                                                    anchorOrigin: {\r\n                                                        vertical: \"bottom\",\r\n                                                        horizontal: \"center\",\r\n                                                    },\r\n                                                    transformOrigin: {\r\n                                                        vertical: \"top\",\r\n                                                        horizontal: \"center\",\r\n                                                    },\r\n                                                    getContentAnchorEl: null,\r\n                                                    classes: {\r\n                                                        paper: classes.menupaper,\r\n                                                \r\n                                                    }\r\n                                                }}\r\n                                                \r\n                                            >\r\n                                                {\r\n                                                    assets.map((asset, i) => \r\n                                                        <MenuItem \r\n                                                            key={i}\r\n                                                            value={asset.value}\r\n                                                            style={{ direction: lang.dir }}\r\n                                                            className={classes.menuitem}\r\n                                                        >\r\n                                                            {asset.text}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }\r\n                                            </Select>\r\n                                            {\r\n                                                errors.filter(e => e.field === 'asset').length > 0 &&\r\n                                                <FormHelperText style={{ color: '#f44336', marginRight: '15px'}}>{t(\"errors.isRequired\")}</FormHelperText>\r\n                                            }\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6} md={4} lg={4} xl={4} className={classes.section}>\r\n                                    <Grid item xs={12}>\r\n                                        <div className={classes.sectionTitle}>\r\n                                            {t(\"faultsModule.upsert.system\")}\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} className={classes.fields}>\r\n                                        <Grid container justify='flex-start'>\r\n                                            <Grid item xs={12} className={classes.textContainer}>\r\n                                            <Select\r\n                                                variant={\"outlined\"}\r\n                                                error={ errors.filter(e => e.field === `system`).length > 0 }\r\n                                                value={ details.system }\r\n                                                onChange={handleChange(`system`)}\r\n                                                className={classes.selectInput}\r\n                                                MenuProps={{\r\n                                                    anchorOrigin: {\r\n                                                        vertical: \"bottom\",\r\n                                                        horizontal: \"center\",\r\n                                                    },\r\n                                                    transformOrigin: {\r\n                                                        vertical: \"top\",\r\n                                                        horizontal: \"center\",\r\n                                                    },\r\n                                                    getContentAnchorEl: null,\r\n                                                    classes: {\r\n                                                        paper: classes.menupaper,\r\n                                                \r\n                                                    }\r\n                                                }}\r\n                                                \r\n                                            >\r\n                                                {\r\n                                                    systems.map((system, i) => \r\n                                                        <MenuItem \r\n                                                            key={i}\r\n                                                            value={system.value}\r\n                                                            style={{ direction: lang.dir }}\r\n                                                            className={classes.menuitem}\r\n                                                        >\r\n                                                            {system.text}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }\r\n                                            </Select>\r\n                                            {\r\n                                                errors.filter(e => e.field === 'asset').length > 0 &&\r\n                                                <FormHelperText style={{ color: '#f44336', marginRight: '15px'}}>{t(\"errors.isRequired\")}</FormHelperText>\r\n                                            }\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} className={classes.section}>\r\n                                    <Grid item xs={12}>\r\n                                        <div className={classes.sectionTitle}>\r\n                                            {t(\"faultsModule.upsert.generalDetails\")}\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} className={classes.fields}>\r\n                                        <Grid container justify='flex-start'>\r\n                                            <Grid item xs={12} className={classes.textContainer}>\r\n                                                <TextField\r\n                                                    variant={\"outlined\"}\r\n                                                    label={t(`faultsModule.upsert.title`)}\r\n                                                    error={ errors.filter(e => e.field === `title`).length > 0 }\r\n                                                    value={ details.title }\r\n                                                    onChange={handleChange('title')}\r\n                                                    className={classes.textField}\r\n                                                    size={'medium'}\r\n                                                    helperText={ errors.filter(e => e.field === `title`).length > 0 ? t(\"errors.isRequired\") : `${60 - details.title.length} ${t(\"faultsModule.upsert.titleLimit\")}` }\r\n                                                    inputProps={{\r\n                                                        maxLength: 60\r\n                                                    }}\r\n                                                    FormHelperTextProps={{\r\n                                                        style: { color: errors.filter(e => e.field === `title`).length > 0 ? 'rgb(244, 67, 54)' : 'rgba(255,255,255,0.6)' }\r\n                                                    }}\r\n                                                    \r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={12} className={classes.textContainer}>\r\n                                                <TextField\r\n                                                    variant={\"outlined\"}\r\n                                                    label={t(`faultsModule.upsert.description`)}\r\n                                                    value={ details.description }\r\n                                                    onChange={handleChange('description')}\r\n                                                    className={classes.textField}\r\n                                                    size={'medium'}\r\n                                                    multiline={true}\r\n                                                    rows={7}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6} md={6} lg={4} xl={4}  className={classes.section}>\r\n                                    <Grid item xs={12}>\r\n                                        <div className={classes.sectionTitle}>\r\n                                            {t(\"faultsModule.upsert.faultOwner\")}\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} className={classes.fields}>\r\n                                        <Grid item xs={12} className={classes.textContainer}>\r\n                                            <Select\r\n                                                variant={\"outlined\"}\r\n                                                error={ errors.filter(e => e.field === `owner`).length > 0 }\r\n                                                value={ details.owner }\r\n                                                onChange={handleChange(`owner`)}\r\n                                                className={classes.selectInput}\r\n                                                MenuProps={{\r\n                                                    anchorOrigin: {\r\n                                                        vertical: \"bottom\",\r\n                                                        horizontal: \"center\",\r\n                                                    },\r\n                                                    transformOrigin: {\r\n                                                        vertical: \"top\",\r\n                                                        horizontal: \"center\",\r\n                                                    },\r\n                                                    getContentAnchorEl: null,\r\n                                                    classes: {\r\n                                                        paper: classes.menupaper,\r\n                                                \r\n                                                    }\r\n                                                }}\r\n                                                renderValue={(selected) => {\r\n                                                    let user = userList.find( f => f._id === selected);\r\n                                                    return (\r\n                                                        \r\n                                                            <Chip\r\n                                                                size={'medium'}\r\n                                                                avatar={<Avatar style={{ height: '40px', width: '40px'}} src={user.avatar} />}\r\n                                                                label={getFullName(user)}\r\n                                                                className={classes.chip}\r\n                                                                \r\n                                                            />\r\n                                                    \r\n                                                    )\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    userList.map((user, i) => \r\n                                                        <MenuItem \r\n                                                            key={i}\r\n                                                            value={user.value}\r\n                                                            style={{ direction: lang.dir }}\r\n                                                            className={classes.menuitem}\r\n                                                        >\r\n                                                            <div className={classes.userCont}>\r\n                                                                <UserItem\r\n                                                                    user={user}\r\n                                                                    avatarSize={40}\r\n                                                                    size={13}\r\n                                                                    showName\r\n                                                                />\r\n                                                            </div>\r\n                                                            \r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }\r\n                                            </Select>\r\n                                            {\r\n                                                errors.filter(e => e.field === 'owner').length > 0 &&\r\n                                                <FormHelperText style={{ color: '#f44336', marginRight: '15px'}}>{t(\"errors.isRequired\")}</FormHelperText>\r\n                                            }\r\n                                            \r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                \r\n                                <Grid item xs={12} md={6} className={classes.section}>\r\n                                            <Grid item xs={12}>\r\n                                                <div className={classes.sectionTitle}>\r\n                                                    {mode === 'create' ? t(\"faultsModule.upsert.faultImages\") : t(\"faultsModule.upsert.addFaultImages\")}\r\n                                                </div>\r\n                                            </Grid>\r\n                                            <Grid item xs={12} className={classes.fields}>\r\n                                                <Grid container justify='flex-start'>\r\n                                                    <Grid item xs={12} className={classes.textContainer}>\r\n                                                        <Button\r\n                                                            component={'label'}\r\n                                                            variant={'contained'}\r\n                                                            className={classes.uploadBtn}\r\n                                                        >\r\n                                                            { t(\"faultsModule.upsert.uploadImages\")}\r\n                                                            <input \r\n                                                                accepts='image/*'\r\n                                                                type='file'\r\n                                                                multiple\r\n                                                                onChange={handleFileUpload}\r\n                                                                hidden  \r\n                                                            />\r\n                                                        </Button>\r\n                                                        <span className={classes.filesUploaded}>\r\n                                                            {`${details.images.length} ${t(\"faultsModule.upsert.imagesSelected\")}` }\r\n                                                        </span>\r\n                                                    </Grid>\r\n                                                    {\r\n                                                        Boolean(details.uploadedImages.length) &&\r\n                                                        <React.Fragment>\r\n                                                            <Grid item xs={12} className={classes.uploadedImagesTitle}>\r\n                                                                {t(\"faultsModule.upsert.uploadedImages\")}\r\n                                                            </Grid>\r\n                                                            {\r\n                                                                details.uploadedImages.map((image, i) => \r\n                                                                    <Grid item xs={12} className={classes.imageRow} key={i}>\r\n                                                                        <img src={image} className={classes.previewImage} />\r\n                                                                        <IconButton     \r\n                                                                            onClick={removeImage(i)}\r\n                                                                            className={classes.removeImageBtn}\r\n                                                                        >\r\n                                                                            <DeleteOutlineRoundedIcon className={classes.removeImage}/>\r\n                                                                        </IconButton>\r\n                                                                    </Grid>\r\n                                                                )\r\n                                                            }\r\n                                                        </React.Fragment> \r\n                                                    } \r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                <Grid item xs={12} className={classes.controls}>\r\n                                    <Button\r\n                                        className={clsx(classes.control, classes.save)}\r\n                                        onClick={handleConfirm}\r\n                                    >\r\n                                        {t(\"controls.confirm\")}\r\n                                    </Button>\r\n                                    <Button\r\n                                        className={clsx(classes.control, classes.cancel)}\r\n                                        onClick={handleClose}\r\n                                    >\r\n                                        {t(\"controls.cancel\")}\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backdropFilter: 'blur(10px)'   \r\n    },\r\n    \r\n    gridCont: {\r\n        height: 'fit-content'\r\n    },\r\n    paper: {\r\n        background: 'rgba(0,0,0,0.4)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '10px',\r\n        padding: '10px 20px',\r\n        overflowY: 'overlay',\r\n        [theme.breakpoints.down('sm')]: {\r\n            height: '81vh',\r\n            top: 0,\r\n            borderRadius: '0',\r\n            border: '0',\r\n            padding: '10px 5px'\r\n        },\r\n        '&:focus': {\r\n            outline: 'none'\r\n        }\r\n    },\r\n    headerRow: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        width: '100%',      \r\n        borderBottom: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    title: {\r\n        color: 'white',\r\n        padding: '20px 10px 10px',\r\n        fontSize: '20px',\r\n        whiteSpace: 'nowrap'\r\n    },\r\n    iconBtn: {\r\n        margin: '10px',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.3)'\r\n        }\r\n    },\r\n    icon: {\r\n        color: 'white',\r\n        fontSize: '20px'\r\n    },\r\n    section: {\r\n        margin: '10px 5px',\r\n        \r\n    },\r\n    sectionTitle: {\r\n        color: 'white',\r\n        fontSize: '16px',\r\n        padding: '10px 20px',\r\n        width: 'fit-content',\r\n        borderRadius: '10px 10px 0 0',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        whiteSpace: 'nowrap'\r\n    },\r\n    fields: {\r\n        padding: '10px 20px',\r\n        borderRadius: '0px 10px 10px 10px',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        [theme.breakpoints.down('sm')]: {\r\n            padding: '10px',\r\n        }\r\n    },\r\n    textContainer: {\r\n        padding: '5px',\r\n    },\r\n    textField: {\r\n        width: '100%',\r\n        '& fieldset': {\r\n            borderRadius: '5px',\r\n        },  \r\n    },\r\n    selectInput: {\r\n        width: '100%',\r\n        '& fieldset': {\r\n            borderRadius: '5px',\r\n        }   \r\n    },\r\n    menupaper: {\r\n        background: 'rgba(0,0,0,0.8)',\r\n        backdropFilter: 'blur(10px)',\r\n        height: '200px',\r\n        overflowY: 'auto',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        marginRight: '7px',\r\n        marginLeft: '-5px'\r\n\r\n    },\r\n    menuitem: {\r\n        color: 'white',\r\n        width: '100%',\r\n        '&:hover': {\r\n            background: 'rgba(255,255,255,0.1)'\r\n        }\r\n    },\r\n    controls: {\r\n        borderTop: '1px solid rgba(255,255,255,0.2)',\r\n        padding: '10px 0',\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    control: {\r\n        width: '30%',\r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        fontSize: '16px',\r\n        margin: '5px',\r\n        padding: '5px 30px',\r\n        borderRadius: '30px',\r\n        color: 'white',\r\n       \r\n    },\r\n    save: {\r\n        background: 'rgba(0,0,0,0.2)', \r\n        '&:hover': {\r\n            background: 'black'\r\n        },\r\n        '&:disabled': {\r\n            color: 'rgba(255,255,255,0.3)'\r\n        }\r\n    },\r\n    cancel: {\r\n        '&:hover': { \r\n            boxShadow: 'inset rgba(255,255,255,0.3) 0 0 2px 1px'\r\n        }\r\n    },\r\n    chips: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap'\r\n    },\r\n    chip: {\r\n        height: '50px',\r\n        fontSize: '14px',\r\n        borderRadius: '50px',\r\n        display: 'flex',\r\n        justifyContent: 'flex-start',\r\n        color: 'white',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        background: 'rgba(0,0,0,0.6)',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.6)',\r\n            boxShadow: 'inset lightgrey 0px 0px 1px 1px'\r\n        } \r\n    },\r\n    userCont: {\r\n        height: 'fit-content',\r\n        padding: 0,\r\n        margin: 0,\r\n        margin: '5px 0',\r\n        \r\n    },\r\n    chipsCont: {\r\n        height: 'fit-content',\r\n        padding: 0,\r\n        margin: '3px',\r\n        borderRadius: '50px',\r\n        background: 'rgba(255,255,255,0.1)',\r\n        boxShadow: 'inset rgba(0,0,0,0.5) 0px 0px 2px 1px',\r\n        display: 'flex',\r\n        jutifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        \r\n    },\r\n    removeIcon: {\r\n        color: 'rgba(255,255,255,0.2)',\r\n        padding: '5px',\r\n        marginRight: '5px',\r\n        borderRadius: '50px',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.8)',\r\n            color: 'white',\r\n        }\r\n    },\r\n    radioGroup: {\r\n        color: 'white',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignitems: 'center',\r\n        \r\n    },\r\n    radioBtn: {\r\n        color: 'white',\r\n        padding: '15px'\r\n    },\r\n    filesUploaded: {\r\n        color: 'white',\r\n        padding: '0 15px'\r\n    },\r\n    uploadBtn: {\r\n        margin: '9px 0',\r\n        background: 'rgba(0,0,0,0.1)',\r\n        color: 'white',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '50px',\r\n        whiteSpace: 'nowrap',\r\n        '&:hover': {\r\n            boxShadow: 'inset white 0 0 2px 1px',\r\n            background: 'rgba(0,0,0,0.3)'\r\n        }\r\n    },\r\n    imageRow: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        padding: '10px 5px',\r\n        borderBottom: '1px solid rgba(255,255,255,0.2)'\r\n    },\r\n    previewImage: {\r\n        height: '50px',\r\n        width: '100px'\r\n    },\r\n    removeImageBtn: {\r\n        color: 'rgba(255,255,255,0.5)',\r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        '&:hover': {\r\n            color: 'white',\r\n            borderColor: 'white'\r\n        }\r\n    },\r\n    uploadedImagesTitle: {\r\n        color: 'white',\r\n        padding: '10px 5px',\r\n        borderBottom: '1px solid rgba(255,255,255,0.2)'\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\UpdateOwner.js",["452","453","454"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { Grid, makeStyles, Paper, FormControl, IconButton, useMediaQuery, Fade, Modal, Backdrop,Select, MenuItem, Button } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport ClearRoundedIcon from '@material-ui/icons/ClearRounded';\r\nimport { getUserList } from '../../api/userApi';\r\nimport clsx from 'clsx'\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\n\r\n\r\n\r\nexport const UpdateOwner = ({ handleClose, handleSave, isOpen, currentOwner, title, instructions }) => {\r\n\r\n    const classes = useStyles();\r\n    const { lang } = useContext(LanguageContext);\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const { t, i18n } = useTranslation();\r\n    const [ userList, setUserList ] = useState([]);\r\n    const [ selectedUser, setSelectedUser ] = useState('')\r\n    \r\n    useEffect(() => {\r\n        getUserList()\r\n        .then(data => {\r\n            if (currentOwner) {\r\n                setSelectedUser(currentOwner._id)\r\n            }\r\n            setUserList(data.filter(u => u._id !== currentOwner._id ));\r\n        })\r\n    }, [])\r\n\r\n    const handleChange = event => {\r\n        setSelectedUser(event.target.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal\r\n            open={isOpen}\r\n            onClose={handleClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout: 500\r\n            }}\r\n            className={classes.modal}\r\n        >\r\n            <Fade in={isOpen}>\r\n                <Grid container justify='center' alignItems='center' style={{ outline: '0'}}>\r\n                    <Grid item xs={11} sm={7} md={5} lg={3} xl={3}>\r\n                        <Paper \r\n                            className={classes.paper} \r\n                            style={{ direction: lang.dir }}\r\n                            elevation={6}    \r\n                        >\r\n                            <div className={classes.header}>\r\n                                <div className={classes.title}>\r\n                                    {title}\r\n                                </div>\r\n                                <IconButton className={classes.closeBtn} onClick={handleClose}>\r\n                                    <ClearRoundedIcon className={classes.icon}/>\r\n                                </IconButton>  \r\n                            </div>\r\n                            <div className={classes.instructions}>\r\n                                {instructions}\r\n                            </div>\r\n                            <FormControl variant='outlined' className={classes.textInput} >\r\n                                <Select\r\n                                    value={selectedUser}\r\n                                    onChange={handleChange}\r\n                                    className={classes.menu}\r\n                                    MenuProps={{\r\n                                        classes: {\r\n                                            paper: classes.menupaper\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    {\r\n                                        userList.map( (user, i) => {\r\n                                            return (\r\n                                                <MenuItem\r\n                                                    className={classes.menuitem}\r\n                                                    value={user._id} \r\n                                                    key={i}\r\n                                                    style={{ direction: lang.code === 'he' ? 'rtl' : 'ltr'}}\r\n                                                >\r\n                                                    {`${user.firstName} ${user.lastName}`}\r\n                                                </MenuItem>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Select>\r\n                            </FormControl>\r\n                            <div className={classes.controls}>\r\n                                <Button\r\n                                    className={clsx(classes.control, classes.save)}\r\n                                    onClick={() => handleSave(selectedUser)}\r\n                                    disabled={!selectedUser}\r\n                                >\r\n                                    {t(\"alert.confirm\")}\r\n                                </Button>\r\n                                <Button\r\n                                    className={clsx(classes.control, classes.cancel)}\r\n                                    onClick={handleClose}\r\n                                >\r\n                                    {t(\"alert.cancel\")}\r\n                                </Button>\r\n                            </div>\r\n                        </Paper>\r\n                    </Grid>\r\n                    \r\n                </Grid> \r\n                \r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        background: 'rgba(0,0,0,0.4)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        padding: '10px',\r\n        borderRadius: '10px',\r\n        '&:focus': {\r\n            outline: 'none'\r\n        }\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backdropFilter: 'blur(10px)'   \r\n    },\r\n    header: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center'\r\n    },\r\n    title: {\r\n        color: 'white',\r\n        fontSize: '18px',\r\n        padding: '5px 10px',\r\n        height: 'fit-content'\r\n    },\r\n    closeBtn: {\r\n        fontSize: '20px',\r\n        height: '40px',\r\n        width: '40px'\r\n    },\r\n    icon: {\r\n        color: 'white',\r\n        borderRadius: '25px',\r\n        padding: '5px',\r\n        '&:hover': {\r\n            background: 'rgba(255,255,255,0.2)'\r\n        }\r\n    },\r\n    instructions: {\r\n        width: 'auto',\r\n        color: 'rgba(255,255,255,0.6)',\r\n        fontSize: '12px',\r\n        margin: '0px 10px'\r\n    },\r\n    menu: {\r\n        color: 'white',\r\n        '&:hover': {\r\n            borderColor: 'white'\r\n        }\r\n    },\r\n    menupaper: {\r\n        background: 'rgba(0,0,0,0.3)',\r\n        backdropFilter: 'blur(10px)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        marginTop: '55px',\r\n        marginRight: '7px',\r\n        maxHeight: '200px',\r\n        overflowY: 'auto',\r\n\r\n    },\r\n    menuitem: {\r\n        color: 'white'\r\n    },\r\n    textInput: {\r\n        margin: '20px 5px',\r\n        width: '300px',\r\n        '& input': {\r\n            color: 'white',\r\n            paddingLeft: '20px',\r\n        },\r\n        '& label': {\r\n            color: 'white',\r\n            paddingLeft: '5px' \r\n        },\r\n        '& fieldset': {\r\n            borderColor: 'rgba(255,255,255,0.6)',\r\n            borderRadius: '42px'\r\n        }    \r\n    },\r\n    controls: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    control: {\r\n        width: '30%',\r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        fontSize: '16px',\r\n        margin: '5px',\r\n        padding: '5px 30px',\r\n        borderRadius: '30px',\r\n        color: 'white', \r\n    },\r\n    save: {\r\n        background: 'rgba(0,0,0,0.2)', \r\n        '&:hover': {\r\n            background: 'black'\r\n        },\r\n        '&:disabled': {\r\n            color: 'rgba(255,255,255,0.3)'\r\n        }\r\n    },\r\n    cancel: {\r\n        border: '0px solid grey',\r\n        '&:hover': {\r\n            borderWidth: '1px'\r\n        }\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\UpsertAsset.js",["455","456","457"],"import { Backdrop, Button, Fade, FormHelperText, Grid, IconButton, LinearProgress, makeStyles, MenuItem, Modal, Paper, Select, TextField, useMediaQuery } from '@material-ui/core';\r\nimport { ClearRounded } from '@material-ui/icons';\r\nimport clsx from 'clsx';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { getAsset } from '../../../api/assetsApi';\r\nimport { createUserOptions } from '../../../api/userApi';\r\nimport { AuthContext } from '../../../context/AuthContext';\r\nimport { LanguageContext } from '../../../context/LanguageContext';\r\n\r\n\r\n\r\n\r\nexport const UpsertAsset = ({ handleClose, handleSave, assetId, handleUpdate }) => {\r\n    const classes = useStyles();\r\n    const { lang } = useContext(LanguageContext);\r\n    const { auth } = useContext(AuthContext);\r\n    const [ mode, setMode ] = useState(handleUpdate ? 'update' : 'create')\r\n    const { t } = useTranslation();\r\n    const [ errors, setErrors ] = useState([]);\r\n    const [ userList, setUserList ] = useState([]);\r\n    const [ addInfoContext, setAddInfoContext ] = useState(null)\r\n    const [ isLoading, setIsLoading ] = useState(true)\r\n    const [ details, setDetails ] = useState({\r\n        tenant: auth.user.tenant,\r\n        address: {\r\n            country: '',\r\n            province: '',\r\n            city: '',\r\n            street: '',\r\n            streetNumber: '',\r\n            entrance: '',\r\n            zipcode: '',\r\n        },\r\n        owner: '',\r\n        type: '',\r\n        addInfo: null,\r\n        createdBy: auth.user._id \r\n    });\r\n\r\n    useEffect(() => {\r\n        createUserOptions()\r\n        .then(data => {\r\n            setUserList(data);\r\n            return Promise.resolve(assetId)\r\n        })\r\n        .then(res => {\r\n            if (!res) {\r\n                setIsLoading(false);\r\n                return;\r\n            }\r\n            getAsset(res, true)\r\n            .then(data => {\r\n                setDetails(data);\r\n                setIsLoading(false)\r\n            }) \r\n        })\r\n        \r\n    },[])\r\n\r\n \r\n\r\n    const validateFields = () => {\r\n        return new Promise((resolve,reject) => {\r\n            let errList = [];\r\n            Object.entries({...details.address,owner: details.owner, type: details.type}).forEach((entry) => {\r\n                if (['province', 'entrance'].indexOf(entry[0]) !== -1 ) return;\r\n                if (!entry[1]) {\r\n                    errList.push({ field: entry[0], text: t(\"errors.isRequired\")})\r\n                }\r\n            });\r\n            \r\n            if (errList.length) {\r\n                setErrors(errList);\r\n                resolve(false);\r\n            };\r\n            resolve(true);\r\n        })\r\n    }\r\n\r\n    const handleConfirm = () => {\r\n        validateFields()\r\n        .then(res => {\r\n            if (!res) return\r\n            if ( mode === 'create') {\r\n                handleSave(details);\r\n            } else {\r\n                console.log(details)\r\n                handleUpdate(details)\r\n            }\r\n            \r\n        })      \r\n    }\r\n\r\n    const handleChange = data => event => {\r\n        if (data.type) {\r\n            setDetails({...details, [data.type]: {\r\n                ...details[data.type],\r\n                [data.field]: event.target.value\r\n            }});\r\n        } else if (data.field === 'type') {\r\n            setDetails({\r\n                ...details, \r\n                type: event.target.value,\r\n                addInfo: event.target.value === 'apartment' \r\n                ? { floor: '', unit: ''} \r\n                : { floors: '', units: ''}\r\n            });\r\n            setAddInfoContext(event.target.value);\r\n        } else {\r\n            setDetails({...details, [data.field]: event.target.value}) \r\n        };\r\n        if (errors.length) {\r\n            setErrors(errors.filter(err => err.field !== data.field))\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        isLoading ? \r\n        <LinearProgress /> :\r\n        <Modal\r\n            open={true}\r\n            onClose={handleClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout: 500\r\n            }}\r\n            className={classes.modal}\r\n        >\r\n            <Fade in={true}>\r\n                <Grid container justify='center' alignItems='center' style={{ outline: '0'}}>\r\n                    <Grid item xs={12} sm={10} md={8} lg={8} xl={6} className={classes.gridCont}>\r\n                        <Paper\r\n                            elevation={6}\r\n                            className={classes.paper}\r\n                            style={{ direction: lang.dir }}\r\n                        >\r\n                            <Grid container>\r\n                                <Grid item xs={12} className={classes.headerRow}>\r\n                                    <div className={classes.title}>\r\n                                        {mode === 'create' ? t(\"assetsModule.createAsset\") : t(\"assetsModule.editAsset\")}\r\n                                    </div>\r\n                                    <div className={classes.close}>\r\n                                        <IconButton\r\n                                            className={classes.iconBtn}\r\n                                            onClick={handleClose}\r\n                                        >\r\n                                            <ClearRounded className={classes.icon}/>\r\n                                        </IconButton>\r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid item xs={12} className={classes.section}>\r\n                                    <Grid item xs={12}>\r\n                                        <div className={classes.sectionTitle}>\r\n                                            {t(\"assetsModule.addressDetails\")}\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} className={classes.fields}>\r\n                                        <Grid container justify='flex-start'>\r\n                                            {\r\n                                                Object.keys(details.address).map((f,i) =>\r\n                                                <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer} key={i}>\r\n                                                    <TextField\r\n                                                        variant={\"outlined\"}\r\n                                                        label={t(`assetsModule.${f}`)}\r\n                                                        error={ errors.filter(e => e.field === `${f}`).length > 0 }\r\n                                                        value={ details.address[f] }\r\n                                                        onChange={handleChange({type: 'address', field: `${f}`})}\r\n                                                        className={classes.textField}\r\n                                                        size={'medium'}\r\n                                                        helperText={ errors.filter(e => e.field === `${f}`).length > 0 ? t(\"errors.isRequired\"): null }\r\n                                                    />\r\n                                                </Grid>\r\n                                                )\r\n                                                \r\n                                            }\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                \r\n                                </Grid>\r\n                                <Grid item xs={12} sm={5} className={classes.section}>\r\n                                    <Grid item xs={12}>\r\n                                        <div className={classes.sectionTitle}>\r\n                                            {t(\"assetsModule.assetType\")}\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} className={classes.fields}>\r\n                                        <Grid container justify='flex-start'>\r\n                                            <Grid item xs={12} className={classes.textContainer}>\r\n                                                <Select\r\n                                                    variant={\"outlined\"}\r\n                                                    error={ errors.filter(e => e.field === `type`).length > 0 }\r\n                                                    value={ details.type }\r\n                                                    onChange={handleChange({type: '', field: `type`})}\r\n                                                    className={classes.selectInput}\r\n                                                    MenuProps={{\r\n                                                        classes: {\r\n                                                            paper: classes.menupaper,\r\n                                    \r\n                                                        },\r\n                                                        anchorOrigin: {\r\n                                                            vertical: \"bottom\",\r\n                                                            horizontal: \"center\",\r\n                                                        },\r\n                                                        transformOrigin: {\r\n                                                            vertical: \"top\",\r\n                                                            horizontal: \"center\",\r\n                                                        },\r\n                                                        getContentAnchorEl: null,\r\n                                                        disablePortal: true\r\n                                                    }}\r\n                                    \r\n                                                >\r\n                                                    <MenuItem \r\n                                                        value={'building'}\r\n                                                        style={{ direction: lang.dir }}\r\n                                                        className={classes.menuitem}\r\n                                                    >\r\n                                                        {t(\"assetsModule.building\")}\r\n                                                    </MenuItem>\r\n                                                    <MenuItem \r\n                                                        value={'apartment'}\r\n                                                        style={{ direction: lang.dir }}\r\n                                                        className={classes.menuitem}\r\n                                                    >\r\n                                                        {t(\"assetsModule.apartment\")}\r\n                                                    </MenuItem>\r\n                                                </Select>\r\n                                                {\r\n                                                    errors.filter(e => e.field === `type`).length > 0 &&\r\n                                                    <FormHelperText style={{ color: '#f44336', marginRight: '15px'}}>{t(\"errors.isRequired\")}</FormHelperText>\r\n                                                }\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={5}  className={classes.section}>\r\n                                    <Grid item xs={12}>\r\n                                        <div className={classes.sectionTitle}>\r\n                                            {t(\"assetsModule.owner\")}\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} className={classes.fields}>\r\n                                        <Grid item xs={12} className={classes.textContainer}>\r\n                                                <Select\r\n                                                    variant={\"outlined\"}\r\n                                                    error={ errors.filter(e => e.field === `owner`).length > 0 }\r\n                                                    value={ details.owner }\r\n                                                    onChange={handleChange({type: '', field: `owner`})}\r\n                                                    className={classes.selectInput}\r\n                                                    MenuProps={{\r\n                                                        classes: {\r\n                                                            paper: classes.menupaper,\r\n                                                \r\n                                                        },\r\n                                                        anchorOrigin: {\r\n                                                            vertical: \"bottom\",\r\n                                                            horizontal: \"center\",\r\n                                                        },\r\n                                                        transformOrigin: {\r\n                                                            vertical: \"top\",\r\n                                                            horizontal: \"center\",\r\n                                                        },\r\n                                                        getContentAnchorEl: null,\r\n                                                        disablePortal: true\r\n                                                    }}\r\n                                                \r\n                                                >\r\n                                                    {\r\n                                                        userList.map((user, i) => \r\n                                                            <MenuItem \r\n                                                                key={i}\r\n                                                                value={user.value}\r\n                                                                style={{ direction: lang.dir }}\r\n                                                                className={classes.menuitem}\r\n                                                            >\r\n                                                                {user.label}\r\n                                                            </MenuItem>\r\n                                                        )\r\n                                                    }\r\n                                                </Select>\r\n                                                {\r\n                                                    errors.filter(e => e.field === `type`).length > 0 &&\r\n                                                    <FormHelperText style={{ color: '#f44336', marginRight: '15px'}}>{t(\"errors.isRequired\")}</FormHelperText>\r\n                                                }\r\n                                                \r\n                                            </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                {\r\n                                    (Boolean(addInfoContext) || mode === 'update') &&\r\n                                    <Grid item xs={12} md={6} className={classes.section}>\r\n                                        <Grid item xl={12}>\r\n                                            <div className={classes.sectionTitle}>\r\n                                                {t(\"assetsModule.additionalDetails\")}\r\n                                            </div>\r\n                                        </Grid>\r\n                                        <Grid item xl={12} className={classes.fields}>\r\n                                            <Grid container justify='flex-start'>\r\n                                                {\r\n                                                    Object.keys(details.addInfo).map((f,i) => \r\n                                                        <Grid item xs={12} sm={6} className={classes.textContainer} key={i}>\r\n                                                            <TextField\r\n                                                                variant={\"outlined\"}\r\n                                                                label={t(`assetsModule.${f}`)}\r\n                                                                error={ errors.filter(e => e.field === `${f}`).length > 0 }\r\n                                                                value={ details.addInfo[f] }\r\n                                                                onChange={handleChange({type: 'addInfo', field: `${f}`})}\r\n                                                                className={classes.textField}\r\n                                                                size={'medium'}\r\n                                                                InputProps={{\r\n                                                                    classes: {\r\n                                                                        root: classes.rootInput\r\n                                                                    }\r\n                                                                }}\r\n                                                            />\r\n                                                        </Grid>\r\n                                                    ) \r\n                                                }\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                }\r\n                                <Grid item xs={12} className={classes.controls}>\r\n                                    <Button\r\n                                        className={clsx(classes.control, classes.save)}\r\n                                        onClick={handleConfirm}\r\n                                    >\r\n                                        {t(\"controls.confirm\")}\r\n                                    </Button>\r\n                                    <Button\r\n                                        className={clsx(classes.control, classes.cancel)}\r\n                                        onClick={handleClose}\r\n                                    >\r\n                                        {t(\"controls.cancel\")}\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backdropFilter: 'blur(10px)'   \r\n    },\r\n    gridCont: {\r\n        height: 'fit-content'\r\n    },\r\n    paper: {\r\n        background: 'rgba(0,0,0,0.4)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '10px',\r\n        padding: '10px 20px',\r\n        overflowY: 'overlay',\r\n        [theme.breakpoints.down('sm')]: {\r\n            height: '81vh',\r\n            top: 0,\r\n            borderRadius: '0',\r\n            border: '0',\r\n            padding: '10px 5px'\r\n        },\r\n        '&:focus': {\r\n            outline: 'none'\r\n        }\r\n    },\r\n    headerRow: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        width: '100%',      \r\n        borderBottom: '1px solid rgba(255,255,255,0.2)'\r\n    },\r\n    title: {\r\n        color: 'white',\r\n        padding: '20px 10px 10px',\r\n        fontSize: '20px',\r\n        whiteSpace: 'nowrap'\r\n    },\r\n    iconBtn: {\r\n\r\n    },\r\n    icon: {\r\n        color: 'white',\r\n        fontSize: '20px'\r\n    },\r\n    section: {\r\n        margin: '10px 5px',\r\n        \r\n    },\r\n    sectionTitle: {\r\n        color: 'white',\r\n        fontSize: '16px',\r\n        padding: '10px 20px',\r\n        width: 'fit-content',\r\n        borderRadius: '10px 10px 0 0',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        whiteSpace: 'nowrap'\r\n    },\r\n    fields: {\r\n        padding: '10px 20px',\r\n        borderRadius: '0px 10px 10px 10px',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        [theme.breakpoints.down('sm')]: {\r\n            padding: '10px',\r\n        }\r\n    },\r\n    textContainer: {\r\n        padding: '5px',\r\n    },\r\n    textField: {\r\n        width: '100%',\r\n        '& fieldset': {\r\n            borderRadius: '5px',\r\n        },  \r\n    },\r\n    selectInput: {\r\n        width: '100%',\r\n        '& fieldset': {\r\n            borderRadius: '5px',\r\n        }   \r\n    },\r\n    menupaper: {\r\n        background: 'rgba(0,0,0,0.6)',\r\n        backdropFilter: 'blur(10px)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        marginRight: '7px',\r\n        marginLeft: '-5px',\r\n        maxHeight: '200px',\r\n        overflowY: 'auto',\r\n\r\n    },\r\n    menuitem: {\r\n        color: 'white',\r\n        '&:hover':{\r\n            background: 'rgba(255,255,255,0.2)'\r\n        }\r\n    },\r\n    controls: {\r\n        borderTop: '1px solid rgba(255,255,255,0.2)',\r\n        padding: '10px 0',\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    control: {\r\n        width: '30%',\r\n       \r\n        fontSize: '16px',\r\n        margin: '5px',\r\n        padding: '5px 30px',\r\n        borderRadius: '30px',\r\n        color: 'white',\r\n       \r\n    },\r\n    save: {\r\n        background: 'rgba(0,0,0,0.2)', \r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        '&:hover': {\r\n            background: 'black'\r\n        },\r\n        '&:disabled': {\r\n            color: 'rgba(255,255,255,0.3)'\r\n        }\r\n    },\r\n    cancel: {\r\n        '&:hover': { \r\n            boxShadow: 'inset rgba(255,255,255,0.3) 0 0 2px 1px'\r\n        }\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\AddFollower.js",["458","459","460"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { Grid, makeStyles, Paper, FormControl, IconButton, useMediaQuery, Fade, Modal, Backdrop,Select, MenuItem, Button } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport ClearRoundedIcon from '@material-ui/icons/ClearRounded';\r\nimport { getUserList } from '../../api/userApi';\r\nimport clsx from 'clsx'\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\n\r\n\r\n\r\nexport const AddFollower = ({ handleClose, handleSave, isOpen, followerList, title, instructions }) => {\r\n\r\n    const classes = useStyles();\r\n    const { lang } = useContext(LanguageContext);\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const { t, i18n } = useTranslation();\r\n    const [ userList, setUserList ] = useState([]);\r\n    const [ selectedUser, setSelectedUser ] = useState('')\r\n    \r\n    useEffect(() => {\r\n        getUserList()\r\n        .then(data => {  \r\n            setUserList(data.filter(u => Boolean(!followerList.find(f => f._id === u._id))));\r\n        })\r\n    }, [])\r\n\r\n    const handleChange = event => {\r\n        setSelectedUser(event.target.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal\r\n            open={isOpen}\r\n            onClose={handleClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout: 500\r\n            }}\r\n            className={classes.modal}\r\n        >\r\n            <Fade in={isOpen}>\r\n                <Grid container justify='center' alignItems='center' style={{ outline: '0'}}>\r\n                    <Grid item xs={11} sm={7} md={5} lg={3} xl={3}>\r\n                        <Paper \r\n                            className={classes.paper} \r\n                            style={{ direction: lang.dir }}\r\n                            elevation={6}    \r\n                        >\r\n                            <div className={classes.header}>\r\n                                <div className={classes.title}>\r\n                                    {title}\r\n                                </div>\r\n                                <IconButton className={classes.closeBtn} onClick={handleClose}>\r\n                                    <ClearRoundedIcon className={classes.icon}/>\r\n                                </IconButton>  \r\n                            </div>\r\n                            <div className={classes.instructions}>\r\n                                {instructions}\r\n                            </div>\r\n                            <FormControl variant='outlined' className={classes.textInput} >\r\n                                <Select\r\n                                    value={selectedUser}\r\n                                    onChange={handleChange}\r\n                                    className={classes.menu}\r\n                                    MenuProps={{\r\n                                        classes: {\r\n                                            paper: classes.menupaper,\r\n                                           \r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    {\r\n                                        userList.map( (user, i) => {\r\n                                            return (\r\n                                                <MenuItem\r\n                                                    className={classes.menuitem}\r\n                                                    value={user._id} \r\n                                                    key={i}\r\n                                                    style={{ direction: lang.code === 'he' ? 'rtl' : 'ltr'}}\r\n                                                >\r\n                                                    {`${user.firstName} ${user.lastName}`}\r\n                                                </MenuItem>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Select>\r\n                            </FormControl>\r\n                            <div className={classes.controls}>\r\n                                <Button\r\n                                    className={clsx(classes.control, classes.save)}\r\n                                    onClick={handleSave(selectedUser)}\r\n                                    disabled={!selectedUser}\r\n                                >\r\n                                    {t(\"alert.confirm\")}\r\n                                </Button>\r\n                                <Button\r\n                                    className={clsx(classes.control, classes.cancel)}\r\n                                    onClick={handleClose}\r\n                                >\r\n                                    {t(\"alert.cancel\")}\r\n                                </Button>\r\n                            </div>\r\n                        </Paper>\r\n                    </Grid>\r\n                    \r\n                </Grid> \r\n                \r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        background: 'rgba(0,0,0,0.4)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        padding: '10px',\r\n        borderRadius: '10px',\r\n        '&:focus': {\r\n            outline: 'none'\r\n        }\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backdropFilter: 'blur(10px)'   \r\n    },\r\n    header: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center'\r\n    },\r\n    title: {\r\n        color: 'white',\r\n        fontSize: '18px',\r\n        padding: '5px 10px',\r\n        height: 'fit-content'\r\n    },\r\n    closeBtn: {\r\n        fontSize: '20px',\r\n        height: '40px',\r\n        width: '40px'\r\n    },\r\n    icon: {\r\n        color: 'white',\r\n        borderRadius: '25px',\r\n        padding: '5px',\r\n        '&:hover': {\r\n            background: 'rgba(255,255,255,0.2)'\r\n        }\r\n    },\r\n    instructions: {\r\n        width: 'auto',\r\n        color: 'rgba(255,255,255,0.6)',\r\n        fontSize: '12px',\r\n        margin: '0px 10px'\r\n    },\r\n    menu: {\r\n        color: 'white',\r\n        '&:hover': {\r\n            borderColor: 'white'\r\n        }\r\n    },\r\n    menupaper: {\r\n        background: 'rgba(0,0,0,0.3)',\r\n        backdropFilter: 'blur(10px)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        maxHeight: '200px',\r\n        overflowY: 'auto',\r\n        marginTop: '60px',\r\n        marginRight: '7px',\r\n    },\r\n    menuitem: {\r\n        color: 'white'\r\n    },\r\n    textInput: {\r\n        margin: '20px 5px',\r\n        width: '300px',\r\n        '& input': {\r\n            color: 'white',\r\n            paddingLeft: '20px',\r\n        },\r\n        '& label': {\r\n            color: 'white',\r\n            paddingLeft: '5px' \r\n        },\r\n        '& fieldset': {\r\n            borderColor: 'rgba(255,255,255,0.6)',\r\n            borderRadius: '42px'\r\n        }    \r\n    },\r\n    controls: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    control: {\r\n        width: '30%',\r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        fontSize: '16px',\r\n        margin: '5px',\r\n        padding: '5px 30px',\r\n        borderRadius: '30px',\r\n        color: 'white', \r\n    },\r\n    save: {\r\n        background: 'rgba(0,0,0,0.2)', \r\n        '&:hover': {\r\n            background: 'black'\r\n        },\r\n        '&:disabled': {\r\n            color: 'rgba(255,255,255,0.3)'\r\n        }\r\n    },\r\n    cancel: {\r\n        border: '0px solid grey',\r\n        '&:hover': {\r\n            borderWidth: '1px'\r\n        }\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\AlertDialog.js",["461"],"import React, { useContext } from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\nimport { useTranslation } from 'react-i18next';\r\nimport clsx from 'clsx';\r\n\r\nexport const AlertDialog = ({ alertDialog , open }) => {\r\n\r\n        const classes = useStyles();\r\n        const { lang } = useContext(LanguageContext);\r\n        const { t, i18n } = useTranslation();\r\n  return (\r\n    <Dialog\r\n        open={true}\r\n        onClose={alertDialog.handleCancel}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n        style={{ direction: lang.dir}}\r\n        classes={{\r\n            root: classes.root, \r\n            paper: classes.paper,\r\n            container: classes.container\r\n        }}\r\n        BackdropProps={{\r\n            timeout: 500,\r\n            classes: {\r\n                root: classes.root\r\n            }\r\n        }}\r\n    >\r\n    <DialogTitle id=\"alert-dialog-title\" style={{ direction: lang.dir}} className={classes.title}>\r\n        {alertDialog.title}\r\n    </DialogTitle>\r\n    <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-description\" style={{ direction: lang.dir}} className={classes.text}>\r\n        { alertDialog.text }\r\n        </DialogContentText>\r\n    </DialogContent>\r\n    <DialogActions className={classes.controls}>\r\n        <Button\r\n            className={clsx(classes.control, classes.save)}\r\n            onClick={alertDialog.handleConfirm}\r\n        >\r\n            { alertDialog.confirmText || t(\"alert.confirm\") }\r\n        </Button>\r\n        <Button\r\n            className={clsx(classes.control, classes.cancel)}\r\n            onClick={alertDialog.handleCancel}\r\n        >\r\n            { alertDialog.cancelText || t(\"alert.cancel\") }\r\n        </Button>\r\n    </DialogActions>\r\n    </Dialog>\r\n\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        backgroundColor: 'rgba(0,0,0,0.4)'\r\n    },\r\n    container: {\r\n        backdropFilter: 'blur(10px)',\r\n    },\r\n    paper: {\r\n        width: 'auto',\r\n        padding: '5px',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        borderRadius: '10px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        color: 'white'\r\n    },\r\n    text: {\r\n        color: 'white'\r\n    },\r\n    controls: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    control: {\r\n        width: '30%',\r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        fontSize: '16px',\r\n        margin: '5px',\r\n        padding: '5px 30px',\r\n        borderRadius: '30px',\r\n        color: 'white', \r\n    },\r\n    save: {\r\n        background: 'rgba(0,0,0,0.2)', \r\n        '&:hover': {\r\n            background: 'black'\r\n        }\r\n    },\r\n    cancel: {\r\n        border: '0px solid grey',\r\n        '&:hover': {\r\n            borderWidth: '1px'\r\n        }\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\UpdateStatus.js",["462","463","464"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { Grid, makeStyles, Paper, FormControl, IconButton, useMediaQuery, Fade, Modal, Backdrop,Select, MenuItem, Button } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport ClearRoundedIcon from '@material-ui/icons/ClearRounded';\r\nimport clsx from 'clsx'\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\nimport { getStatusList } from '../../api/genericApi';\r\n\r\n\r\n\r\nexport const UpdateStatus = ({ handleClose, handleSave, isOpen, currentStatus, title, instructions, module }) => {\r\n\r\n    const classes = useStyles();\r\n    const { lang } = useContext(LanguageContext);\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const { t, i18n } = useTranslation();\r\n    const [ statusList, setStatusList ] = useState([]);\r\n    const [ selectedStatus, setSelectedStatus ] = useState('')\r\n    \r\n    useEffect(() => {\r\n        getStatusList('faults')\r\n        .then(data => {\r\n            console.log(data)\r\n            if (currentStatus) {\r\n                setSelectedStatus(currentStatus._id)\r\n            }\r\n            setStatusList(data.filter(s => s._id !== currentStatus._id ));\r\n        })\r\n    }, [])\r\n\r\n    const handleChange = event => {\r\n        setSelectedStatus(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            open={isOpen}\r\n            onClose={handleClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout: 500\r\n            }}\r\n            className={classes.modal}\r\n        >\r\n            <Fade in={isOpen}>\r\n                <Grid container justify='center' alignItems='center' style={{ outline: '0'}}>\r\n                    <Grid item xs={11} sm={7} md={5} lg={3} xl={3}>\r\n                        <Paper \r\n                            className={classes.paper} \r\n                            style={{ direction: lang.dir }}\r\n                            elevation={6}    \r\n                        >\r\n                            <div className={classes.header}>\r\n                                <div className={classes.title}>\r\n                                    {title}\r\n                                </div>\r\n                                <IconButton className={classes.closeBtn} onClick={handleClose}>\r\n                                    <ClearRoundedIcon className={classes.icon}/>\r\n                                </IconButton>  \r\n                            </div>\r\n                            <div className={classes.instructions}>\r\n                                {instructions}\r\n                            </div>\r\n                            <FormControl variant='outlined' className={classes.textInput} >\r\n                                <Select\r\n                                    value={selectedStatus}\r\n                                    onChange={handleChange}\r\n                                    className={classes.menu}\r\n                                    MenuProps={{\r\n                                        classes: {\r\n                                            paper: classes.menupaper\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    {\r\n                                        statusList.map( (status, i) => {\r\n                                            return (\r\n                                                <MenuItem\r\n                                                    className={classes.menuitem}\r\n                                                    value={status._id} \r\n                                                    key={i}\r\n                                                    style={{ direction: lang.code === 'he' ? 'rtl' : 'ltr'}}\r\n                                                >\r\n                                                    {t(`${module}Module.statuses.${status.statusId}`)}\r\n                                                </MenuItem>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Select>\r\n                            </FormControl>\r\n                            <div className={classes.controls}>\r\n                                <Button\r\n                                    className={clsx(classes.control, classes.save)}\r\n                                    onClick={() => handleSave(selectedStatus)}\r\n                                    disabled={!selectedStatus}\r\n                                >\r\n                                    {t(\"alert.confirm\")}\r\n                                </Button>\r\n                                <Button\r\n                                    className={clsx(classes.control, classes.cancel)}\r\n                                    onClick={handleClose}\r\n                                >\r\n                                    {t(\"alert.cancel\")}\r\n                                </Button>\r\n                            </div>\r\n                        </Paper>\r\n                    </Grid>\r\n                    \r\n                </Grid> \r\n                \r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        background: 'rgba(0,0,0,0.4)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        padding: '10px',\r\n        borderRadius: '10px',\r\n        '&:focus': {\r\n            outline: 'none'\r\n        }\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backdropFilter: 'blur(10px)'   \r\n    },\r\n    header: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center'\r\n    },\r\n    title: {\r\n        color: 'white',\r\n        fontSize: '18px',\r\n        padding: '5px 10px',\r\n        height: 'fit-content'\r\n    },\r\n    closeBtn: {\r\n        fontSize: '20px',\r\n        height: '40px',\r\n        width: '40px'\r\n    },\r\n    icon: {\r\n        color: 'white',\r\n        borderRadius: '25px',\r\n        padding: '5px',\r\n        '&:hover': {\r\n            background: 'rgba(255,255,255,0.2)'\r\n        }\r\n    },\r\n    instructions: {\r\n        width: 'auto',\r\n        color: 'rgba(255,255,255,0.6)',\r\n        fontSize: '12px',\r\n        margin: '0px 10px'\r\n    },\r\n    menu: {\r\n        color: 'white',\r\n        '&:hover': {\r\n            borderColor: 'white'\r\n        }\r\n    },\r\n    menupaper: {\r\n        background: 'rgba(0,0,0,0.3)',\r\n        backdropFilter: 'blur(10px)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        marginTop: '55px',\r\n        marginRight: '7px',\r\n        maxHeight: '200px',\r\n        overflowY: 'auto',\r\n        \r\n\r\n    },\r\n    menuitem: {\r\n        color: 'white'\r\n    },\r\n    textInput: {\r\n        margin: '20px 5px',\r\n        width: '300px',\r\n        '& input': {\r\n            color: 'white',\r\n            paddingLeft: '20px',\r\n        },\r\n        '& label': {\r\n            color: 'white',\r\n            paddingLeft: '5px' \r\n        },\r\n        '& fieldset': {\r\n            borderColor: 'rgba(255,255,255,0.6)',\r\n            borderRadius: '42px'\r\n        }    \r\n    },\r\n    controls: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    control: {\r\n        width: '30%',\r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        fontSize: '16px',\r\n        margin: '5px',\r\n        padding: '5px 30px',\r\n        borderRadius: '30px',\r\n        color: 'white', \r\n    },\r\n    save: {\r\n        background: 'rgba(0,0,0,0.2)', \r\n        '&:hover': {\r\n            background: 'black'\r\n        },\r\n        '&:disabled': {\r\n            color: 'rgba(255,255,255,0.3)'\r\n        }\r\n    },\r\n    cancel: {\r\n        border: '0px solid grey',\r\n        '&:hover': {\r\n            borderWidth: '1px'\r\n        }\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultBlockView.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\FaultsContext.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultBlock.js",["465"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { FaultMinified } from './FaultMinified';\r\nimport { Link } from 'react-router-dom';\r\nimport clsx from 'clsx';\r\nimport DoubleArrowIcon from '@material-ui/icons/DoubleArrow';\r\n\r\nexport const FaultBlock = ({ data }) => {\r\n    \r\n    const classes = useStyles();\r\n\r\n    return ( \r\n        <div \r\n            className={clsx(classes.faultContainer)}\r\n        >\r\n            <Link\r\n                to={`/workspace/faults/${data.faultId}`}\r\n                style={{ textDecoration: 'none' }}\r\n            >\r\n                <FaultMinified data={data}  />\r\n            </Link>\r\n        </div>                               \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({ \r\n   faultContainer: {\r\n    padding: '10px',\r\n    border: '1px solid rgba(255,255,255,0.2)',\r\n    borderRadius: '7px',\r\n    background: 'rgba(0,0,0,0.4)',\r\n    margin : '5px 0'\r\n   }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\UpsertTask.js",["466","467","468","469","470","471","472","473"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\tasksApi.js",["474"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\TaskSteps.js",["475","476","477","478"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\Tasks.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\TasksList.js",["479"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\TaskView.js",["480","481"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\TaskMinified.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\ItemLink.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\TimeActive.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\TaskViewControls.js",["482","483","484","485"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\TasksControls.js",["486","487"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\scheduler\\Scheduler.js",["488","489","490","491","492","493","494","495","496","497","498","499","500","501","502"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\scheduler\\ScheduleItem.js",["503","504","505","506","507","508","509","510"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\datepickers\\CustomDateTimePicker.js",["511"],"import DateFnsUtils from '@date-io/date-fns';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { DateTimePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport heLocale from 'date-fns/locale/he';\r\nimport React, {useContext} from 'react';\r\nimport { LanguageContext } from '../../../context/LanguageContext';\r\n\r\nexport const CustomDateTimePicker = ({ data, handleChange, label }) => {\r\n\tconst classes = useStyles();\r\n\tconst { lang } = useContext(LanguageContext);\r\n\r\n\treturn (\r\n\t\r\n\t\t\t<MuiPickersUtilsProvider utils={DateFnsUtils} locale={heLocale}>\r\n\t\t\t\t<DateTimePicker\r\n\t\t\t\t\tformat={lang.dateformat}\r\n\t\t\t\t\tlabel={label}\r\n\t\t\t\t\tvalue={data || null}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\tinputVariant={'outlined'}\r\n\t\t\t\t\tclassName={classes.textField}\r\n\t\t\t\t\tautoOk={true}\r\n\t\t\t\t\tampm={false}\r\n\t\t\t\t\tdisableToolbar={true}\r\n\t\t\t\t\tvariant={'inline'}\r\n\t\t\t\t/>\r\n\t\t\t</MuiPickersUtilsProvider>\r\n\t);\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\ttextField: {\r\n\t\twidth: '100%',\r\n\t\t'& fieldset': {\r\n\t\t\tborderRadius: '5px',\r\n\t\t},\r\n\t},\r\n\ttextField: {\r\n\t\twidth: '100%',\r\n\t\t'& fieldset': {\r\n\t\t\tborderRadius: '5px',\r\n\t\t},\r\n\t},\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\datepickers\\CustomTimePicker.js",["512"],"import DateFnsUtils from '@date-io/date-fns';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport {  MuiPickersUtilsProvider, TimePicker } from '@material-ui/pickers';\r\nimport heLocale from 'date-fns/locale/he';\r\nimport React, {useContext} from 'react';\r\nimport { LanguageContext } from '../../../context/LanguageContext';\r\n\r\nexport const CustomTimePicker = ({ data, handleChange, label }) => {\r\n\tconst classes = useStyles();\r\n\tconst { lang } = useContext(LanguageContext);\r\n\r\n\treturn (\r\n\t\r\n\t\t\t<MuiPickersUtilsProvider utils={DateFnsUtils} locale={heLocale}>\r\n\t\t\t\t<TimePicker\r\n\t\t\t\t\tformat={lang.timeonly}\r\n\t\t\t\t\tlabel={label}\r\n\t\t\t\t\tvalue={data || null}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\tinputVariant={'outlined'}\r\n\t\t\t\t\tclassName={classes.textField}\r\n\t\t\t\t\tautoOk={true}\r\n\t\t\t\t\tampm={false}\r\n\t\t\t\t\tvariant={'inline'}\r\n\t\t\t\t\tdisableToolbar={true}\r\n                    views={[\"hours\", \"minutes\"]}\r\n\t\t\t\t/>\r\n\t\t\t</MuiPickersUtilsProvider>\r\n\t);\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\ttextField: {\r\n\t\twidth: '100%',\r\n\t\t'& fieldset': {\r\n\t\t\tborderRadius: '5px',\r\n\t\t},\r\n\t},\r\n\ttextField: {\r\n\t\twidth: '100%',\r\n\t\t'& fieldset': {\r\n\t\t\tborderRadius: '5px',\r\n\t\t},\r\n\t},\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\scheduler\\DayOfWeek.js",[],{"ruleId":"513","replacedBy":"514"},{"ruleId":"515","replacedBy":"516"},{"ruleId":"517","severity":1,"message":"518","line":1,"column":42,"nodeType":"519","messageId":"520","endLine":1,"endColumn":51},{"ruleId":"521","severity":1,"message":"522","line":13,"column":27,"nodeType":"523","messageId":"524","endLine":13,"endColumn":29},{"ruleId":"525","severity":1,"message":"526","line":32,"column":8,"nodeType":"527","endLine":32,"endColumn":10,"suggestions":"528"},{"ruleId":"525","severity":1,"message":"529","line":34,"column":8,"nodeType":"527","endLine":34,"endColumn":10,"suggestions":"530"},{"ruleId":"517","severity":1,"message":"531","line":19,"column":16,"nodeType":"519","messageId":"520","endLine":19,"endColumn":20},{"ruleId":"517","severity":1,"message":"531","line":14,"column":16,"nodeType":"519","messageId":"520","endLine":14,"endColumn":20},{"ruleId":"517","severity":1,"message":"532","line":3,"column":21,"nodeType":"519","messageId":"520","endLine":3,"endColumn":32},{"ruleId":"517","severity":1,"message":"531","line":15,"column":16,"nodeType":"519","messageId":"520","endLine":15,"endColumn":20},{"ruleId":"525","severity":1,"message":"533","line":38,"column":8,"nodeType":"527","endLine":38,"endColumn":19,"suggestions":"534"},{"ruleId":"517","severity":1,"message":"518","line":1,"column":17,"nodeType":"519","messageId":"520","endLine":1,"endColumn":26},{"ruleId":"517","severity":1,"message":"535","line":2,"column":108,"nodeType":"519","messageId":"520","endLine":2,"endColumn":116},{"ruleId":"517","severity":1,"message":"536","line":2,"column":118,"nodeType":"519","messageId":"520","endLine":2,"endColumn":123},{"ruleId":"517","severity":1,"message":"537","line":17,"column":10,"nodeType":"519","messageId":"520","endLine":17,"endColumn":21},{"ruleId":"517","severity":1,"message":"531","line":25,"column":16,"nodeType":"519","messageId":"520","endLine":25,"endColumn":20},{"ruleId":"538","severity":1,"message":"539","line":207,"column":9,"nodeType":"540","messageId":"524","endLine":207,"endColumn":19},{"ruleId":"517","severity":1,"message":"541","line":4,"column":8,"nodeType":"519","messageId":"520","endLine":4,"endColumn":25},{"ruleId":"517","severity":1,"message":"542","line":9,"column":10,"nodeType":"519","messageId":"520","endLine":9,"endColumn":29},{"ruleId":"517","severity":1,"message":"531","line":43,"column":16,"nodeType":"519","messageId":"520","endLine":43,"endColumn":20},{"ruleId":"517","severity":1,"message":"543","line":5,"column":8,"nodeType":"519","messageId":"520","endLine":5,"endColumn":41},{"ruleId":"517","severity":1,"message":"531","line":12,"column":16,"nodeType":"519","messageId":"520","endLine":12,"endColumn":20},{"ruleId":"517","severity":1,"message":"531","line":19,"column":16,"nodeType":"519","messageId":"520","endLine":19,"endColumn":20},{"ruleId":"525","severity":1,"message":"544","line":33,"column":8,"nodeType":"527","endLine":33,"endColumn":16,"suggestions":"545"},{"ruleId":"546","severity":1,"message":"547","line":71,"column":28,"nodeType":"548","messageId":"549","endLine":71,"endColumn":29,"suggestions":"550"},{"ruleId":"517","severity":1,"message":"551","line":3,"column":43,"nodeType":"519","messageId":"520","endLine":3,"endColumn":62},{"ruleId":"517","severity":1,"message":"552","line":4,"column":50,"nodeType":"519","messageId":"520","endLine":4,"endColumn":54},{"ruleId":"525","severity":1,"message":"553","line":22,"column":8,"nodeType":"527","endLine":22,"endColumn":20,"suggestions":"554"},{"ruleId":"525","severity":1,"message":"555","line":25,"column":8,"nodeType":"527","endLine":25,"endColumn":10,"suggestions":"556"},{"ruleId":"525","severity":1,"message":"557","line":41,"column":8,"nodeType":"527","endLine":41,"endColumn":15,"suggestions":"558"},{"ruleId":"525","severity":1,"message":"559","line":31,"column":8,"nodeType":"527","endLine":31,"endColumn":10,"suggestions":"560"},{"ruleId":"525","severity":1,"message":"557","line":49,"column":8,"nodeType":"527","endLine":49,"endColumn":16,"suggestions":"561"},{"ruleId":"517","severity":1,"message":"562","line":1,"column":44,"nodeType":"519","messageId":"520","endLine":1,"endColumn":57},{"ruleId":"525","severity":1,"message":"533","line":41,"column":8,"nodeType":"527","endLine":41,"endColumn":19,"suggestions":"563"},{"ruleId":"517","severity":1,"message":"531","line":37,"column":16,"nodeType":"519","messageId":"520","endLine":37,"endColumn":20},{"ruleId":"525","severity":1,"message":"564","line":60,"column":8,"nodeType":"527","endLine":60,"endColumn":25,"suggestions":"565"},{"ruleId":"525","severity":1,"message":"566","line":30,"column":8,"nodeType":"527","endLine":30,"endColumn":20,"suggestions":"567"},{"ruleId":"525","severity":1,"message":"568","line":45,"column":8,"nodeType":"527","endLine":45,"endColumn":15,"suggestions":"569"},{"ruleId":"570","severity":1,"message":"571","line":81,"column":42,"nodeType":"572","messageId":"524","endLine":81,"endColumn":44},{"ruleId":"517","severity":1,"message":"535","line":2,"column":10,"nodeType":"519","messageId":"520","endLine":2,"endColumn":18},{"ruleId":"517","severity":1,"message":"536","line":2,"column":50,"nodeType":"519","messageId":"520","endLine":2,"endColumn":55},{"ruleId":"517","severity":1,"message":"531","line":17,"column":16,"nodeType":"519","messageId":"520","endLine":17,"endColumn":20},{"ruleId":"517","severity":1,"message":"531","line":15,"column":16,"nodeType":"519","messageId":"520","endLine":15,"endColumn":20},{"ruleId":"517","severity":1,"message":"573","line":16,"column":11,"nodeType":"519","messageId":"520","endLine":16,"endColumn":17},{"ruleId":"517","severity":1,"message":"573","line":15,"column":11,"nodeType":"519","messageId":"520","endLine":15,"endColumn":17},{"ruleId":"517","severity":1,"message":"531","line":16,"column":16,"nodeType":"519","messageId":"520","endLine":16,"endColumn":20},{"ruleId":"525","severity":1,"message":"574","line":26,"column":8,"nodeType":"527","endLine":26,"endColumn":10,"suggestions":"575"},{"ruleId":"517","severity":1,"message":"531","line":9,"column":16,"nodeType":"519","messageId":"520","endLine":9,"endColumn":20},{"ruleId":"517","severity":1,"message":"518","line":1,"column":17,"nodeType":"519","messageId":"520","endLine":1,"endColumn":26},{"ruleId":"517","severity":1,"message":"576","line":1,"column":28,"nodeType":"519","messageId":"520","endLine":1,"endColumn":36},{"ruleId":"517","severity":1,"message":"577","line":2,"column":34,"nodeType":"519","messageId":"520","endLine":2,"endColumn":39},{"ruleId":"517","severity":1,"message":"531","line":16,"column":16,"nodeType":"519","messageId":"520","endLine":16,"endColumn":20},{"ruleId":"517","severity":1,"message":"531","line":20,"column":16,"nodeType":"519","messageId":"520","endLine":20,"endColumn":20},{"ruleId":"538","severity":1,"message":"578","line":212,"column":9,"nodeType":"540","messageId":"524","endLine":212,"endColumn":16},{"ruleId":"517","severity":1,"message":"579","line":5,"column":10,"nodeType":"519","messageId":"520","endLine":5,"endColumn":16},{"ruleId":"517","severity":1,"message":"531","line":33,"column":16,"nodeType":"519","messageId":"520","endLine":33,"endColumn":20},{"ruleId":"525","severity":1,"message":"580","line":55,"column":8,"nodeType":"527","endLine":55,"endColumn":25,"suggestions":"581"},{"ruleId":"517","severity":1,"message":"582","line":3,"column":10,"nodeType":"519","messageId":"520","endLine":3,"endColumn":24},{"ruleId":"517","severity":1,"message":"583","line":3,"column":10,"nodeType":"519","messageId":"520","endLine":3,"endColumn":20},{"ruleId":"517","severity":1,"message":"584","line":5,"column":10,"nodeType":"519","messageId":"520","endLine":5,"endColumn":18},{"ruleId":"517","severity":1,"message":"585","line":11,"column":11,"nodeType":"519","messageId":"520","endLine":11,"endColumn":19},{"ruleId":"517","severity":1,"message":"562","line":1,"column":28,"nodeType":"519","messageId":"520","endLine":1,"endColumn":41},{"ruleId":"517","severity":1,"message":"586","line":3,"column":10,"nodeType":"519","messageId":"520","endLine":3,"endColumn":24},{"ruleId":"517","severity":1,"message":"531","line":15,"column":16,"nodeType":"519","messageId":"520","endLine":15,"endColumn":20},{"ruleId":"587","severity":1,"message":"588","line":28,"column":68,"nodeType":"589","endLine":28,"endColumn":92},{"ruleId":"517","severity":1,"message":"590","line":3,"column":10,"nodeType":"519","messageId":"520","endLine":3,"endColumn":20},{"ruleId":"525","severity":1,"message":"591","line":55,"column":8,"nodeType":"527","endLine":55,"endColumn":28,"suggestions":"592"},{"ruleId":"517","severity":1,"message":"593","line":2,"column":22,"nodeType":"519","messageId":"520","endLine":2,"endColumn":27},{"ruleId":"517","severity":1,"message":"594","line":15,"column":13,"nodeType":"519","messageId":"520","endLine":15,"endColumn":20},{"ruleId":"517","severity":1,"message":"595","line":16,"column":13,"nodeType":"519","messageId":"520","endLine":16,"endColumn":27},{"ruleId":"596","severity":1,"message":"597","line":115,"column":13,"nodeType":"598","endLine":115,"endColumn":58},{"ruleId":"517","severity":1,"message":"531","line":13,"column":16,"nodeType":"519","messageId":"520","endLine":13,"endColumn":20},{"ruleId":"517","severity":1,"message":"599","line":37,"column":23,"nodeType":"519","messageId":"520","endLine":37,"endColumn":26},{"ruleId":"517","severity":1,"message":"562","line":1,"column":103,"nodeType":"519","messageId":"520","endLine":1,"endColumn":116},{"ruleId":"517","severity":1,"message":"583","line":10,"column":10,"nodeType":"519","messageId":"520","endLine":10,"endColumn":20},{"ruleId":"517","severity":1,"message":"600","line":10,"column":22,"nodeType":"519","messageId":"520","endLine":10,"endColumn":33},{"ruleId":"570","severity":1,"message":"571","line":139,"column":44,"nodeType":"572","messageId":"524","endLine":139,"endColumn":46},{"ruleId":"517","severity":1,"message":"562","line":1,"column":44,"nodeType":"519","messageId":"520","endLine":1,"endColumn":57},{"ruleId":"525","severity":1,"message":"601","line":36,"column":8,"nodeType":"527","endLine":36,"endColumn":19,"suggestions":"602"},{"ruleId":"525","severity":1,"message":"544","line":47,"column":8,"nodeType":"527","endLine":47,"endColumn":18,"suggestions":"603"},{"ruleId":"517","severity":1,"message":"604","line":95,"column":7,"nodeType":"519","messageId":"520","endLine":95,"endColumn":16},{"ruleId":"517","severity":1,"message":"605","line":2,"column":38,"nodeType":"519","messageId":"520","endLine":2,"endColumn":45},{"ruleId":"517","severity":1,"message":"606","line":7,"column":10,"nodeType":"519","messageId":"520","endLine":7,"endColumn":22},{"ruleId":"517","severity":1,"message":"573","line":12,"column":11,"nodeType":"519","messageId":"520","endLine":12,"endColumn":17},{"ruleId":"517","severity":1,"message":"531","line":15,"column":16,"nodeType":"519","messageId":"520","endLine":15,"endColumn":20},{"ruleId":"517","severity":1,"message":"562","line":2,"column":174,"nodeType":"519","messageId":"520","endLine":2,"endColumn":187},{"ruleId":"517","severity":1,"message":"607","line":12,"column":10,"nodeType":"519","messageId":"520","endLine":12,"endColumn":21},{"ruleId":"517","severity":1,"message":"608","line":23,"column":19,"nodeType":"519","messageId":"520","endLine":23,"endColumn":26},{"ruleId":"538","severity":1,"message":"609","line":394,"column":53,"nodeType":"540","messageId":"524","endLine":394,"endColumn":60},{"ruleId":"538","severity":1,"message":"610","line":913,"column":9,"nodeType":"540","messageId":"524","endLine":913,"endColumn":15},{"ruleId":"517","severity":1,"message":"562","line":1,"column":153,"nodeType":"519","messageId":"520","endLine":1,"endColumn":166},{"ruleId":"517","severity":1,"message":"608","line":23,"column":19,"nodeType":"519","messageId":"520","endLine":23,"endColumn":26},{"ruleId":"525","severity":1,"message":"611","line":70,"column":8,"nodeType":"527","endLine":70,"endColumn":10,"suggestions":"612"},{"ruleId":"596","severity":1,"message":"597","line":448,"column":73,"nodeType":"598","endLine":448,"endColumn":125},{"ruleId":"538","severity":1,"message":"610","line":643,"column":9,"nodeType":"540","messageId":"524","endLine":643,"endColumn":15},{"ruleId":"517","severity":1,"message":"573","line":15,"column":11,"nodeType":"519","messageId":"520","endLine":15,"endColumn":17},{"ruleId":"517","severity":1,"message":"531","line":16,"column":16,"nodeType":"519","messageId":"520","endLine":16,"endColumn":20},{"ruleId":"525","severity":1,"message":"613","line":28,"column":8,"nodeType":"527","endLine":28,"endColumn":10,"suggestions":"614"},{"ruleId":"517","severity":1,"message":"562","line":1,"column":139,"nodeType":"519","messageId":"520","endLine":1,"endColumn":152},{"ruleId":"517","severity":1,"message":"608","line":18,"column":19,"nodeType":"519","messageId":"520","endLine":18,"endColumn":26},{"ruleId":"525","severity":1,"message":"615","line":59,"column":7,"nodeType":"527","endLine":59,"endColumn":9,"suggestions":"616"},{"ruleId":"517","severity":1,"message":"573","line":15,"column":11,"nodeType":"519","messageId":"520","endLine":15,"endColumn":17},{"ruleId":"517","severity":1,"message":"531","line":16,"column":16,"nodeType":"519","messageId":"520","endLine":16,"endColumn":20},{"ruleId":"525","severity":1,"message":"617","line":25,"column":8,"nodeType":"527","endLine":25,"endColumn":10,"suggestions":"618"},{"ruleId":"517","severity":1,"message":"531","line":17,"column":20,"nodeType":"519","messageId":"520","endLine":17,"endColumn":24},{"ruleId":"517","severity":1,"message":"573","line":15,"column":11,"nodeType":"519","messageId":"520","endLine":15,"endColumn":17},{"ruleId":"517","severity":1,"message":"531","line":16,"column":16,"nodeType":"519","messageId":"520","endLine":16,"endColumn":20},{"ruleId":"525","severity":1,"message":"619","line":29,"column":8,"nodeType":"527","endLine":29,"endColumn":10,"suggestions":"620"},{"ruleId":"517","severity":1,"message":"621","line":6,"column":8,"nodeType":"519","messageId":"520","endLine":6,"endColumn":23},{"ruleId":"517","severity":1,"message":"622","line":1,"column":42,"nodeType":"519","messageId":"520","endLine":1,"endColumn":50},{"ruleId":"517","severity":1,"message":"573","line":20,"column":11,"nodeType":"519","messageId":"520","endLine":20,"endColumn":17},{"ruleId":"517","severity":1,"message":"531","line":21,"column":16,"nodeType":"519","messageId":"520","endLine":21,"endColumn":20},{"ruleId":"517","severity":1,"message":"608","line":22,"column":19,"nodeType":"519","messageId":"520","endLine":22,"endColumn":26},{"ruleId":"525","severity":1,"message":"623","line":52,"column":8,"nodeType":"527","endLine":52,"endColumn":30,"suggestions":"624"},{"ruleId":"525","severity":1,"message":"625","line":80,"column":8,"nodeType":"527","endLine":80,"endColumn":10,"suggestions":"626"},{"ruleId":"596","severity":1,"message":"597","line":567,"column":73,"nodeType":"598","endLine":567,"endColumn":125},{"ruleId":"538","severity":1,"message":"610","line":762,"column":9,"nodeType":"540","messageId":"524","endLine":762,"endColumn":15},{"ruleId":"517","severity":1,"message":"627","line":2,"column":10,"nodeType":"519","messageId":"520","endLine":2,"endColumn":28},{"ruleId":"517","severity":1,"message":"628","line":2,"column":49,"nodeType":"519","messageId":"520","endLine":2,"endColumn":65},{"ruleId":"517","severity":1,"message":"629","line":2,"column":67,"nodeType":"519","messageId":"520","endLine":2,"endColumn":75},{"ruleId":"517","severity":1,"message":"531","line":11,"column":16,"nodeType":"519","messageId":"520","endLine":11,"endColumn":20},{"ruleId":"517","severity":1,"message":"630","line":12,"column":13,"nodeType":"519","messageId":"520","endLine":12,"endColumn":18},{"ruleId":"525","severity":1,"message":"631","line":29,"column":5,"nodeType":"527","endLine":29,"endColumn":16,"suggestions":"632"},{"ruleId":"517","severity":1,"message":"573","line":45,"column":8,"nodeType":"519","messageId":"520","endLine":45,"endColumn":14},{"ruleId":"525","severity":1,"message":"633","line":67,"column":5,"nodeType":"527","endLine":67,"endColumn":7,"suggestions":"634"},{"ruleId":"517","severity":1,"message":"635","line":7,"column":2,"nodeType":"519","messageId":"520","endLine":7,"endColumn":6},{"ruleId":"517","severity":1,"message":"518","line":14,"column":29,"nodeType":"519","messageId":"520","endLine":14,"endColumn":38},{"ruleId":"517","severity":1,"message":"636","line":18,"column":8,"nodeType":"519","messageId":"520","endLine":18,"endColumn":12},{"ruleId":"517","severity":1,"message":"531","line":31,"column":13,"nodeType":"519","messageId":"520","endLine":31,"endColumn":17},{"ruleId":"517","severity":1,"message":"531","line":32,"column":13,"nodeType":"519","messageId":"520","endLine":32,"endColumn":17},{"ruleId":"525","severity":1,"message":"580","line":53,"column":5,"nodeType":"527","endLine":53,"endColumn":22,"suggestions":"637"},{"ruleId":"517","severity":1,"message":"518","line":1,"column":27,"nodeType":"519","messageId":"520","endLine":1,"endColumn":36},{"ruleId":"517","severity":1,"message":"638","line":5,"column":2,"nodeType":"519","messageId":"520","endLine":5,"endColumn":8},{"ruleId":"517","severity":1,"message":"639","line":7,"column":2,"nodeType":"519","messageId":"520","endLine":7,"endColumn":10},{"ruleId":"517","severity":1,"message":"640","line":8,"column":2,"nodeType":"519","messageId":"520","endLine":8,"endColumn":12},{"ruleId":"517","severity":1,"message":"622","line":9,"column":2,"nodeType":"519","messageId":"520","endLine":9,"endColumn":10},{"ruleId":"517","severity":1,"message":"641","line":10,"column":2,"nodeType":"519","messageId":"520","endLine":10,"endColumn":11},{"ruleId":"517","severity":1,"message":"642","line":19,"column":8,"nodeType":"519","messageId":"520","endLine":19,"endColumn":32},{"ruleId":"517","severity":1,"message":"643","line":20,"column":10,"nodeType":"519","messageId":"520","endLine":20,"endColumn":20},{"ruleId":"517","severity":1,"message":"644","line":20,"column":22,"nodeType":"519","messageId":"520","endLine":20,"endColumn":45},{"ruleId":"517","severity":1,"message":"645","line":21,"column":8,"nodeType":"519","messageId":"520","endLine":21,"endColumn":20},{"ruleId":"517","severity":1,"message":"646","line":22,"column":8,"nodeType":"519","messageId":"520","endLine":22,"endColumn":16},{"ruleId":"517","severity":1,"message":"647","line":23,"column":10,"nodeType":"519","messageId":"520","endLine":23,"endColumn":31},{"ruleId":"517","severity":1,"message":"648","line":26,"column":7,"nodeType":"519","messageId":"520","endLine":26,"endColumn":16},{"ruleId":"517","severity":1,"message":"649","line":27,"column":7,"nodeType":"519","messageId":"520","endLine":27,"endColumn":13},{"ruleId":"538","severity":1,"message":"650","line":245,"column":2,"nodeType":"540","messageId":"524","endLine":245,"endColumn":11},{"ruleId":"517","severity":1,"message":"651","line":2,"column":5,"nodeType":"519","messageId":"520","endLine":2,"endColumn":11},{"ruleId":"517","severity":1,"message":"641","line":8,"column":2,"nodeType":"519","messageId":"520","endLine":8,"endColumn":11},{"ruleId":"517","severity":1,"message":"652","line":16,"column":28,"nodeType":"519","messageId":"520","endLine":16,"endColumn":35},{"ruleId":"517","severity":1,"message":"653","line":16,"column":37,"nodeType":"519","messageId":"520","endLine":16,"endColumn":45},{"ruleId":"517","severity":1,"message":"636","line":17,"column":8,"nodeType":"519","messageId":"520","endLine":17,"endColumn":12},{"ruleId":"517","severity":1,"message":"649","line":30,"column":7,"nodeType":"519","messageId":"520","endLine":30,"endColumn":13},{"ruleId":"525","severity":1,"message":"654","line":59,"column":5,"nodeType":"527","endLine":59,"endColumn":15,"suggestions":"655"},{"ruleId":"538","severity":1,"message":"650","line":307,"column":2,"nodeType":"540","messageId":"524","endLine":307,"endColumn":11},{"ruleId":"538","severity":1,"message":"650","line":38,"column":2,"nodeType":"540","messageId":"524","endLine":38,"endColumn":11},{"ruleId":"538","severity":1,"message":"650","line":39,"column":2,"nodeType":"540","messageId":"524","endLine":39,"endColumn":11},"no-native-reassign",["656"],"no-negated-in-lhs",["657"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setAuth'. Either include it or remove the dependency array.","ArrayExpression",["658"],"React Hook useEffect has a missing dependency: 'checkUserAuthentication'. Either include it or remove the dependency array.",["659"],"'i18n' is assigned a value but never used.","'removeAsset' is defined but never used.","React Hook useEffect has a missing dependency: 'location.search'. Either include it or remove the dependency array.",["660"],"'Backdrop' is defined but never used.","'Modal' is defined but never used.","'UpdateOwner' is defined but never used.","no-dupe-keys","Duplicate key 'background'.","ObjectExpression","'SearchRoundedIcon' is defined but never used.","'FilterByMultiSelect' is defined but never used.","'TransferWithinAStationRoundedIcon' is defined but never used.","React Hook useEffect has missing dependencies: 'history', 'location.pathname', and 'location.search'. Either include them or remove the dependency array.",["661"],"no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["662","663"],"'queryParamsToObject' is defined but never used.","'Grid' is defined but never used.","React Hook useEffect has missing dependencies: 'filterField', 'handleSearch', and 'query'. Either include them or remove the dependency array.",["664"],"React Hook useEffect has a missing dependency: 'optionsFunc'. Either include it or remove the dependency array. If 'optionsFunc' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["665"],"React Hook useEffect has missing dependencies: 'filterField', 'history', 'location.pathname', 'location.search', and 'query'. Either include them or remove the dependency array.",["666"],"React Hook useEffect has missing dependencies: 'filterField', 'optionsFunc', and 'query'. Either include them or remove the dependency array. If 'optionsFunc' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["667"],["668"],"'useMediaQuery' is defined but never used.",["669"],"React Hook useEffect has a missing dependency: 'query.asset'. Either include it or remove the dependency array.",["670"],"React Hook useEffect has a missing dependency: 'handleSearch'. Either include it or remove the dependency array.",["671"],"React Hook useEffect has missing dependencies: 'filterField', 'history', 'location.pathname', and 'location.search'. Either include them or remove the dependency array.",["672"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'downSm' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'linkedUsers'. Either include it or remove the dependency array.",["673"],"'useState' is defined but never used.","'Paper' is defined but never used.","Duplicate key 'padding'.","'SortBy' is defined but never used.","React Hook useEffect has missing dependencies: 'history', 'location.pathname', and 'query.asset'. Either include them or remove the dependency array.",["674"],"'getFullAddress' is defined but never used.","'useHistory' is defined but never used.","'useQuery' is defined but never used.","'location' is assigned a value but never used.","'useTranslation' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'makeStyles' is defined but never used.","React Hook useEffect has missing dependencies: 'fid' and 'history'. Either include them or remove the dependency array.",["675"],"'Slide' is defined but never used.","'slideIn' is assigned a value but never used.","'slideDirection' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'res' is assigned a value but never used.","'useLocation' is defined but never used.","React Hook useEffect has missing dependencies: 'query' and 'setFaults'. Either include them or remove the dependency array.",["676"],["677"],"'useStyles' is assigned a value but never used.","'Tooltip' is defined but never used.","'UpsertSystem' is defined but never used.","'AuthContext' is defined but never used.","'setMode' is assigned a value but never used.","Duplicate key 'classes'.","Duplicate key 'margin'.","React Hook useEffect has a missing dependency: 'faultId'. Either include it or remove the dependency array.",["678"],"React Hook useEffect has a missing dependency: 'currentOwner'. Either include it or remove the dependency array.",["679"],"React Hook useEffect has a missing dependency: 'assetId'. Either include it or remove the dependency array.",["680"],"React Hook useEffect has a missing dependency: 'followerList'. Either include it or remove the dependency array. If 'setUserList' needs the current value of 'followerList', you can also switch to useReducer instead of useState and read 'followerList' in the reducer.",["681"],"React Hook useEffect has a missing dependency: 'currentStatus'. Either include it or remove the dependency array.",["682"],"'DoubleArrowIcon' is defined but never used.","'Collapse' is defined but never used.","React Hook useEffect has missing dependencies: 'details' and 'mode'. Either include them or remove the dependency array. You can also do a functional update 'setDetails(d => ...)' if you only need 'details' in the 'setDetails' call.",["683"],"React Hook useEffect has a missing dependency: 'taskId'. Either include it or remove the dependency array.",["684"],"'specialStringPurge' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'isSeq' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'auth.user.tenant' and 'query'. Either include them or remove the dependency array.",["685"],"React Hook useEffect has missing dependencies: 'history' and 'taskId'. Either include them or remove the dependency array.",["686"],"'Fade' is defined but never used.","'clsx' is defined but never used.",["687"],"'Select' is defined but never used.","'MenuItem' is defined but never used.","'IconButton' is defined but never used.","'TextField' is defined but never used.","'DeleteOutlineRoundedIcon' is defined but never used.","'DatePicker' is defined but never used.","'MuiPickersUtilsProvider' is defined but never used.","'DateFnsUtils' is defined but never used.","'heLocale' is defined but never used.","'updateArrayStateField' is defined but never used.","'intervals' is assigned a value but never used.","'months' is assigned a value but never used.","Duplicate key 'textField'.","'Button' is defined but never used.","'addDays' is defined but never used.","'addWeeks' is defined but never used.","React Hook useEffect has missing dependencies: 'index' and 'updateSchedules'. Either include them or remove the dependency array. If 'updateSchedules' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["688"],"no-global-assign","no-unsafe-negation",{"desc":"689","fix":"690"},{"desc":"691","fix":"692"},{"desc":"693","fix":"694"},{"desc":"695","fix":"696"},{"messageId":"697","fix":"698","desc":"699"},{"messageId":"700","fix":"701","desc":"702"},{"desc":"703","fix":"704"},{"desc":"705","fix":"706"},{"desc":"707","fix":"708"},{"desc":"709","fix":"710"},{"desc":"711","fix":"712"},{"desc":"693","fix":"713"},{"desc":"714","fix":"715"},{"desc":"716","fix":"717"},{"desc":"718","fix":"719"},{"desc":"720","fix":"721"},{"desc":"722","fix":"723"},{"desc":"724","fix":"725"},{"desc":"726","fix":"727"},{"desc":"728","fix":"729"},{"desc":"730","fix":"731"},{"desc":"732","fix":"733"},{"desc":"734","fix":"735"},{"desc":"736","fix":"737"},{"desc":"738","fix":"739"},{"desc":"740","fix":"741"},{"desc":"742","fix":"743"},{"desc":"744","fix":"745"},{"desc":"746","fix":"747"},{"desc":"722","fix":"748"},{"desc":"749","fix":"750"},"Update the dependencies array to be: [setAuth]",{"range":"751","text":"752"},"Update the dependencies array to be: [checkUserAuthentication]",{"range":"753","text":"754"},"Update the dependencies array to be: [isLoading, location.search]",{"range":"755","text":"756"},"Update the dependencies array to be: [history, location.pathname, location.search, values]",{"range":"757","text":"758"},"removeEscape",{"range":"759","text":"760"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"761","text":"762"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [filterField, handleSearch, query, searchText]",{"range":"763","text":"764"},"Update the dependencies array to be: [optionsFunc]",{"range":"765","text":"766"},"Update the dependencies array to be: [filterField, history, location.pathname, location.search, query, value]",{"range":"767","text":"768"},"Update the dependencies array to be: [filterField, optionsFunc, query]",{"range":"769","text":"770"},"Update the dependencies array to be: [filterField, history, location.pathname, location.search, query, values]",{"range":"771","text":"772"},{"range":"773","text":"756"},"Update the dependencies array to be: [location.search, query.asset]",{"range":"774","text":"775"},"Update the dependencies array to be: [handleSearch, searchText]",{"range":"776","text":"777"},"Update the dependencies array to be: [filterField, history, location.pathname, location.search, value]",{"range":"778","text":"779"},"Update the dependencies array to be: [linkedUsers]",{"range":"780","text":"781"},"Update the dependencies array to be: [history, location.pathname, location.search, query.asset]",{"range":"782","text":"783"},"Update the dependencies array to be: [faultData, faultId, fid, history]",{"range":"784","text":"785"},"Update the dependencies array to be: [isLoading, query, setFaults]",{"range":"786","text":"787"},"Update the dependencies array to be: [history, location.pathname, location.search, viewType]",{"range":"788","text":"789"},"Update the dependencies array to be: [faultId]",{"range":"790","text":"791"},"Update the dependencies array to be: [currentOwner]",{"range":"792","text":"793"},"Update the dependencies array to be: [assetId]",{"range":"794","text":"795"},"Update the dependencies array to be: [followerList]",{"range":"796","text":"797"},"Update the dependencies array to be: [currentStatus]",{"range":"798","text":"799"},"Update the dependencies array to be: [details, details.isUsingSteps, mode]",{"range":"800","text":"801"},"Update the dependencies array to be: [taskId]",{"range":"802","text":"803"},"Update the dependencies array to be: [auth.user.tenant, isLoading, query]",{"range":"804","text":"805"},"Update the dependencies array to be: [history, taskId]",{"range":"806","text":"807"},{"range":"808","text":"783"},"Update the dependencies array to be: [index, schedule, updateSchedules]",{"range":"809","text":"810"},[1132,1134],"[setAuth]",[1038,1040],"[checkUserAuthentication]",[1323,1334],"[isLoading, location.search]",[1451,1459],"[history, location.pathname, location.search, values]",[2165,2166],"",[2165,2165],"\\",[1105,1117],"[filterField, handleSearch, query, searchText]",[1078,1080],"[optionsFunc]",[1553,1560],"[filterField, history, location.pathname, location.search, query, value]",[1345,1347],"[filterField, optionsFunc, query]",[1874,1882],"[filterField, history, location.pathname, location.search, query, values]",[1411,1422],[2096,2113],"[location.search, query.asset]",[1483,1495],"[handleSearch, searchText]",[1942,1949],"[filterField, history, location.pathname, location.search, value]",[1105,1107],"[linkedUsers]",[2420,2437],"[history, location.pathname, location.search, query.asset]",[2408,2428],"[faultData, faultId, fid, history]",[1366,1377],"[isLoading, query, setFaults]",[1680,1690],"[history, location.pathname, location.search, viewType]",[2678,2680],"[faultId]",[1167,1169],"[currentOwner]",[2058,2060],"[assetId]",[1092,1094],"[followerList]",[1238,1240],"[currentStatus]",[2383,2405],"[details, details.isUsingSteps, mode]",[3253,3255],"[taskId]",[1020,1031],"[auth.user.tenant, isLoading, query]",[2469,2471],"[history, taskId]",[1961,1978],[1369,1379],"[index, schedule, updateSchedules]"]