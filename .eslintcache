[{"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\index.js":"1","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\App.js":"2","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\authContext.js":"3","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\themes\\theme.js":"4","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\workspace\\Workspace.js":"5","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\workspace\\ProtectedWorkspace.js":"6","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\routes\\InitialRouter.js":"7","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\user\\Login.js":"8","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\userApi.js":"9","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\Controls.js":"10","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\Navbar.js":"11","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\SideMenu.js":"12","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\AddMenu.js":"13","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\Assets.js":"14","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\assetsApi.js":"15","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\Asset.js":"16","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\user\\UserItem.js":"17","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\AssetsControls.js":"18","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\AssetControls.js":"19","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\SortBy.js":"20","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\FiltersContext.js":"21","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\AuthContext.js":"22","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\genericApi.js":"23","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\customHooks\\useQuery.js":"24","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\SearchBox.js":"25","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\FilterBySelect.js":"26","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\FilterByMultiSelect.js":"27","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\LanguageContext.js":"28","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\i18n.js":"29","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\Systems.js":"30","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemsControls.js":"31","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\SearchBoxSelect.js":"32","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\systemsApi.js":"33","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\System.js":"34","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemName.js":"35","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\AddLinkedUser.js":"36","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemsHeader.js":"37","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemControls.js":"38","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemLinkedUsers.js":"39","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\Faults.js":"40","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultsControls.js":"41","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\faultsApi.js":"42","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultListView.js":"43","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultMinified.js":"44","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\StatusTag.js":"45","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultLink.js":"46","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultView.js":"47","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\Carousel.js":"48","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultViewControls.js":"49","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\UserList.js":"50","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\CommentSection.js":"51","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultViews.js":"52","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\CreateContainer.js":"53","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemAdditionalDetails.js":"54","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\UpsertSystem.js":"55","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\UpsertFault.js":"56","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\UpdateOwner.js":"57","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\UpsertAsset.js":"58","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\AddFollower.js":"59","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\AlertDialog.js":"60","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\UpdateStatus.js":"61","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultBlockView.js":"62","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\FaultsContext.js":"63","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultBlock.js":"64","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\UpsertTask.js":"65","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\tasksApi.js":"66","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\TaskSteps.js":"67","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\Tasks.js":"68","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\TasksList.js":"69","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\TaskView.js":"70","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\TaskMinified.js":"71","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\ItemLink.js":"72","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\TimeActive.js":"73","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\TaskViewControls.js":"74","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\TasksControls.js":"75","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\scheduler\\Scheduler.js":"76","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\scheduler\\ScheduleItem.js":"77","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\datepickers\\CustomDateTimePicker.js":"78","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\datepickers\\CustomTimePicker.js":"79","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\scheduler\\DayOfWeek.js":"80","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\datepickers\\CustomeDatePicker.js":"81","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\documents\\UpsertDocument.js":"82","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\documents\\Documents.js":"83","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\documentsApi.js":"84","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\documents\\Document.js":"85","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\documents\\DocumentControls.js":"86","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\documents\\DocumentsControls.js":"87","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\notificationsApi.js":"88","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\Notifications.js":"89","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\Notiofication.js":"90","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\NotificationsContext.js":"91"},{"size":569,"mtime":1612721733308,"results":"92","hashOfConfig":"93"},{"size":1652,"mtime":1612719602814,"results":"94","hashOfConfig":"93"},{"size":457,"mtime":1612222036105,"results":"95","hashOfConfig":"93"},{"size":2200,"mtime":1616020195611,"results":"96","hashOfConfig":"93"},{"size":2699,"mtime":1616866886191,"results":"97","hashOfConfig":"93"},{"size":1455,"mtime":1615321776971,"results":"98","hashOfConfig":"93"},{"size":1448,"mtime":1612592795916,"results":"99","hashOfConfig":"93"},{"size":9718,"mtime":1612221364508,"results":"100","hashOfConfig":"93"},{"size":2633,"mtime":1616554554962,"results":"101","hashOfConfig":"93"},{"size":2693,"mtime":1617048663152,"results":"102","hashOfConfig":"93"},{"size":4345,"mtime":1617049547858,"results":"103","hashOfConfig":"93"},{"size":7538,"mtime":1615146699014,"results":"104","hashOfConfig":"93"},{"size":4603,"mtime":1616218167044,"results":"105","hashOfConfig":"93"},{"size":3607,"mtime":1614379036632,"results":"106","hashOfConfig":"93"},{"size":3970,"mtime":1616365671218,"results":"107","hashOfConfig":"93"},{"size":13344,"mtime":1615146717032,"results":"108","hashOfConfig":"93"},{"size":3284,"mtime":1615418509259,"results":"109","hashOfConfig":"93"},{"size":4604,"mtime":1613282044486,"results":"110","hashOfConfig":"93"},{"size":1403,"mtime":1616368289866,"results":"111","hashOfConfig":"93"},{"size":5216,"mtime":1613281720174,"results":"112","hashOfConfig":"93"},{"size":463,"mtime":1615321663340,"results":"113","hashOfConfig":"93"},{"size":457,"mtime":1612222036105,"results":"114","hashOfConfig":"93"},{"size":4909,"mtime":1616370528716,"results":"115","hashOfConfig":"93"},{"size":164,"mtime":1612245702093,"results":"116","hashOfConfig":"93"},{"size":3685,"mtime":1613353209720,"results":"117","hashOfConfig":"93"},{"size":6761,"mtime":1615321550119,"results":"118","hashOfConfig":"93"},{"size":8707,"mtime":1615321565082,"results":"119","hashOfConfig":"93"},{"size":665,"mtime":1616019893858,"results":"120","hashOfConfig":"93"},{"size":699,"mtime":1615321533737,"results":"121","hashOfConfig":"93"},{"size":3489,"mtime":1615323853923,"results":"122","hashOfConfig":"93"},{"size":5612,"mtime":1614317588999,"results":"123","hashOfConfig":"93"},{"size":8024,"mtime":1615323030893,"results":"124","hashOfConfig":"93"},{"size":5060,"mtime":1616221310948,"results":"125","hashOfConfig":"93"},{"size":6682,"mtime":1616107357779,"results":"126","hashOfConfig":"93"},{"size":5213,"mtime":1612941646899,"results":"127","hashOfConfig":"93"},{"size":7680,"mtime":1615334003502,"results":"128","hashOfConfig":"93"},{"size":2790,"mtime":1613954845212,"results":"129","hashOfConfig":"93"},{"size":5352,"mtime":1615867000701,"results":"130","hashOfConfig":"93"},{"size":8059,"mtime":1615147028522,"results":"131","hashOfConfig":"93"},{"size":669,"mtime":1615323273680,"results":"132","hashOfConfig":"93"},{"size":6541,"mtime":1616368598171,"results":"133","hashOfConfig":"93"},{"size":6416,"mtime":1616554572094,"results":"134","hashOfConfig":"93"},{"size":3651,"mtime":1615742705395,"results":"135","hashOfConfig":"93"},{"size":2598,"mtime":1615743796783,"results":"136","hashOfConfig":"93"},{"size":2282,"mtime":1615420409909,"results":"137","hashOfConfig":"93"},{"size":531,"mtime":1614989032934,"results":"138","hashOfConfig":"93"},{"size":13893,"mtime":1617112680024,"results":"139","hashOfConfig":"93"},{"size":7651,"mtime":1614357220658,"results":"140","hashOfConfig":"93"},{"size":2523,"mtime":1615740542832,"results":"141","hashOfConfig":"93"},{"size":5882,"mtime":1615748491859,"results":"142","hashOfConfig":"93"},{"size":12308,"mtime":1615333603787,"results":"143","hashOfConfig":"93"},{"size":3391,"mtime":1616219667468,"results":"144","hashOfConfig":"93"},{"size":3540,"mtime":1616303289123,"results":"145","hashOfConfig":"93"},{"size":16098,"mtime":1614052542930,"results":"146","hashOfConfig":"93"},{"size":52524,"mtime":1615938891358,"results":"147","hashOfConfig":"93"},{"size":33852,"mtime":1616219869667,"results":"148","hashOfConfig":"93"},{"size":7826,"mtime":1615334026849,"results":"149","hashOfConfig":"93"},{"size":22309,"mtime":1615471981368,"results":"150","hashOfConfig":"93"},{"size":7789,"mtime":1615333976609,"results":"151","hashOfConfig":"93"},{"size":3226,"mtime":1614380845240,"results":"152","hashOfConfig":"93"},{"size":7931,"mtime":1615347003423,"results":"153","hashOfConfig":"93"},{"size":2648,"mtime":1615420405961,"results":"154","hashOfConfig":"93"},{"size":372,"mtime":1615321404995,"results":"155","hashOfConfig":"93"},{"size":940,"mtime":1615145318433,"results":"156","hashOfConfig":"93"},{"size":41180,"mtime":1616222512484,"results":"157","hashOfConfig":"93"},{"size":6170,"mtime":1616366718951,"results":"158","hashOfConfig":"93"},{"size":4909,"mtime":1615941061458,"results":"159","hashOfConfig":"93"},{"size":661,"mtime":1615410729805,"results":"160","hashOfConfig":"93"},{"size":1935,"mtime":1615845887519,"results":"161","hashOfConfig":"93"},{"size":13947,"mtime":1617112735360,"results":"162","hashOfConfig":"93"},{"size":5278,"mtime":1615853700570,"results":"163","hashOfConfig":"93"},{"size":398,"mtime":1615508958584,"results":"164","hashOfConfig":"93"},{"size":1011,"mtime":1615599052948,"results":"165","hashOfConfig":"93"},{"size":5029,"mtime":1615952515138,"results":"166","hashOfConfig":"93"},{"size":5386,"mtime":1616368542856,"results":"167","hashOfConfig":"93"},{"size":7794,"mtime":1616107877450,"results":"168","hashOfConfig":"93"},{"size":7263,"mtime":1616103025518,"results":"169","hashOfConfig":"93"},{"size":1182,"mtime":1616020133060,"results":"170","hashOfConfig":"93"},{"size":1174,"mtime":1615962255157,"results":"171","hashOfConfig":"93"},{"size":893,"mtime":1616001623687,"results":"172","hashOfConfig":"93"},{"size":1168,"mtime":1616020394598,"results":"173","hashOfConfig":"93"},{"size":26865,"mtime":1616302599688,"results":"174","hashOfConfig":"93"},{"size":2911,"mtime":1616369910130,"results":"175","hashOfConfig":"93"},{"size":2486,"mtime":1616369948348,"results":"176","hashOfConfig":"93"},{"size":5486,"mtime":1616303970114,"results":"177","hashOfConfig":"93"},{"size":3839,"mtime":1616282864591,"results":"178","hashOfConfig":"93"},{"size":5952,"mtime":1616370443619,"results":"179","hashOfConfig":"93"},{"size":1943,"mtime":1617049219163,"results":"180","hashOfConfig":"93"},{"size":4502,"mtime":1617049592159,"results":"181","hashOfConfig":"93"},{"size":5267,"mtime":1617049665634,"results":"182","hashOfConfig":"93"},{"size":428,"mtime":1616866622538,"results":"183","hashOfConfig":"93"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},"2s6085",{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"186"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"186"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"186"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"186"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"186"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"186"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"186"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"186"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"186"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"186"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"186"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"186"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"186"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"186"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"186"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"186"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"186"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"186"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"186"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"186"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"186"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"186"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"186"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"186"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"186"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"186"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"186"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"186"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"186"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"308","messages":"309","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"186"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"186"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"186"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"186"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"186"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"186"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"186"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"186"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"186"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"186"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"186"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"186"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"186"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"186"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"186"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"186"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"186"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"186"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"186"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381","usedDeprecatedRules":"186"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"186"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"387","usedDeprecatedRules":"186"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"390","usedDeprecatedRules":"186"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"393","usedDeprecatedRules":"394"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397","usedDeprecatedRules":"394"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"394"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"402","usedDeprecatedRules":"186"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405","usedDeprecatedRules":"186"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"408","usedDeprecatedRules":"186"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"411","usedDeprecatedRules":"186"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414","usedDeprecatedRules":"186"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"419","usedDeprecatedRules":"186"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"422","messages":"423","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"424","messages":"425","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\index.js",[],["428","429"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\App.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\authContext.js",["430"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\themes\\theme.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\workspace\\Workspace.js",["431"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\workspace\\ProtectedWorkspace.js",["432"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { AuthContext } from '../../context/AuthContext';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { authenticate, handleLS } from '../../api/userApi';\r\n\r\nexport const ProtectedWorkspace = ({ children, isAuthenticated,...rest}) => {\r\n    \r\n    const { auth, setAuth } = useContext(AuthContext);\r\n    const [ isLoading, setIsLoading ] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const checkUserAuthentication = async () => {\r\n            let token = await handleLS('wb_token', 'get');\r\n            if (!token) {\r\n                setIsLoading(false);\r\n                return;\r\n            };\r\n            let res = await authenticate(token);\r\n            if (res.auth) {\r\n               setAuth({\r\n                    isAuth: res.auth,\r\n                    user: res.user,\r\n                    token: res.token.token,\r\n                    refreshToken: res.token.refreshToken\r\n                });\r\n                  \r\n            }\r\n            setIsLoading(false);\r\n            return;\r\n        }\r\n        checkUserAuthentication();\r\n    }, []);\r\n\r\n    return (\r\n        <Route {...rest}\r\n          render={() => isLoading ? \r\n            'loading' : \r\n            auth.isAuth\r\n            ? children\r\n            :   <Redirect\r\n                    to={{\r\n                    pathname: \"/login\"\r\n                }}/>\r\n            }      \r\n        />\r\n      );\r\n}\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\routes\\InitialRouter.js",["433"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { AuthContext } from '../../context/AuthContext';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { authenticate, handleLS } from '../../api/userApi';\r\n\r\nexport const InitialRouter = ({...rest}) => {\r\n    \r\n    const { auth, setAuth } = useContext(AuthContext);\r\n    const [ isLoading, setIsLoading ] = useState(true);\r\n\r\n    const checkUserAuthentication = async () => {\r\n        let token = await handleLS('wb_token', 'get');\r\n        if (!token) {\r\n            setIsLoading(false);\r\n            return;\r\n        };\r\n        let res = await authenticate(token);\r\n        \r\n        if (res.auth) {\r\n           setAuth({\r\n                isAuth: res.auth,\r\n                user: res.user,\r\n                token: res.token.token,\r\n                refreshToken: res.token.refreshToken\r\n            });\r\n              \r\n        }\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n\r\n    useEffect(() => {\r\n        checkUserAuthentication();\r\n    }, []);\r\n\r\n    return (\r\n        <Route {...rest}\r\n          render={() => isLoading ? \r\n            'loading' : \r\n            auth.isAuth\r\n            ? <Redirect\r\n                to={{\r\n                    pathname: \"/workspace\"\r\n            }}/> \r\n            :   <Redirect\r\n                    to={{\r\n                    pathname: \"/login\"\r\n                }}/>\r\n            }      \r\n        />\r\n      );\r\n}\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\user\\Login.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\userApi.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\Controls.js",["434"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\Navbar.js",["435"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\SideMenu.js",["436"],"import React, { useContext } from 'react'\r\nimport { makeStyles, List, ListItem, ListItemIcon, ListItemText, Grow, ClickAwayListener, useMediaQuery } from '@material-ui/core'\r\nimport BusinessRoundedIcon from '@material-ui/icons/BusinessRounded';\r\nimport AssignmentRoundedIcon from '@material-ui/icons/AssignmentRounded';\r\nimport WarningRoundedIcon from '@material-ui/icons/WarningRounded';\r\nimport DescriptionRoundedIcon from '@material-ui/icons/DescriptionRounded';\r\nimport BlurOnRoundedIcon from '@material-ui/icons/BlurOnRounded';\r\nimport { UserItem } from '../../user/UserItem'\r\nimport ExitToAppRoundedIcon from '@material-ui/icons/ExitToAppRounded';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport { useHistory } from 'react-router-dom'; \r\nimport { useTranslation } from 'react-i18next';\r\nimport { AuthContext } from '../../../context/AuthContext';\r\n\r\nexport const SideMenu = ({toggleMenu}) => {\r\n\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const { t, i18n } = useTranslation();\r\n    const matches = useMediaQuery(theme => theme.breakpoints.up('sm'));\r\n    const { auth } = useContext(AuthContext);\r\n\r\n    const closeMenu = () => {\r\n        if (matches) {\r\n            toggleMenu()\r\n        }\r\n    }\r\n    \r\n    const handleClick = type => event => {\r\n        toggleMenu();\r\n        history.push(`/workspace/${type}`)\r\n    }\r\n\r\n    return (\r\n        <ClickAwayListener onClickAway={closeMenu}>\r\n            <Grow in={true}>\r\n                <div className={classes.sidemenuContainer}>\r\n                    <div className={classes.userContainer}>   \r\n                        <UserItem \r\n                            showTitle\r\n                            showName\r\n                            user={auth.user}\r\n                        />\r\n                    </div>\r\n                    <List className= { classes.list}>\r\n                        <ListItem button={true} className={classes.listItem}\r\n                            onClick={handleClick('assets')}\r\n                        >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <BusinessRoundedIcon fontSize={'medium'} className={classes.icon}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"sideMenu.assets\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem button={true} className={classes.listItem}\r\n                            onClick={handleClick('systems')}\r\n                        >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <BlurOnRoundedIcon fontSize={'medium'} className={classes.icon}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"sideMenu.systems\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem button={true} className={classes.listItem}\r\n                            onClick={handleClick('tasks')}\r\n                        >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <AssignmentRoundedIcon fontSize={'medium'}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"sideMenu.myTasks\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem button={true} className={classes.listItem}\r\n                            onClick={handleClick('faults')}\r\n                        >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <WarningRoundedIcon fontSize={'medium'}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"sideMenu.faults\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem button={true} className={classes.listItem}\r\n                            onClick={handleClick('docs')}\r\n                        >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <DescriptionRoundedIcon fontSize={'medium'}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"sideMenu.documents\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                    </List>\r\n                    <List className={classes.bottomList}>\r\n                        <ListItem button={true} >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <SettingsIcon fontSize={'medium'} />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"sideMenu.settings\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                        <ListItem button={true} >\r\n                            <ListItemIcon className={classes.listItemIcon}>\r\n                                <ExitToAppRoundedIcon fontSize={'medium'} />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={t(\"sideMenu.logout\")} className={classes.listItemText} disableTypography={true}/>\r\n                        </ListItem>\r\n                    </List>\r\n                </div>\r\n            </Grow>\r\n        </ClickAwayListener>\r\n        \r\n        \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    userContainer: {\r\n        width: '85%',\r\n        margin: '20px auto',\r\n        padding: '15px 10px',\r\n        borderRadius: '10px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        background: 'rgba(0,0,0,0.7)',\r\n        boxShadow: '0 8px 32px 0 rgb(0 0 0 / 37%)',\r\n        '&:hover' :{\r\n            background: 'black',\r\n            transition: 'background 0.2s ease',\r\n            boxShadow: '0 8px 32px 0 rgb(0 0 0 / 80%)',\r\n        }\r\n    },\r\n    sidemenuContainer: {\r\n        zIndex: 2,\r\n        width: '300px',\r\n        background: theme.palette.primary.main,\r\n        backdropFilter: 'blur(10px)',\r\n        boxShadow: 'rgba(0,0,0,0.25) 0px 0px 6px 3px',\r\n        position: 'absolute',\r\n        top: '80px',\r\n        left: '10px',\r\n        borderRadius: '10px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        [theme.breakpoints.down('sm')]: {\r\n            maxHeight: '70vh',\r\n            overflow: 'scroll'\r\n        }\r\n\r\n    },\r\n    list: {\r\n        width: '90%',\r\n        borderTop: '1px solid rgba(255,255,255,0.3)',\r\n        borderBottom: '1px solid rgba(255,255,255,0.3)',\r\n        margin: '0px auto',\r\n        padding: '20px 0'\r\n    },\r\n    listItem: {\r\n        color: 'theme.palette.primary.main',\r\n        margin: '7px auto',\r\n        borderRadius: '10px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        transition: 'background box-shadow 0.3s ease-in-out',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.6)',\r\n            transition: 'background box-shadow 0.2s ease-in-out',\r\n            boxShadow: '0 8px 32px 0 rgb(0 0 0 / 80%)',\r\n        }\r\n    }, \r\n    listItemIcon: {\r\n        color: 'white'\r\n    },\r\n    listItemText: {     \r\n        fontSize: '14px',\r\n        color: 'white'\r\n        \r\n    },\r\n    bottomList: {\r\n        padding: '10px 0'\r\n    }\r\n\r\n}));","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\AddMenu.js",["437"],"import React from 'react';\r\nimport {\r\n\tmakeStyles,\r\n\tList,\r\n\tListItem,\r\n\tListItemIcon,\r\n\tListItemText,\r\n\tGrow,\r\n\tClickAwayListener,\r\n\tuseMediaQuery,\r\n} from '@material-ui/core';\r\nimport AddLocationOutlinedIcon from '@material-ui/icons/AddLocationOutlined';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport QueueIcon from '@material-ui/icons/Queue';\r\nimport PostAddIcon from '@material-ui/icons/PostAdd';\r\nimport NoteAddOutlinedIcon from '@material-ui/icons/NoteAddOutlined';\r\nimport BlurOnRoundedIcon from '@material-ui/icons/BlurOnRounded';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport const AddMenu = ({ toggleAddMenu, toggleAdd }) => {\r\n\tconst classes = useStyles();\r\n\tconst { t, i18n } = useTranslation();\r\n\tconst matches = useMediaQuery((theme) => theme.breakpoints.up('sm'));\r\n\r\n\tconst closeMenu = () => {\r\n\t\tif (matches) {\r\n\t\t\ttoggleAddMenu();\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<ClickAwayListener onClickAway={closeMenu}>\r\n\t\t\t<Grow in={true}>\r\n\t\t\t\t<div className={classes.addMenuContainer}>\r\n\t\t\t\t\t<List className={classes.list}>\r\n\t\t\t\t\t\t<ListItem\r\n\t\t\t\t\t\t\tbutton={true}\r\n\t\t\t\t\t\t\tclassName={classes.listItem}\r\n\t\t\t\t\t\t\tonClick={toggleAdd('asset')}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<ListItemIcon className={classes.listItemIcon}>\r\n\t\t\t\t\t\t\t\t<AddLocationOutlinedIcon\r\n\t\t\t\t\t\t\t\t\tclassName={classes.icon}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</ListItemIcon>\r\n\t\t\t\t\t\t\t<ListItemText\r\n\t\t\t\t\t\t\t\tprimary={t('createMenu.addAsset')}\r\n\t\t\t\t\t\t\t\tclassName={classes.listItemText}\r\n\t\t\t\t\t\t\t\tdisableTypography={true}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t<ListItem\r\n\t\t\t\t\t\t\tbutton={true}\r\n\t\t\t\t\t\t\tclassName={classes.listItem}\r\n\t\t\t\t\t\t\tonClick={toggleAdd('system')}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<ListItemIcon className={classes.listItemIcon}>\r\n\t\t\t\t\t\t\t\t<BlurOnRoundedIcon className={classes.icon} />\r\n\t\t\t\t\t\t\t</ListItemIcon>\r\n\t\t\t\t\t\t\t<ListItemText\r\n\t\t\t\t\t\t\t\tprimary={t('createMenu.addSystem')}\r\n\t\t\t\t\t\t\t\tclassName={classes.listItemText}\r\n\t\t\t\t\t\t\t\tdisableTypography={true}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t<ListItem button={true} className={classes.listItem}>\r\n\t\t\t\t\t\t\t<ListItemIcon className={classes.listItemIcon}>\r\n\t\t\t\t\t\t\t\t<GroupAddIcon />\r\n\t\t\t\t\t\t\t</ListItemIcon>\r\n\t\t\t\t\t\t\t<ListItemText\r\n\t\t\t\t\t\t\t\tprimary={t('createMenu.createUser')}\r\n\t\t\t\t\t\t\t\tclassName={classes.listItemText}\r\n\t\t\t\t\t\t\t\tdisableTypography={true}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t<ListItem\r\n\t\t\t\t\t\t\tbutton={true}\r\n\t\t\t\t\t\t\tclassName={classes.listItem}\r\n\t\t\t\t\t\t\tonClick={toggleAdd('task')}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<ListItemIcon className={classes.listItemIcon}>\r\n\t\t\t\t\t\t\t\t<PostAddIcon />\r\n\t\t\t\t\t\t\t</ListItemIcon>\r\n\t\t\t\t\t\t\t<ListItemText\r\n\t\t\t\t\t\t\t\tprimary={t('createMenu.createTask')}\r\n\t\t\t\t\t\t\t\tclassName={classes.listItemText}\r\n\t\t\t\t\t\t\t\tdisableTypography={true}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t<ListItem\r\n\t\t\t\t\t\t\tbutton={true}\r\n\t\t\t\t\t\t\tclassName={classes.listItem}\r\n\t\t\t\t\t\t\tonClick={toggleAdd('fault')}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<ListItemIcon className={classes.listItemIcon}>\r\n\t\t\t\t\t\t\t\t<QueueIcon />\r\n\t\t\t\t\t\t\t</ListItemIcon>\r\n\t\t\t\t\t\t\t<ListItemText\r\n\t\t\t\t\t\t\t\tprimary={t('createMenu.createFault')}\r\n\t\t\t\t\t\t\t\tclassName={classes.listItemText}\r\n\t\t\t\t\t\t\t\tdisableTypography={true}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t<ListItem\r\n\t\t\t\t\t\t\tbutton={true}\r\n\t\t\t\t\t\t\tclassName={classes.listItem}\r\n\t\t\t\t\t\t\tonClick={toggleAdd('document')}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<ListItemIcon className={classes.listItemIcon}>\r\n\t\t\t\t\t\t\t\t<NoteAddOutlinedIcon />\r\n\t\t\t\t\t\t\t</ListItemIcon>\r\n\t\t\t\t\t\t\t<ListItemText\r\n\t\t\t\t\t\t\t\tprimary={t('createMenu.addDocument')}\r\n\t\t\t\t\t\t\t\tclassName={classes.listItemText}\r\n\t\t\t\t\t\t\t\tdisableTypography={true}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t</List>\r\n\t\t\t\t</div>\r\n\t\t\t</Grow>\r\n\t\t</ClickAwayListener>\r\n\t);\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\taddMenuContainer: {\r\n\t\tzIndex: 2,\r\n\t\twidth: '240px',\r\n\t\tbackground: theme.palette.primary.main,\r\n\t\tborder: '1px solid rgba(255,255,255,0.2)',\r\n\t\tbackdropFilter: 'blur(10px)',\r\n\t\tboxShadow: 'rgba(0,0,0,0.25) 0px 0px 6px 3px',\r\n\t\tposition: 'absolute',\r\n\t\ttop: '80px',\r\n\t\tright: '2%',\r\n\t\tborderRadius: '10px',\r\n\t\t[theme.breakpoints.down('sm')]: {\r\n\t\t\tmaxHeight: '70vh',\r\n\t\t\toverflow: 'scroll',\r\n\t\t},\r\n\t},\r\n\tlist: {\r\n\t\twidth: '90%',\r\n\t\tmargin: '0px auto',\r\n\t},\r\n\tlistItem: {\r\n\t\tcolor: 'theme.palette.primary.main',\r\n\t\tmargin: '7px auto',\r\n\t\tborderRadius: '10px',\r\n\t\tborder: '1px solid rgba(255,255,255,0.2)',\r\n\t\ttransition: 'background box-shadow 0.3s ease-in-out',\r\n\t\t'&:hover': {\r\n\t\t\tbackground: 'rgba(0,0,0,0.6)',\r\n\t\t\ttransition: 'background box-shadow 0.2s ease-in-out',\r\n\t\t\tboxShadow: '0 8px 32px 0 rgb(0 0 0 / 80%)',\r\n\t\t},\r\n\t},\r\n\tlistItemIcon: {\r\n\t\tcolor: 'white',\r\n\t},\r\n\tlistItemText: {\r\n\t\tfontSize: '14px',\r\n\t\tcolor: 'white',\r\n\t},\r\n\tbottomList: {\r\n\t\tpadding: '10px 0',\r\n\t},\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\Assets.js",["438","439","440"],"import React, { useEffect, useState } from 'react'\r\nimport { Grid, LinearProgress, makeStyles } from '@material-ui/core'\r\nimport { getAssets, removeAsset,getFullAddress, applyFilters } from '../../../api/assetsApi'\r\nimport { Asset } from './Asset'\r\nimport { AssetsControls } from './AssetsControls'\r\nimport { AlertDialog } from '../../reuseables/AlertDialog'\r\nimport { queryParamsToObject } from '../../../api/genericApi';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport const Assets = () => {\r\n\r\n    const location = useLocation();\r\n    const classes = useStyles();\r\n    const { t, i18n } = useTranslation();\r\n    const [ assets, setAssets ] = useState([]);\r\n    const [ isLoading, setIsLoading ] = useState(true);\r\n    const [ alertDialog , setAlertDialog ] = useState(null)\r\n\r\n    useEffect(() => {\r\n        if(!isLoading) return;\r\n        getAssets()\r\n        .then(res => {\r\n            if (res) {\r\n                return applyFilters(queryParamsToObject(location.search), res.data)   \r\n            }\r\n        })\r\n        .then(data => {\r\n            if (data) {\r\n                setAssets(data)\r\n            }\r\n        }) \r\n        .catch(e => {\r\n            console.log(e.message)\r\n        })\r\n        .finally(() => setIsLoading(false))\r\n        \r\n    }, [isLoading])\r\n\r\n    useEffect(()=> {\r\n        setIsLoading(true)\r\n    }, [location.search])\r\n\r\n    const removeAsset = (assetId, data) => {\r\n        setAlertDialog({\r\n            handleConfirm: async () => {\r\n                const res = await removeAsset(assetId);\r\n                if (res) {\r\n                    setAlertDialog(null)\r\n                    setIsLoading(true);\r\n                } else {\r\n                    console.log(res)\r\n                }\r\n            },\r\n            handleCancel: () => setAlertDialog(null),\r\n            text: `${t(\"assetsModule.deleteConfirmation\")} ${getFullAddress(data)}?`,\r\n            title: `${t(\"assetsModule.deleteAsset\")}`\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Grid container >\r\n                <Grid item xs={12}>\r\n                    <div className={classes.pageModule}>\r\n                        {t(\"assetsModule.assets\")}\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} md={12} >\r\n                    <AssetsControls />\r\n                </Grid>\r\n                <Grid container justify='center'>\r\n                    {\r\n                        isLoading ?\r\n                        <LinearProgress /> :\r\n                        assets.map((v,i) => \r\n                            <Asset \r\n                                assetData={v} \r\n                                key={i} \r\n                                order={i}\r\n                                removeAsset={removeAsset}\r\n                                \r\n                            />\r\n                        )    \r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n            {\r\n                Boolean(alertDialog) &&\r\n                <AlertDialog \r\n                    open={Boolean(alertDialog)}\r\n                    alertDialog={alertDialog}\r\n                />\r\n            }\r\n            \r\n        </div>\r\n            \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    pageModule: {\r\n        color: 'white',\r\n        padding: '10px 40px',\r\n        fontSize: '18px',\r\n        background: 'rgba(0,0,0,0.6)',\r\n        margin: '0px auto 5px',\r\n        width: '30%',\r\n        textAlign: 'center',\r\n        borderRadius: '0 0 25px 25px',\r\n        lineHeight: '1'\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\assetsApi.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\Asset.js",["441","442","443","444","445","446"],"import React, { useEffect, useState } from 'react'\r\nimport { makeStyles, Grid, ClickAwayListener, Paper, Typography, Fade, useMediaQuery, IconButton, Tooltip, Backdrop, Modal } from '@material-ui/core'\r\nimport clsx from 'clsx'\r\nimport { UserItem } from '../../user/UserItem'\r\nimport { AssetControls } from './AssetControls'\r\nimport CategoryOutlinedIcon from '@material-ui/icons/CategoryOutlined';\r\nimport VerticalSplitRoundedIcon from '@material-ui/icons/VerticalSplitRounded';\r\nimport HomeRoundedIcon from '@material-ui/icons/HomeRounded';\r\nimport WarningRoundedIcon from '@material-ui/icons/WarningRounded';\r\nimport AssignmentRoundedIcon from '@material-ui/icons/AssignmentRounded';\r\nimport DescriptionRoundedIcon from '@material-ui/icons/DescriptionRounded';\r\nimport { updateAsset } from '../../../api/assetsApi'\r\nimport PeopleOutlineRoundedIcon from '@material-ui/icons/PeopleOutlineRounded';\r\nimport BlurOnRoundedIcon from '@material-ui/icons/BlurOnRounded';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useHistory } from 'react-router'\r\nimport { UpdateOwner } from '../../reuseables/UpdateOwner'\r\nimport { UpsertAsset } from './UpsertAsset'\r\n\r\n\r\nexport const Asset = ({assetData, order, removeAsset }) => {\r\n\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const { t, i18n } = useTranslation();\r\n    const [ controlsVisible, setControlsVisible ] = useState(false);\r\n    const [ editMode, setEditMode ] = useState(false);\r\n    const matches = useMediaQuery(theme => theme.breakpoints.up('sm'));\r\n    const [ data, setData ] = useState(assetData);\r\n    \r\n    \r\n    const toggleEditMode = type => event => {\r\n        if (editMode === type) {\r\n            setEditMode(false)\r\n        } else {\r\n            setEditMode(type)\r\n        }\r\n    }\r\n\r\n    const handleUpdate = async (details) => {\r\n        const res = await updateAsset(details);\r\n        if (res) {\r\n            setEditMode(false);\r\n            setData(res.data);\r\n        }\r\n        \r\n    }\r\n\r\n    const handleReferralClick = type => event => {\r\n        history.push(`${type}/?asset=${data._id}`)\r\n    }\r\n\r\n\r\n    return (\r\n        <Fade in={true}>\r\n            <Grid item xs={12} sm={7} md={6} lg={4} xl={4} >\r\n                <ClickAwayListener onClickAway={() => editMode ? setEditMode(false) : null }>\r\n                    <Paper \r\n                        className={classes.assetContainer} \r\n                        elevation={9}\r\n                        onMouseEnter={() => setControlsVisible(true)}\r\n                        onMouseLeave={() => setControlsVisible(false)}\r\n                    >\r\n                        <div className={classes.topMain} >\r\n                            <div className={classes.address}>\r\n                                <Typography className={classes.addMain}>\r\n                                    {`${data.address.street} ${data.address.streetNumber}${data.address.entrance || ''}`}\r\n                                </Typography>\r\n                                <Typography className={classes.addSec}>\r\n                                    {`${data.address.city}`}\r\n                                </Typography>\r\n                                <Typography className={classes.addZip}> \r\n                                    {`${data.address.zipcode}, ${data.address.country}`}\r\n                                </Typography>\r\n                            </div>\r\n                            <div className={classes.owner}>\r\n                                <UserItem user={data.owner} showPhone showName avatarSize={'40px'} size={12}/>\r\n                            </div>\r\n                            {\r\n                                (controlsVisible || !matches) &&\r\n                                <AssetControls \r\n                                    removeAsset={() => removeAsset(data._id, data)} \r\n                                    toggleEditMode={toggleEditMode}/>\r\n                            }\r\n                        </div>\r\n                        <div \r\n                            className={classes.bottomMain}\r\n                        >\r\n                            <div className={classes.extraDetails}>\r\n                                <div className={classes.type}>\r\n                                    <CategoryOutlinedIcon className={classes.typeIcon}/>\r\n                                    <div className={classes.typeDetails}>\r\n                                        <div className={classes.typeData}>\r\n                                            {t(`assetsModule.${data.type}`)}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                {\r\n                                    data.addInfo.floors ? \r\n                                    <div className={clsx(classes.type, classes.floor)}>\r\n                                        <VerticalSplitRoundedIcon className={classes.typeIcon}/>\r\n                                        <div className={classes.typeDetails}>\r\n                                            <div className={classes.typeData}>\r\n                                                {`${data.addInfo.floors} ${t(\"assetsModule.floors\")}`}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    : null\r\n                                }\r\n                                {\r\n                                    data.addInfo.floor ?\r\n                                    <div className={clsx(classes.type, classes.floor)} >\r\n                                        <VerticalSplitRoundedIcon className={classes.typeIcon}/>\r\n                                        <div className={classes.typeDetails}>\r\n                                            <div className={classes.typeData}>\r\n                                            {`${t(\"assetsModule.floor\")} ${data.addInfo.floor}`}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    : null\r\n                                }\r\n                                {\r\n                                    data.addInfo.unit ?\r\n                                    <div className={clsx(classes.type, classes.unit)}>\r\n                                        <HomeRoundedIcon className={classes.typeIcon}/>\r\n                                        <div className={classes.typeDetails}>\r\n                                            <div className={classes.typeData}>\r\n                                            {`${t(\"assetsModule.unit\")} ${data.addInfo.unit}`}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    : null\r\n                                }\r\n                                {\r\n                                    data.addInfo.units ?\r\n                                    <div className={clsx(classes.type, classes.units)}>\r\n                                        <HomeRoundedIcon className={classes.typeIcon}/>\r\n                                        <div className={classes.typeDetails}>\r\n                                            <div className={classes.typeData}>\r\n                                            {`${data.addInfo.units} ${t(\"assetsModule.units\")}`}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    : null\r\n                                }\r\n                                \r\n                            </div>\r\n                            <div className={clsx(classes.buttonsContainer, Boolean(editMode) && classes.buttonsContainerRound)} >\r\n                                <Tooltip title={t(\"assetsModule.systems\")}>\r\n                                    <IconButton \r\n                                        className={classes.button}\r\n                                        onClick={handleReferralClick('systems')}\r\n                                    >\r\n                                        <BlurOnRoundedIcon className={classes.typeIcon}/>\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title={t(\"assetsModule.tasks\")}>\r\n                                    <IconButton className={classes.button}>\r\n                                        <AssignmentRoundedIcon className={classes.typeIcon}/>\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title={t(\"assetsModule.faults\")}>\r\n                                    <IconButton className={classes.button}>\r\n                                        <WarningRoundedIcon className={classes.typeIcon}/>\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title={t(\"assetsModule.documents\")}>\r\n                                    <IconButton className={classes.button}>\r\n                                        <DescriptionRoundedIcon className={classes.typeIcon}/>\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Tooltip title={t(\"assetsModule.users\")}>\r\n                                    <IconButton className={classes.button}>\r\n                                        <PeopleOutlineRoundedIcon className={classes.typeIcon}/>\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                                \r\n                            </div>\r\n                        </div>\r\n                        {   \r\n                            editMode === \"address\" &&\r\n                            <UpsertAsset \r\n                                assetId={data._id} \r\n                                handleUpdate={handleUpdate}\r\n                                handleClose={() => setEditMode(false)}\r\n                            />   \r\n                        }\r\n                    </Paper>\r\n                </ClickAwayListener>\r\n            </Grid>\r\n        </Fade>\r\n        \r\n        \r\n    )\r\n\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({  \r\n   \r\n    assetContainer: {\r\n        margin: '10px',\r\n        background: 'white',\r\n        borderRadius: '10px',\r\n        height: 'auto',\r\n        color: 'white',\r\n        background: 'rgba(0,0,0,0.3)',\r\n        border: '1px solid rgba(255,255,255,0.2)', \r\n        [theme.breakpoints.down('sm')] : {\r\n            margin: '10px 0',\r\n            borderRadius: '0',\r\n            border: '0', \r\n        } \r\n    },\r\n    topMain: {\r\n        height: '120px',\r\n        borderRadius: '25px',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        position: 'relative',\r\n        [theme.breakpoints.down('sm')] : {\r\n            borderRadius: '0',\r\n        } \r\n    },\r\n    address: {\r\n        padding: `${theme.spacing(3)}px 0 0 ${theme.spacing(3)}px`,\r\n         \r\n        maxWidth: '45%'\r\n    },\r\n    addMain: {\r\n        fontSize: '20px',\r\n        lineHeight: 1\r\n    },\r\n    addSec: {\r\n        fontSize: '14px'\r\n    },\r\n    addZip: {\r\n        fontSize: '14px'\r\n    },\r\n    bottomMain: {\r\n        height: 'auto',\r\n        borderRadius: '25px',\r\n        position: 'relative',\r\n        background: 'transparent',\r\n        display: 'grid',\r\n        placeItems: 'center'\r\n    },\r\n    owner: {\r\n        width: '160px',\r\n        height: '50px',\r\n        padding: '3px 5px 3px',\r\n        borderRadius: '0px 10px 0px 5px',\r\n        boxShadow: '-2px 2px 2px 0 rgb(0 0 0 / 37%)',\r\n        '&:hover' :{\r\n            background: 'black',\r\n            transition: 'background 0.2s ease',\r\n            boxShadow: '0 8px 32px 0 rgb(0 0 0 / 80%)',\r\n        },\r\n         \r\n    },\r\n    extraDetails: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        height: '30px',\r\n        borderRadius: '25px',\r\n        background: theme.palette.primary.main,\r\n        width: 'fit-content',\r\n        boxShadow: 'rgba(0,0,0,0.4) 0px 0px 5px 2px'\r\n    },\r\n    type: {\r\n        position: 'relative',\r\n        display: 'flex',\r\n        padding: '5px 10px',\r\n        width: 'fit-content',\r\n        background: 'transparent',\r\n        color: 'white',\r\n        alignItems: 'center'\r\n    },\r\n    typeIcon: {\r\n        fontSize: '20px',\r\n        color: 'white'\r\n    },\r\n    typeData: {\r\n        padding: '0 10px 0 10px',\r\n        lineHeight: 1\r\n    },\r\n    buttonsContainer: {\r\n        width: 'fit-content',\r\n        margin: '10px auto 0',\r\n        height: 'auto',\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-between',\r\n        borderRadius: '10px 10px 0 0',\r\n        transition: 'border-radius 0.5s ease',\r\n        background: theme.palette.primary.main,\r\n        boxShadow: 'rgba(0,0,0,0.4) 0px 0px 5px 2px'  \r\n    },\r\n    buttonsContainerRound: {\r\n        borderRadius: '25px',\r\n        transition: 'border-radius 0.5s ease'\r\n    },\r\n    button: {\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.5)',\r\n        }\r\n    },\r\n    \r\n    \r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\user\\UserItem.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\AssetsControls.js",["447","448","449"],"import React, { useState } from 'react'\r\nimport { Grid, makeStyles,  useMediaQuery, Collapse, Button } from '@material-ui/core'\r\nimport { SortBy } from '../../reuseables/SortBy'\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\nimport { SearchBox } from '../../reuseables/SearchBox';\r\nimport { FilterBySelect } from '../../reuseables/FilterBySelect';\r\nimport PersonRoundedIcon from '@material-ui/icons/PersonRounded';\r\nimport { getUserList } from '../../../api/userApi';\r\nimport { FilterByMultiSelect } from '../../reuseables/FilterByMultiSelect';\r\nimport { useTranslation } from 'react-i18next';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport ExpandMoreRoundedIcon from '@material-ui/icons/ExpandMoreRounded';\r\nimport { ClearRounded } from '@material-ui/icons';\r\n\r\n\r\nconst sortOptions = [\r\n    {\r\n        text: 'כתובת',\r\n        field: 'street'\r\n    },\r\n    {\r\n        text: 'עיר',\r\n        field: 'city'\r\n    },\r\n    {\r\n        text: 'מנהל בניין',\r\n        field: 'owner'\r\n    },\r\n    {\r\n        text: 'כמות משימות פתוחות',\r\n        field: 'openTasksCount'\r\n    },\r\n    {\r\n        text: 'כמות תקלות פתוחות',\r\n        field: 'openFaultsCount'\r\n    },\r\n    \r\n]\r\n\r\nexport const AssetsControls = ({ components }) => {\r\n    \r\n    const classes = useStyles();\r\n    const { t, i18n } = useTranslation();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const [ collapsed, setCollapsed ] = useState(!downSm ? true : false);\r\n    \r\n\r\n    const createUserOptions = () => {\r\n        return getUserList()\r\n        .then(data => {\r\n            let userList = [];\r\n            data.forEach(user => {\r\n                userList.push({label: `${user.firstName} ${user.lastName}`, value: user._id })\r\n            });\r\n            return userList;\r\n        })\r\n    }\r\n\r\n    const toggleCollapse = () => {\r\n        if (collapsed) {\r\n            setCollapsed(false);\r\n            return;\r\n        }\r\n        setCollapsed(true)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                downSm &&\r\n                <Grid container justify='center'>\r\n                    <Grid item xs={11} className={classes.gridItem}>\r\n                        <Button\r\n                        className={classes.sortandfilter}\r\n                        startIcon={<FilterListIcon className={classes.icon} />}\r\n                        endIcon={collapsed ? <ClearRounded /> : <ExpandMoreRoundedIcon />}\r\n                        onClick={toggleCollapse}\r\n                    >\r\n                        {t(`faultsModule.${ collapsed ? 'hide' : 'show'}Filters`)}\r\n                    </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                    \r\n            }\r\n            <Collapse in={collapsed}>\r\n                <Grid container justify='center' >\r\n                    <Grid item xs={11} sm={9} md={7} lg={5} xl={4} className={classes.gridItem}>\r\n                        <SearchBox \r\n                            placeholder={t(\"assetsModule.filterByCityOrAddress\")}\r\n                            filterField={'searchText'}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={11} className={classes.gridItem}>         \r\n                        <FilterBySelect \r\n                            optionsFunc={createUserOptions}\r\n                            placeholder={t(\"assetsModule.filterByAssetOwner\")}\r\n                            filterIcon={<PersonRoundedIcon className={classes.icon }/>}\r\n                            filterField={'owner'}\r\n                        \r\n                        />\r\n                    \r\n                        <SortBy \r\n                            menuOptions={sortOptions}\r\n                        />   \r\n                    </Grid>  \r\n                </Grid>\r\n            </Collapse>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(them => ({\r\n    gridItem: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap'\r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        marginLeft: '4px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    sortandfilter: {\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        background: 'rgba(0,0,0,0.7)',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '5px 25px 5px 3px',\r\n        whiteSpace: 'nowrap',\r\n        '&:hover': {\r\n            background: 'black'\r\n        }\r\n    }\r\n}))\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\AssetControls.js",["450"],"import { Fade, IconButton, makeStyles, Tooltip } from '@material-ui/core';\r\nimport DeleteOutlineRoundedIcon from '@material-ui/icons/DeleteOutlineRounded';\r\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\r\nimport React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport const AssetControls = ({ removeAsset, toggleEditMode }) => {\r\n\tconst classes = useStyles();\r\n\tconst { t, i18n } = useTranslation();\r\n\r\n\treturn (\r\n\t\t<Fade in={true} timeout={500}>\r\n\t\t\t<div className={classes.container}>\r\n\t\t\t\t<Tooltip title={t('assetsModule.editAddress')}>\r\n\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\tclassName={classes.iconbutton}\r\n\t\t\t\t\t\tonClick={toggleEditMode('address')}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<EditRoundedIcon className={classes.icon} />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t</Tooltip>\r\n\t\t\t\t<Tooltip title={t('assetsModule.deleteAsset')}>\r\n\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\tclassName={classes.iconbutton}\r\n\t\t\t\t\t\tonClick={removeAsset}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<DeleteOutlineRoundedIcon className={classes.icon} />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t</Tooltip>\r\n\t\t\t</div>\r\n\t\t</Fade>\r\n\t);\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tcontainer: {\r\n\t\tdisplay: 'flex',\r\n\t\tposition: 'absolute',\r\n\t\tright: 0,\r\n\t\ttop: '55%',\r\n\t},\r\n\ticonbutton: {\r\n\t\tmargin: '7px 5px',\r\n\t\tboxShadow: 'rgba(0,0,0,0.2) 0px 0px 3px 3px ',\r\n\t\tbackground: theme.palette.primary.main,\r\n\t\tcolor: 'white',\r\n\t\tpadding: '8px',\r\n\t},\r\n\ticon: {\r\n\t\tfontSize: '20px',\r\n\t},\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\SortBy.js",["451","452"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport { makeStyles, ButtonGroup, Button, Menu, MenuItem } from '@material-ui/core'\r\nimport SortRoundedIcon from '@material-ui/icons/SortRounded';\r\nimport ArrowDropUpOutlinedIcon from '@material-ui/icons/ArrowDropUpOutlined';\r\nimport ArrowDropDownOutlinedIcon from '@material-ui/icons/ArrowDropDownOutlined';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { addQueryParam } from '../../api/genericApi';\r\nimport { useQuery } from './customHooks/useQuery';\r\nimport { useTranslation } from 'react-i18next'\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\n\r\n\r\nexport const SortBy = ({menuOptions, handleSortChange}) => {\r\n    \r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const { t, i18n } = useTranslation();\r\n    const { lang } = useContext(LanguageContext);\r\n    const [ values, setValues ] = useState({\r\n        sortBy: query.sortBy || '',\r\n        sortOrder: query.sortOrder || 'asc' \r\n    })\r\n    const [ anchorEl, setAnchorEl ] = useState(null);\r\n \r\n    useEffect(() => {\r\n        if (!values.sortBy) return;\r\n        history.push({\r\n            path: location.pathname,\r\n            search: addQueryParam(location.search, [{ name: 'sortBy', value: values.sortBy}, {name: 'sortOrder', value: values.sortOrder}])\r\n        })\r\n    }, [values])\r\n\r\n    const handleClick = menuOption => event => {\r\n        setValues({\r\n            ...values, \r\n            sortBy: menuOption\r\n        })\r\n        setAnchorEl(null);\r\n    }\r\n\r\n    const handleChange = () => {\r\n        if (values.sortBy) {\r\n            setValues({\r\n                ...values, \r\n                sortOrder: values.sortOrder === 'asc' ? 'desc' : 'asc'\r\n            })\r\n        }\r\n    }\r\n    \r\n    const getOptionText = (option) => {\r\n        const result = menuOptions.find( mo => option === mo.field);\r\n        if (result) {\r\n            return result.text\r\n        }\r\n        return t(\"sort.sortBy\")\r\n    }\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <ButtonGroup \r\n                className={classes.sort}\r\n            >\r\n\r\n                <Button \r\n                    className={classes.sortBy}\r\n                    onClick={event => setAnchorEl(event.currentTarget)}\r\n                    startIcon={<SortRoundedIcon className={classes.icon}/>}\r\n                >\r\n                    {values.sortBy ? getOptionText(values.sortBy) : `${t(\"sort.sortBy\")}`}\r\n                </Button>\r\n                <Menu\r\n                    anchorEl={anchorEl}\r\n                    open={Boolean(anchorEl)}\r\n                    onClose={() => setAnchorEl(null)}\r\n                    classes={{\r\n                        paper : classes.menu\r\n                    }}\r\n                    keepMounted\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'right',\r\n                    }}\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'right',\r\n                    }}\r\n                >\r\n                    {\r\n                        menuOptions.map((v,i) => {\r\n                            return (\r\n                                <MenuItem\r\n                                    key={i}\r\n                                    onClick={handleClick(v.field)}\r\n                                    style={{ direction: lang.code === 'he' ? 'rtl' : 'ltr'}}\r\n                                >\r\n                                    {v.text}\r\n                                </MenuItem>\r\n                            )\r\n                            \r\n                        })\r\n                    }\r\n                </Menu>\r\n                <Button\r\n                    endIcon={ values.sortOrder === 'asc' ? <ArrowDropUpOutlinedIcon /> : <ArrowDropDownOutlinedIcon />}\r\n                    onClick={handleChange}\r\n                    className={classes.sortOrder}\r\n                >\r\n                    { `${ values.sortOrder === 'asc' ? `${t(\"sort.asc\")}` : `${t(\"sort.desc\")}`}`}\r\n                </Button> \r\n            </ButtonGroup>\r\n            \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    sort: {\r\n        margin: '5px',\r\n        height: '45px',\r\n        \r\n    },\r\n    sortBy: {\r\n        borderRadius: '25px 0 0 25px',\r\n        padding: '0 15px 0 3px',\r\n        color: 'white',\r\n        width: 'auto',\r\n        whiteSpace: 'nowrap',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    sortOrder: {\r\n        borderRadius: '0px 25px 25px 0px',\r\n        padding: 0,\r\n        color: 'white',\r\n       width: '100px',\r\n       border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    menu: {\r\n        marginTop: '55px',\r\n        background: 'rgba(0,0,0,0.5)',\r\n        backdropFilter: 'blur(10px)',\r\n        color: 'white'\r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        margin: '0 6px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        \r\n    }\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\FiltersContext.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\AuthContext.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\genericApi.js",["453"],"import axios from 'axios';\r\nimport { addMonths, addWeeks, addYears } from 'date-fns';\r\nimport { addDays, format } from 'date-fns/esm';\r\nimport i18next from 'i18next';\r\n\r\nexport const queryParamsToObject = (search) => {\r\n\tif (!search) return {};\r\n\tsearch = search.substring(1);\r\n\r\n\tlet decoded = JSON.parse(\r\n\t\t'{\"' +\r\n\t\t\tdecodeURI(search)\r\n\t\t\t\t.replace(/\"/g, '\\\\\"')\r\n\t\t\t\t.replace(/&/g, '\",\"')\r\n\t\t\t\t.replace(/=/g, '\":\"')\r\n\t\t\t\t.replace(/%2C/g, ',')\r\n\t\t\t\t.replace(/%5D/g, ',')\r\n\t\t\t\t.replace(/%5B/g, ',') +\r\n\t\t\t'\"}'\r\n\t);\r\n\tObject.entries(decoded).forEach((entry) => {\r\n\t\tif (entry[1].substring(0, 1) === '[') {\r\n\t\t\tdecoded[entry[0]] = JSON.parse(entry[1]);\r\n\t\t}\r\n\t});\r\n\treturn decoded;\r\n};\r\n\r\nexport const removeQueryParam = (search, paramName) => {\r\n\tlet params = new URLSearchParams(search);\r\n\tparams.delete(paramName);\r\n\treturn params.toString() ? '?' + params.toString() : '';\r\n};\r\n\r\nexport const addQueryParam = (search, paramList) => {\r\n\tlet params = new URLSearchParams(search);\r\n\tif (!paramList.length) return '?' + params.toString();\r\n\tparamList.forEach((param) => {\r\n\t\tif (param.value instanceof Array) {\r\n\t\t\tparam.value = JSON.stringify(param.value);\r\n\t\t}\r\n\t\tif (params.get(param.name)) {\r\n\t\t\tparams.set(param.name, param.value);\r\n\t\t} else {\r\n\t\t\tparams.append(param.name, param.value);\r\n\t\t}\r\n\t});\r\n\treturn '?' + params.toString();\r\n};\r\n\r\nexport const updateQueryParams = (search, add, remove) => {\r\n\tlet params = new URLSearchParams(search);\r\n\tif (remove) {\r\n\t\tremove.forEach((pName) => {\r\n\t\t\tparams.delete(pName);\r\n\t\t});\r\n\t}\r\n\tif (add) {\r\n\t\tadd.forEach((param) => {\r\n\t\t\tif (param.value instanceof Array) {\r\n\t\t\t\tparam.value = JSON.stringify(param.value);\r\n\t\t\t}\r\n\t\t\tif (params.get(param.name)) {\r\n\t\t\t\tparams.set(param.name, param.value);\r\n\t\t\t} else {\r\n\t\t\t\tparams.append(param.name, param.value);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\treturn '?' + params.toString();\r\n};\r\n\r\nexport const specialStringPurge = (string) => {\r\n\tif (!string) return null;\r\n\treturn string\r\n\t\t.replaceAll('+', ' ')\r\n\t\t.replaceAll(/[&\\/\\\\#,+()$~%.'\":*?<>{}]/g, '')\r\n\t\t.replaceAll(' ,', '')\r\n\t\t.replaceAll(',', ' ');\r\n};\r\n\r\nexport const getLabelsByLanguage = async (lang) => {\r\n\tconst res = await axios.post(\r\n\t\t`${process.env.REACT_APP_BACKEND_URL}/users/getLabels`,\r\n\t\t{ lang }\r\n\t);\r\n\tif (res) {\r\n\t\tconsole.log(res.data);\r\n\t\treturn res.data;\r\n\t}\r\n};\r\n\r\nexport const getFullName = (user) => {\r\n\treturn `${user.firstName} ${user.lastName}`;\r\n};\r\n\r\nexport const getDatediffString = (fromDate) => {\r\n\tlet diffInSecs = Math.round((new Date() - new Date(fromDate)) / 1000);\r\n\tlet diff;\r\n\tif (diffInSecs < 60) {\r\n\t\tdiff = diffInSecs.toString();\r\n\t\treturn diff + ' ' + i18next.t('dates.shortsecond');\r\n\t}\r\n\tif (diffInSecs > 60 && diffInSecs < 3600) {\r\n\t\tdiff = Math.round(diffInSecs / 60).toString();\r\n\t\treturn diff + ' ' + i18next.t('dates.shortminute');\r\n\t}\r\n\tif (diffInSecs > 3600 && diffInSecs < 86400) {\r\n\t\tdiff = Math.round(diffInSecs / 3600).toString();\r\n\t\treturn diff + ' ' + i18next.t('dates.shorthour');\r\n\t}\r\n\tif (diffInSecs > 86400 && diffInSecs < 604800) {\r\n\t\tdiff = Math.round(diffInSecs / 86400).toString();\r\n\t\treturn diff + ' ' + i18next.t('dates.shortday');\r\n\t}\r\n\tif (diffInSecs > 604800 && diffInSecs < 2629743) {\r\n\t\tdiff = Math.round(diffInSecs / 604800).toString();\r\n\t\treturn diff + ' ' + i18next.t('dates.shortweek');\r\n\t}\r\n\tif (diffInSecs > 2629743 && diffInSecs < 31556926) {\r\n\t\tdiff = Math.round(diffInSecs / 2629743).toString();\r\n\t\treturn diff + ' ' + i18next.t('dates.shortmonth');\r\n\t}\r\n\tif (diffInSecs < 31556926) {\r\n\t\tdiff = Math.round(diffInSecs / 31556926).toString();\r\n\t\treturn diff + ' ' + i18next.t('dates.shortyear');\r\n\t}\r\n};\r\n\r\nexport const getStatusList = async (module) => {\r\n\ttry {\r\n\t\tconst res = await axios.post(\r\n\t\t\t`${process.env.REACT_APP_BACKEND_URL}/statuses/getStatusList`,\r\n\t\t\t{ module }\r\n\t\t);\r\n\t\tif (res) {\r\n\t\t\treturn res.data;\r\n\t\t}\r\n\t\treturn [];\r\n\t} catch (e) {\r\n\t\tconsole.log(e.message);\r\n\t\treturn null;\r\n\t}\r\n};\r\n\r\nexport const updateArrayStateField = (arr, itemId, fieldName, fieldValue) => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tarr.forEach((t, i) => {\r\n\t\t\tif (t._id === itemId || i === itemId) {\r\n\t\t\t\tt[fieldName] = fieldValue;\r\n\t\t\t}\r\n\t\t});\r\n\t\tresolve(arr);\r\n\t});\r\n};\r\n\r\nexport const updateStateField = (currState, fieldName, fieldValue) => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tcurrState[fieldName] = fieldValue;\r\n\t\tresolve(currState);\r\n\t});\r\n};\r\n\r\nexport const getNextIterationDate = (\r\n\tstartDate,\r\n\tinterval,\r\n    intervalNumber,\r\n\tdateFormat\r\n) => {\r\n\tlet next = null;\r\n\tif (interval === 'year') {\r\n\t\tnext = addYears(new Date(startDate), intervalNumber);\r\n\t} else if (interval === 'month') {\r\n\t\tnext = addMonths(new Date(startDate), intervalNumber);\r\n\t} else if (interval === 'week') {\r\n\t\tnext = addWeeks(new Date(startDate), intervalNumber);\r\n\t} else if (interval === 'day') {\r\n\t\tnext = addDays(new Date(startDate), intervalNumber);\r\n\t}\r\n\treturn format(next, dateFormat);\r\n};\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\customHooks\\useQuery.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\SearchBox.js",["454","455","456"],"import React, { useState, useEffect } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { addQueryParam, removeQueryParam, queryParamsToObject, specialStringPurge} from '../../api/genericApi';\r\nimport { OutlinedInput, FormControl, makeStyles, Grid, ClickAwayListener } from '@material-ui/core'\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\nimport { useQuery } from './customHooks/useQuery';\r\nimport clsx from 'clsx';\r\n\r\nexport const SearchBox = ({ placeholder, filterField }) => {\r\n    \r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const [ onFocus, setOnFocus ] = useState(false);\r\n    const [ searchText, setSearchText ] = useState(specialStringPurge(query[filterField]) || '');\r\n    \r\n    useEffect(() => {\r\n        if (Boolean(searchText) && searchText === specialStringPurge(query[filterField])) return;\r\n        const timeOutId = setTimeout(() => handleSearch(searchText), 700);\r\n        return () => clearTimeout(timeOutId);\r\n    }, [searchText])\r\n\r\n    const handleChange = event => {\r\n        setSearchText(event.target.value)\r\n    }\r\n\r\n    const handleSearch = searchText => {\r\n        if (searchText) {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: addQueryParam(location.search, [{ name: filterField, value: searchText}])\r\n            });\r\n            return; \r\n        }\r\n        history.push({\r\n            path: location.pathname,\r\n            search: removeQueryParam(location.search, filterField)\r\n        });\r\n        \r\n    }\r\n\r\n    return (\r\n        <ClickAwayListener onClickAway={() => setOnFocus(false)}>\r\n            <div className={clsx(classes.container , onFocus && classes.focused)} xs={11} sm={9} md={8} lg={6}>\r\n                    <SearchRoundedIcon className={classes.icon}/>\r\n                    <FormControl variant='outlined' className={classes.form}>\r\n                        <OutlinedInput\r\n                            value={ searchText || '' }\r\n                            onChange={handleChange}\r\n                            placeholder={placeholder}\r\n                            className={clsx(classes.searchInput)}\r\n                            onFocus={() => setOnFocus(true)}\r\n                        />\r\n                    </FormControl>\r\n            </div>\r\n        </ClickAwayListener>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        margin: '5px',\r\n        height: '45px',\r\n        maxWidth: '450px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '25px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        transition: 'box-shadow 0.2s ease-in',\r\n        '&:hover': {\r\n            boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n            transition: 'box-shadow 0.2s ease-in'\r\n        }\r\n\r\n    },\r\n    focused: {\r\n        boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n        background: 'rgba(0,0,0,0.1)',\r\n        backdropFilter: 'blur(40px)'\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        \r\n    },\r\n    searchInput: {\r\n        height: '34px',\r\n        width: '98.5%',\r\n        margin: '3px 0.75%',\r\n        borderRadius: '5px 25px 25px 5px',\r\n        color: 'white',\r\n        '& input': {\r\n            padding: '12.5px 14px',\r\n        },\r\n        '& fieldset': {\r\n            border: '0'\r\n        } \r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        margin: '0 5px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        \r\n    }\r\n}))\r\n\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\FilterBySelect.js",["457","458"],"import { Button, IconButton, makeStyles, Menu, MenuItem } from '@material-ui/core';\r\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { addQueryParam, removeQueryParam } from '../../api/genericApi';\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\nimport { useQuery } from './customHooks/useQuery';\r\n\r\nexport const FilterBySelect = ({ filterField, placeholder, filterIcon, optionsFunc }) => {\r\n    \r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const { lang } = useContext(LanguageContext);\r\n    const [ menuOptions, setMenuOptions] = useState([]);\r\n    const [ anchorEl, setAnchorEl ] = useState(null);\r\n    const [ value, setValue ] = useState(query[filterField] || '')\r\n\r\n    useEffect(() => {\r\n        optionsFunc()\r\n        .then(data => {\r\n            setMenuOptions(data)\r\n        }) \r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (value) {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: addQueryParam(location.search, [{ name: filterField, value }])\r\n            });\r\n            return;\r\n        }\r\n        if(query[filterField]) {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: removeQueryParam(location.search, filterField)\r\n            });\r\n        }     \r\n    }, [value])\r\n\r\n    const createTag = val => {\r\n        let data = menuOptions.find(op => val === op.value);\r\n        if (!data) return;\r\n        return (\r\n            <div className={classes.tag}>\r\n                <label className={classes.tagLabel}>\r\n                    { data.label }\r\n                </label>\r\n                <IconButton \r\n                    className={classes.removeBtn}\r\n                    onClick={removeChoice(data.value)}\r\n                >\r\n                    <CloseRoundedIcon className={classes.tagRemove}/>\r\n                </IconButton>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const removeChoice = value => event => {\r\n        event.stopPropagation();\r\n        setValue('')\r\n    }\r\n\r\n    const handleClick = val => event => {\r\n        setValue(val);\r\n        setAnchorEl(null)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                Boolean(menuOptions.length) &&\r\n                    <div item className={classes.select}>\r\n                        <Button \r\n                            className={classes.filterBy}\r\n                            onClick={event => setAnchorEl(event.currentTarget)}\r\n                            startIcon={filterIcon}\r\n                        >\r\n                            { value ? createTag(value) : <label style={{ padding: '0 15px', cursor: 'pointer' }}>{placeholder}</label>}\r\n                        </Button>\r\n                        <Menu\r\n                            anchorEl={anchorEl}\r\n                            open={Boolean(anchorEl)}\r\n                            onClose={() => setAnchorEl(null)}\r\n                            classes={{\r\n                                paper : classes.menu\r\n                            }}\r\n                            keepMounted\r\n                            anchorOrigin={{\r\n                                vertical: 'bottom',\r\n                                horizontal: 'right',\r\n                            }}\r\n                            transformOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'right',\r\n                            }}\r\n                        >\r\n                            {\r\n                                menuOptions.map((v,i) => {\r\n                                    return (\r\n                                        <MenuItem\r\n                                            key={i}\r\n                                            onClick={handleClick(v.value)}\r\n                                            className={classes.menuitem}\r\n                                            style={{ direction: lang.code === 'he' ? 'rtl' : 'ltr'}}\r\n                                        >\r\n                                            {v.label}\r\n                                        </MenuItem>\r\n                                    )\r\n                                    \r\n                                })\r\n                            }\r\n                        </Menu>\r\n                    </div>\r\n            }          \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    select: {\r\n        margin: '5px',\r\n        height: '45px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    filterBy: {\r\n        textTransform: 'none',\r\n        color: 'white',\r\n        padding: '0 4px',\r\n        height: '45px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '25px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        whiteSpace: 'nowrap',\r\n        '&:hover': {\r\n            boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n            \r\n        }\r\n    },\r\n    menu: {\r\n        marginTop: '55px',\r\n        background: 'rgba(0,0,0,0.5)',\r\n        backdropFilter: 'blur(10px)',\r\n        color: 'white'\r\n    },\r\n    menuitem: {\r\n        minWidth: '200px'\r\n    },\r\n    container: {\r\n        height: '45px',\r\n        border: '1px solid rgba(0,0,0,0.25)',\r\n        borderRadius: '25px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        '&:hover': {\r\n            boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n            \r\n        }\r\n    },\r\n    focused: {\r\n        border: `2px solid ${theme.palette.primary.main}`\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        \r\n    },\r\n    searchInput: {\r\n        height: '34px',\r\n        width: '98.5%',\r\n        margin: '3px 0.75%',\r\n        borderRadius: '5px 25px 25px 5px',\r\n        color: 'white',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        '& fieldset': {\r\n            border: '0'\r\n        } \r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        margin: '0 5px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    tag: {\r\n        padding: '5px 10px',\r\n        borderRadius: '50px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    tagLabel: {\r\n        padding: '0 5px'\r\n    },\r\n    removeBtn: {\r\n        padding: '4px',\r\n        color: 'white'\r\n    },\r\n    tagRemove: {\r\n        fontSize: '16px'\r\n    }\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\FilterByMultiSelect.js",["459","460"],"import { Button, IconButton, makeStyles, Menu, MenuItem } from '@material-ui/core';\r\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { addQueryParam, removeQueryParam } from '../../api/genericApi';\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\nimport { useQuery } from './customHooks/useQuery';\r\n\r\nexport const FilterByMultiSelect = ({ filterField, placeholder, filterIcon, optionsFunc }) => {\r\n    \r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const { lang } = useContext(LanguageContext);\r\n    const [ menuOptions, setMenuOptions] = useState([]);\r\n    const [ orgMenuOptions, setOrgMenuOptions ] = useState([])\r\n    const [ anchorEl, setAnchorEl ] = useState(null);\r\n    const [ values, setValues ] = useState( query[filterField] || [])\r\n\r\n    useEffect(() => {\r\n        optionsFunc()\r\n        .then(data => {\r\n            setOrgMenuOptions(data);\r\n            if (query[filterField]) {\r\n                data = data.filter(op => query[filterField].indexOf(op.value) === -1 )\r\n            }\r\n            setMenuOptions(data);\r\n            \r\n        }) \r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (values.length) {\r\n            \r\n            history.push({\r\n                path: location.pathname,\r\n                search: addQueryParam(location.search, [{ name: filterField, value: values }])\r\n            });\r\n            return;\r\n        }\r\n        if (query[filterField] && !values.length) {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: removeQueryParam(location.search, filterField)\r\n            });\r\n        }\r\n        \r\n    }, [values])\r\n\r\n    useEffect(() => {\r\n        if(!menuOptions.length) {\r\n            setAnchorEl(null)\r\n        }\r\n    }, [menuOptions])\r\n\r\n    const createTag = (val, key) => {\r\n        let data = orgMenuOptions.find(op => val === op.value);\r\n        if (!data) return;\r\n        return (\r\n            <div className={classes.tag} key={key}>\r\n                <label className={classes.tagLabel}>\r\n                    { data.label }\r\n                </label>\r\n                <IconButton \r\n                    className={classes.removeBtn}\r\n                    onClick={removeChoice(data.value)}\r\n                >\r\n                    <CloseRoundedIcon className={classes.tagRemove}/>\r\n                </IconButton>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const removeChoice = value => event => {\r\n        event.stopPropagation();\r\n        getMenuOptions(value)\r\n        .then(data => {\r\n            setValues(values => values.filter(val => val !== value ));\r\n            if (!menuOptions.length) {\r\n                setAnchorEl(null)\r\n            }\r\n            setMenuOptions(data)\r\n        });  \r\n    }\r\n\r\n    const handleClick = val => event => {\r\n        setValues([...values, val]);\r\n        setMenuOptions(menuOptions => menuOptions.filter( op => op.value !== val));\r\n    }\r\n\r\n    const getMenuOptions = (value) => {\r\n        return new Promise((resolve, reject) => {\r\n            let mop = menuOptions;\r\n            mop.push(orgMenuOptions.find( op => op.value === value));\r\n            resolve(mop);\r\n        }) \r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                Boolean(orgMenuOptions.length) &&\r\n                <div className={classes.select}>\r\n                        <Button \r\n                            className={classes.filterBy}\r\n                            onClick={event => setAnchorEl(event.currentTarget)}\r\n                            startIcon={filterIcon}\r\n                        >\r\n                            { \r\n                                values.length \r\n                                ?   \r\n                                    <div className={classes.selectedContainer}>\r\n                                        {\r\n                                             values.map((val, i ) => createTag(val, i)) \r\n                                        }\r\n                                    </div>\r\n                               \r\n                                :   <label style={{ \r\n                                        padding: '5px 0px 5px 20px', \r\n                                        cursor: 'pointer' \r\n                                    }}>\r\n                                        {placeholder}\r\n                                    </label>\r\n                            }\r\n                        </Button>\r\n                        <Menu\r\n                            anchorEl={anchorEl}\r\n                            open={Boolean(anchorEl)}\r\n                            onClose={() => setAnchorEl(null)}\r\n                            classes={{\r\n                                paper : classes.menu\r\n                            }}\r\n                            keepMounted\r\n                            anchorOrigin={{\r\n                                vertical: 'bottom',\r\n                                horizontal: 'right',\r\n                            }}\r\n                            transformOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'right',\r\n                            }}\r\n                        >\r\n                            {\r\n                                menuOptions.map((v,i) => {\r\n                                    return (\r\n                                        <MenuItem\r\n                                            key={i}\r\n                                            onClick={handleClick(v.value)}\r\n                                            className={classes.menuitem}\r\n                                            style={{ direction: lang.code === 'he' ? 'rtl' : 'ltr'}}\r\n                                        >\r\n                                            {v.label}\r\n                                        </MenuItem>\r\n                                    )\r\n                                    \r\n                                })\r\n                            }\r\n                        </Menu>\r\n               </div>\r\n            }          \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    select: {\r\n        margin: '5px',\r\n        height: 'auto',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        whiteSpace: 'nowrap'\r\n    },\r\n    filterBy: {\r\n        textTransform: 'none',\r\n        color: 'white',\r\n        padding: '0 5px',\r\n        minHeight: '45px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '25px',\r\n        \r\n        '&:hover': {\r\n            boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n        }\r\n    },\r\n    selectedContainer: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        whiteSpace: 'nowrap',\r\n        flexWrap: 'wrap',\r\n        width: 'fit-content',\r\n        maxWidth: '400px'\r\n    },\r\n    menu: {\r\n        marginTop: '55px',\r\n        background: 'rgba(0,0,0,0.5)',\r\n        backdropFilter: 'blur(10px)',\r\n        color: 'white'\r\n    },\r\n    menuitem: {\r\n        minWidth: '200px'\r\n    },\r\n    container: {\r\n        height: '45px',\r\n        border: '1px solid rgba(0,0,0,0.25)',\r\n        borderRadius: '25px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        '&:hover': {\r\n            boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n            \r\n        }\r\n    },\r\n    focused: {\r\n        boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n        background: 'rgba(0,0,0,0.1)',\r\n        backdropFilter: 'blur(40px)'\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        \r\n    },\r\n    searchInput: {\r\n        height: '34px',\r\n        width: '98.5%',\r\n        margin: '3px 0.75%',\r\n        borderRadius: '5px 25px 25px 5px',\r\n        color: 'white',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        '& fieldset': {\r\n            border: '0'\r\n        } \r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        margin: '0 5px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    tag: {\r\n        padding: '5px 10px',\r\n        borderRadius: '50px',\r\n        boxShadow: 'rgba(0,0,0,0.25) 0px 0px 3px 1px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        margin: '3px'\r\n    },\r\n    tagLabel: {\r\n        padding: '0 5px'\r\n    },\r\n    removeBtn: {\r\n        padding: '4px',\r\n        color: 'white'\r\n    },\r\n    tagRemove: {\r\n        fontSize: '16px'\r\n    }\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\LanguageContext.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\i18n.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\Systems.js",["461","462"],"import { Grid, LinearProgress, makeStyles, useMediaQuery } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useLocation } from 'react-router';\r\nimport { queryParamsToObject } from '../../../api/genericApi';\r\nimport { applyFilters, getSystemsByAsset } from '../../../api/systemsApi';\r\nimport { useQuery } from '../../reuseables/customHooks/useQuery';\r\nimport { System } from './System';\r\nimport { SystemsControls } from './SystemsControls';\r\nimport { SystemsHeader } from './SystemsHeader';\r\n\r\nexport const Systems = () => {\r\n\r\n    const classes = useStyles();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const { t } = useTranslation();\r\n    const [ systems, setSystems ] = useState([]);\r\n    const [ isLoading, setIsLoading ] = useState(false);\r\n \r\n\r\n    useEffect(() => {\r\n        if (!isLoading) return;    \r\n        let queryParams = queryParamsToObject(location.search);\r\n        if (!queryParams.asset) {\r\n            setIsLoading(false);\r\n            return;\r\n        }\r\n        \r\n\r\n        getSystemsByAsset(queryParams.asset)\r\n        .then(data => {\r\n            return applyFilters(queryParams, data);\r\n        })\r\n        .then(data => {\r\n            setSystems(data);     \r\n        })\r\n        .finally(() => {\r\n            setIsLoading(false);\r\n        });\r\n    }, [isLoading])\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n    }, [location.search])\r\n\r\n\r\n    return(\r\n        <div>\r\n            <Grid container justify='center'>\r\n                <Grid item xs={12}>\r\n                    <div className={classes.pageModule}>\r\n                        {t(\"assetsModule.systems\")}\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} >\r\n                    <SystemsControls />\r\n                </Grid>\r\n                <Grid container justify='center' >\r\n                    {\r\n                        !query.asset \r\n                        ?   <div \r\n                                className={classes.initMessage}>\r\n                                {t(\"systemsModule.initMessage\")}\r\n                            </div>\r\n                        :   isLoading \r\n                            ?   <LinearProgress />\r\n                            :   \r\n                            <React.Fragment>\r\n                                <SystemsHeader />\r\n                                {\r\n                                    systems.map((system, i) => \r\n                                        <System systemData={system} key={i} />\r\n                                    )\r\n                                }\r\n                            </React.Fragment>\r\n                            \r\n                    }   \r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    initMessage: {\r\n        color: 'white',\r\n        padding: '10px 40px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '50px',\r\n        width: 'fit-content',\r\n        margin: '5px auto',\r\n        textAlign: 'center',\r\n        fontSize: '16px'\r\n    },\r\n    pageModule: {\r\n        color: 'white',\r\n        padding: '10px 40px',\r\n        fontSize: '18px',\r\n        background: 'rgba(0,0,0,0.6)',\r\n        margin: '0px auto 5px',\r\n        width: '30%',\r\n        textAlign: 'center',\r\n        borderRadius: '0 0 25px 25px',\r\n        lineHeight: '1'\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemsControls.js",["463","464"],"import React, { useState, useEffect } from 'react'\r\nimport { Grid, makeStyles, useMediaQuery, Button, Collapse } from '@material-ui/core'\r\nimport { SortBy } from '../../reuseables/SortBy'\r\nimport { SearchBox } from '../../reuseables/SearchBox';\r\nimport { FilterBySelect } from '../../reuseables/FilterBySelect';\r\nimport PersonRoundedIcon from '@material-ui/icons/PersonRounded';\r\nimport { createUserOptions } from '../../../api/userApi';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { SearchBoxSelect } from '../../reuseables/SearchBoxSelect';\r\nimport { getAssetsSuggestions } from '../../../api/systemsApi';\r\nimport { getFullAddress, getAsset } from '../../../api/assetsApi';\r\nimport { useLocation } from 'react-router';\r\nimport { useQuery } from '../../reuseables/customHooks/useQuery';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport ExpandMoreRoundedIcon from '@material-ui/icons/ExpandMoreRounded';\r\nimport { ClearRounded } from '@material-ui/icons';\r\n\r\nconst sortOptions = [\r\n    {\r\n        text: 'שם מערכת',\r\n        field: 'systemName'\r\n    },\r\n    {\r\n        text: 'מנהל מערכת',\r\n        field: 'owner'\r\n    },\r\n    {\r\n        text: 'כמות תקלות פתוחות',\r\n        field: 'openFaultsCount'\r\n    },\r\n    \r\n]\r\n\r\nexport const SystemsControls = () => {\r\n    \r\n    const classes = useStyles();\r\n    const { t, i18n } = useTranslation();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const [ reloadedValue, setReloadedValue ] = useState(null);\r\n    const [ collapsed, setCollapsed ] = useState(!downSm ? true : false);\r\n    \r\n    useEffect(() => {\r\n        if (query.asset) {\r\n            handleReloaded(query.asset)\r\n            .then(data => {\r\n                if (data) {\r\n                    setReloadedValue(data);\r\n                } else {\r\n                    \r\n                }\r\n            })\r\n        } else {\r\n            setReloadedValue({\r\n                label: '',\r\n                value: null\r\n            });\r\n        }\r\n    }, [location.search])\r\n\r\n    const handleReloaded = async (assetId) => {\r\n        const res = await getAsset(assetId, false);\r\n        if (res) {\r\n            return {\r\n                label: getFullAddress(res),\r\n                value: res._id\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    const toggleCollapse = () => {\r\n        if (collapsed) {\r\n            setCollapsed(false);\r\n            return;\r\n        }\r\n        setCollapsed(true)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                downSm &&\r\n                <Grid container justify='center'>\r\n                    <Grid item xs={11} className={classes.gridItem}>\r\n                        <Button\r\n                        className={classes.sortandfilter}\r\n                        startIcon={<FilterListIcon className={classes.icon} />}\r\n                        endIcon={collapsed ? <ClearRounded /> : <ExpandMoreRoundedIcon />}\r\n                        onClick={toggleCollapse}\r\n                    >\r\n                        {t(`faultsModule.${ collapsed ? 'hide' : 'show'}Filters`)}\r\n                    </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                    \r\n            }\r\n            <Collapse in={collapsed}>\r\n                <Grid container justify='center' >\r\n                    <Grid item xs={12} className={classes.gridItem}>\r\n\r\n                        {\r\n                            reloadedValue &&\r\n                            <SearchBoxSelect\r\n                                suggestionsFunc={getAssetsSuggestions}\r\n                                placeholder={t(\"systemsModule.filterByAsset\")}\r\n                                filterField={'asset'}\r\n                                reloadedLabel={reloadedValue.label}\r\n                                reloadedValue={reloadedValue.value}\r\n                            />\r\n                        }  \r\n                        <SearchBox \r\n                                placeholder={t(\"systemsModule.filterBySystemName\")}\r\n                                filterField={'name'}\r\n                            />\r\n                        </Grid>\r\n                    <Grid xs={11} className={classes.gridItem}>\r\n                        <FilterBySelect \r\n                            optionsFunc={createUserOptions}\r\n                            placeholder={t(\"systemsModule.filterBySystemOwner\")}\r\n                            filterIcon={<PersonRoundedIcon className={classes.icon }/>}\r\n                            filterField={'owner'}\r\n                        />\r\n                        <SortBy \r\n                            menuOptions={sortOptions}\r\n                        />\r\n                    </Grid>\r\n                    \r\n                </Grid>\r\n            </Collapse>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(them => ({\r\n    gridItem: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap'\r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        marginLeft: '4px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    sortandfilter: {\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        background: 'rgba(0,0,0,0.7)',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '5px 25px 5px 3px',\r\n        whiteSpace: 'nowrap',\r\n        '&:hover': {\r\n            background: 'black'\r\n        }\r\n    }\r\n}))\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\SearchBoxSelect.js",["465","466"],"import { ClickAwayListener, FormControl, IconButton, makeStyles, Menu, MenuItem, OutlinedInput } from '@material-ui/core';\r\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded';\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\nimport clsx from 'clsx';\r\nimport React, { useContext, useEffect, useRef, useState } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { addQueryParam, removeQueryParam } from '../../api/genericApi';\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\nimport { useQuery } from './customHooks/useQuery';\r\n\r\nexport const SearchBoxSelect = ({ placeholder, filterField, suggestionsFunc, reloadedLabel, reloadedValue }) => {\r\n    \r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const cont = useRef();\r\n    const input = useRef();\r\n    const { lang } = useContext(LanguageContext);\r\n    const [ onFocus, setOnFocus ] = useState(false);\r\n    const [ searchText, setSearchText ] = useState('');\r\n    const [ anchorEl, setAnchorEl ] = useState(null);\r\n    const [ menuOptions, setMenuOptions ] = useState([]);\r\n    const [ value, setValue ] = useState(reloadedValue || null);\r\n    \r\n    useEffect(() => {\r\n        if (Boolean(!searchText)) return;\r\n        const timeOutId = setTimeout(() => handleSearch(searchText), 700);\r\n        return () => clearTimeout(timeOutId);\r\n    }, [searchText])\r\n\r\n    useEffect(() => {\r\n        if (value) {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: addQueryParam(location.search, [{ name: filterField, value: value}])\r\n            });\r\n            return;\r\n        } else {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: removeQueryParam(location.search, filterField)\r\n            });\r\n        }\r\n    }, [value])\r\n\r\n    const handleChange = event => {\r\n        setSearchText(event.target.value)\r\n    }\r\n\r\n    const handleSearch = async searchText => {\r\n        if (searchText) {\r\n            const data = await suggestionsFunc(searchText);\r\n            setMenuOptions(data || []);\r\n            setAnchorEl(input.current)      \r\n        } else {\r\n            history.push({\r\n                path: location.pathname,\r\n                search: removeQueryParam(location.search, filterField)\r\n            });\r\n        }\r\n    }\r\n    \r\n    const getTag = val => {\r\n        let data = menuOptions.find(op => val === op.value);\r\n        return createTag(data)\r\n    }\r\n\r\n    const createTag = data => {\r\n        if (!data) return;\r\n        return (\r\n            <div className={classes.tag}>\r\n                <label className={classes.tagLabel}>\r\n                    { data.label }\r\n                </label>\r\n                <IconButton \r\n                    className={classes.removeBtn}\r\n                    onClick={removeChoice(data.value)}\r\n                >\r\n                    <CloseRoundedIcon className={classes.tagRemove}/>\r\n                </IconButton>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const removeChoice = value => event => {\r\n        event.stopPropagation();\r\n        setValue(null)\r\n    }\r\n\r\n    const handleClick = val => event => {\r\n        setValue(val);\r\n        setAnchorEl(null)\r\n    }\r\n\r\n    return (\r\n        <ClickAwayListener onClickAway={() => setOnFocus(false)}>\r\n            <div ref={cont} className={clsx(classes.container , onFocus && classes.focused, Boolean(value) && classes.selected)} xs={11} sm={9} md={8} lg={6}>\r\n                <SearchRoundedIcon className={classes.icon}/>\r\n                {\r\n                    value \r\n                    ?   query[filterField] === value\r\n                        ?  createTag(reloadedLabel && reloadedValue ? { label: reloadedLabel, value: reloadedValue} : null)\r\n                        :  getTag(value)\r\n                    :\r\n                    <FormControl variant='outlined' className={classes.form}>\r\n                        <OutlinedInput\r\n                            autoFocus={true}\r\n                            inputRef={input}\r\n                            value={ searchText || '' }\r\n                            onChange={handleChange}\r\n                            placeholder={placeholder}\r\n                            className={clsx(classes.searchInput)}\r\n                            onFocus={() => setOnFocus(true)}\r\n                        />\r\n                    </FormControl>\r\n                }\r\n                {\r\n                    Boolean(menuOptions.length) &&\r\n                    <Menu         \r\n                        anchorEl={anchorEl}\r\n                        open={Boolean(anchorEl)}\r\n                        onClose={() => setAnchorEl(null)}\r\n                        classes={{\r\n                            paper : classes.menu\r\n                        }}\r\n                        keepMounted\r\n                        anchorOrigin={{\r\n                            vertical: 'bottom',\r\n                            horizontal: 'right',\r\n                        }}\r\n                        transformOrigin={{\r\n                            vertical: 'top',\r\n                            horizontal: 'right',\r\n                        }}\r\n                    >\r\n                    {\r\n                        menuOptions.map((v,i) => {\r\n                            return (\r\n                                <MenuItem\r\n                                    key={i}\r\n                                    onClick={handleClick(v.value)}\r\n                                    className={classes.menuitem}\r\n                                    style={{ direction: lang.code === 'he' ? 'rtl' : 'ltr'}}\r\n                                >\r\n                                    {v.label}\r\n                                </MenuItem>\r\n                            )\r\n                            \r\n                        })\r\n                    }\r\n                    </Menu>\r\n                }\r\n            </div>   \r\n        </ClickAwayListener>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        margin: '5px',\r\n        padding: '0 5px',\r\n        maxWidth: '450px',\r\n        minHeight: '43px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '50px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        transition: 'box-shadow 0.2s ease-in',\r\n        '&:hover': {\r\n            boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n            transition: 'box-shadow 0.2s ease-in'\r\n        }\r\n\r\n    },\r\n    focused: {\r\n        boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n        background: 'rgba(0,0,0,0.1)',\r\n        backdropFilter: 'blur(40px)'\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        \r\n    },\r\n    searchInput: {\r\n        height: '34px',\r\n        width: '98.5%',\r\n        margin: '3px 0.75%',\r\n        borderRadius: '5px 25px 25px 5px',\r\n        color: 'white',\r\n        '& input': {\r\n            padding: '12.5px 14px',\r\n        },\r\n        '& fieldset': {\r\n            border: '0'\r\n        } \r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        marginRight: '5px',\r\n        color: 'white',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        \r\n    },\r\n    menu: {\r\n        marginTop: '55px',\r\n        background: 'rgba(0,0,0,0.5)',\r\n        backdropFilter: 'blur(10px)',\r\n        color: 'white'\r\n    },\r\n    menuitem: {\r\n        minWidth: '200px'\r\n    },\r\n    tag: {\r\n        padding: '5px 10px',\r\n        borderRadius: '50px',\r\n        boxShadow: 'rgba(0,0,0,0.25) 0px 0px 3px 1px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        color: 'white',\r\n        margin: '3px 0'\r\n    },\r\n    tagLabel: {\r\n        padding: '0 5px'\r\n    },\r\n    removeBtn: {\r\n        padding: '4px',\r\n        color: 'white'\r\n    },\r\n    tagRemove: {\r\n        fontSize: '16px'\r\n    },\r\n    selected: {\r\n        width: 'fit-content'\r\n    }\r\n}))\r\n\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\systemsApi.js",["467"],"import axios from 'axios';\r\nimport i18next from 'i18next';\r\nimport { getAssets, getFullAddress } from './assetsApi'\r\n\r\nexport const createNewSystem = async (details) => {\r\n    const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/systems/createSystem`, { ...details });\r\n    if (res.data) {\r\n        return res.data;\r\n    }\r\n    return [];\r\n}\r\n\r\nexport const getAssetsSuggestions = async (searchText) => {\r\n    const res = await getAssets();\r\n    let result = [{ text: i18next.t(\"general.none\"), value: ''}];\r\n    if (!searchText) { \r\n        res.data.forEach(asset => {\r\n            result.push({ \r\n                text: getFullAddress(asset),\r\n                value: asset._id\r\n            })\r\n        });\r\n        return result;\r\n    };\r\n    let filtered =  res.data.filter(asset => {\r\n        return getFullAddress(asset).indexOf(searchText) !== -1\r\n    });\r\n    filtered.forEach(asset => {\r\n        result.push({ \r\n            label: getFullAddress(asset),\r\n            value: asset._id\r\n        })\r\n    });\r\n    return result;\r\n}\r\n\r\nexport const getSystemsByAsset = async (assetId) => {\r\n    \r\n    const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/systems/getSystems`, { assetId });\r\n    if (res.data) {\r\n        return res.data;\r\n    }\r\n    return [];\r\n}\r\n\r\nexport const applyFilters = (filters, systems) => {\r\n    return new Promise((resolve, reject) => {\r\n        if (!filters) resolve(systems);\r\n        if (filters.sortBy) {\r\n            if (filters.sortBy === 'systemName') {\r\n                 systems = systems.sort((a,b) => {\r\n                     \r\n                     return (\r\n                         filters.sortOrder === 'asc' \r\n                         ?   a.name > b.name ? 1 : -1\r\n                         :   a.name < b.name ? 1 : -1\r\n                     )      \r\n                 })\r\n            } else if (filters.sortBy === 'owner') {\r\n                systems = systems.sort((a,b) => {\r\n                    let aName = `${a.owner.firstName} ${a.owner.lastName}`\r\n                    let bName = `${b.owner.firstName} ${b.owner.lastName}`\r\n                    return (\r\n                        filters.sortOrder === 'asc' \r\n                        ?   aName > bName ? 1 : -1\r\n                        :   aName < bName ? 1 : -1\r\n                    )      \r\n                })\r\n            }\r\n\r\n        }\r\n        if(filters.name){\r\n           systems = systems.filter(system => {\r\n               return system.name.indexOf(filters.name) !== -1\r\n           })\r\n        }\r\n        if (filters.owner) {\r\n            systems = systems.filter(system => {\r\n                if (filters.owner instanceof Array) {\r\n                    return filters.owner.indexOf(system.owner._id) !== -1\r\n                }\r\n                return  system.owner._id == filters.owner\r\n            })\r\n        }\r\n        resolve(systems);\r\n    });\r\n   \r\n\r\n}\r\n\r\n\r\nexport const updateSystemOwner = async (systemId, owner) => {\r\n    const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/systems/updateSystemOwner`, { systemId, owner });\r\n    if (res.data) {\r\n        return res.data;\r\n    }\r\n    return [];\r\n}\r\n\r\nexport const updateSystemName = async (systemId, name) => {\r\n    const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/systems/updateSystemName`, { systemId, name });\r\n    if (res.data) {\r\n        return res.data;\r\n    }\r\n    return [];\r\n}\r\n\r\nexport const removeSystemUser = async (systemId, userId) => {\r\n    const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/systems/removeUser`, { systemId, userId });\r\n    if (res.data) {\r\n        return res.data;\r\n    }\r\n    return [];\r\n}\r\n\r\nexport const addUser = async (systemId, userId) => {\r\n    const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/systems/addUser`, { systemId, userId });\r\n    if (res.data) {\r\n        return res.data;\r\n    }\r\n    return null;\r\n}\r\n\r\nexport const updateSystemAdditionalData = async (systemData) => {\r\n    const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/systems/updateSystemData`, { systemData });\r\n    if (res.data) {\r\n        return res.data;\r\n    }\r\n    return null;\r\n}\r\n\r\nexport const createSystemMenuOptions = (systems) => {\r\n    return new Promise((resolve, reject) => {\r\n        let options = [];\r\n        systems.forEach(s => {\r\n            options.push({ text: s.name, value: s._id})\r\n        });\r\n        resolve(options);\r\n    })\r\n}\r\n\r\nexport const getSystemsByAssetOptions = async (asset) => {\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/systems/getSystemsOptions`, { asset });\r\n        let options = [];\r\n        if (!res) return [];\r\n        res.data.forEach(t => {\r\n            if (asset) {\r\n                options.push({ label: t.name, value: t._id})\r\n            } else {\r\n                options.push({ label: `${t.name}, ${getFullAddress(t.asset)}`, value: t._id})\r\n            }\r\n            \r\n        });\r\n        return options;\r\n    } catch(e) {\r\n        console.log(e)\r\n        return null;\r\n    }\r\n}","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\System.js",["468","469","470"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n\tBackdrop,\r\n\tGrid,\r\n\tIconButton,\r\n\tmakeStyles,\r\n\tModal,\r\n\tPaper,\r\n\tuseMediaQuery,\r\n} from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport {\r\n\tupdateSystemOwner,\r\n\tupdateSystemAdditionalData,\r\n} from '../../../api/systemsApi';\r\nimport { SystemName } from './SystemName';\r\nimport { SystemLinkedUsers } from './SystemLinkedUsers';\r\nimport ExpandMoreRoundedIcon from '@material-ui/icons/ExpandMoreRounded';\r\nimport ExpandLessRoundedIcon from '@material-ui/icons/ExpandLessRounded';\r\nimport { SystemControls } from './SystemControls';\r\nimport { SystemAdditionalDetails } from './SystemAdditionalDetails';\r\nimport { UpsertSystem } from './UpsertSystem';\r\nimport { UpdateOwner } from '../../reuseables/UpdateOwner';\r\n\r\nexport const System = ({ systemData }) => {\r\n\tconst classes = useStyles();\r\n\tconst { t, i18n } = useTranslation();\r\n\tconst downSm = useMediaQuery((theme) => theme.breakpoints.down('md'));\r\n\tconst [data, setData] = useState(systemData);\r\n\tconst [editOwner, setEditOwner] = useState(false);\r\n\tconst [editName, setEditName] = useState(false);\r\n\tconst [expanded, setExpanded] = useState(false);\r\n\tconst [editDetails, setEditDetails] = useState(null);\r\n\tconst [showAdditionalDetails, setShowAdditionalDetails] = useState(false);\r\n\tconst [showLinkedUsers, setShowLinkedUsers] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!expanded) {\r\n\t\t\tsetShowAdditionalDetails(null);\r\n\t\t}\r\n\t}, [expanded]);\r\n\r\n\tconst toggleEditOwner = () => {\r\n\t\tif (editOwner) {\r\n\t\t\tsetEditOwner(false);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsetShowLinkedUsers(false);\r\n\t\tsetEditOwner(true);\r\n\t};\r\n\r\n\tconst updateOwner = async (owner) => {\r\n\t\tconst res = await updateSystemOwner(data._id, owner);\r\n\t\tif (res) {\r\n\t\t\tsetData(res);\r\n\t\t\tsetEditOwner(false);\r\n\t\t}\r\n\t};\r\n\r\n\tconst updateSystemData = (systemData) => {\r\n\t\tupdateSystemAdditionalData(systemData)\r\n\t\t\t.then((res) => {\r\n\t\t\t\tif (res) {\r\n\t\t\t\t\tconsole.log(res);\r\n\t\t\t\t\tsetData(res);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.finally(() => {\r\n\t\t\t\tsetEditDetails(null);\r\n\t\t\t});\r\n\t};\r\n\r\n\tconst setSystemName = (name) => {\r\n\t\tsetData({\r\n\t\t\t...data,\r\n\t\t\tname,\r\n\t\t});\r\n\t};\r\n\r\n\tconst showAdditionalDetailsToggle = () => {\r\n\t\tif (!showAdditionalDetails) {\r\n\t\t\tsetShowAdditionalDetails(true);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsetShowAdditionalDetails(false);\r\n\t};\r\n\r\n\tconst showLinkedUsersToggle = () => {\r\n\t\tif (!showLinkedUsers) {\r\n\t\t\tsetEditOwner(false);\r\n\t\t\tsetShowLinkedUsers(true);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsetShowLinkedUsers(false);\r\n\t};\r\n\r\n\tconst handleExpand = () => {\r\n\t\tif (expanded) {\r\n\t\t\tsetShowLinkedUsers(false);\r\n\t\t\tsetEditOwner(false);\r\n\t\t\tsetEditDetails(null);\r\n\t\t\tsetExpanded(false);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsetExpanded(true);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Grid item xs={12} sm={7} md={8} lg={11} xl={11}>\r\n\t\t\t<Paper elevation={9} className={classes.paper}>\r\n\t\t\t\t<div className={classes.mainRow}>\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclassName={classes.semiMainRow}\r\n\t\t\t\t\t\tonClick={handleExpand}\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\tborderBottom: expanded\r\n\t\t\t\t\t\t\t\t? '1px solid rgba(255,255,255,0.2)'\r\n\t\t\t\t\t\t\t\t: 'none',\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<SystemName\r\n\t\t\t\t\t\t\tsystemId={data._id}\r\n\t\t\t\t\t\t\teditName={editName}\r\n\t\t\t\t\t\t\tsetEditName={setEditName}\r\n\t\t\t\t\t\t\tsetSystemName={setSystemName}\r\n\t\t\t\t\t\t\ttitle={data.name}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{downSm && !editName ? (\r\n\t\t\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\t\t\tclassName={classes.expandIcon}\r\n\t\t\t\t\t\t\t\tonClick={handleExpand}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{!expanded ? (\r\n\t\t\t\t\t\t\t\t\t<ExpandMoreRoundedIcon\r\n\t\t\t\t\t\t\t\t\t\tclassName={classes.userIcon}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t<ExpandLessRoundedIcon\r\n\t\t\t\t\t\t\t\t\t\tclassName={classes.userIcon}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t) : null}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<SystemControls\r\n\t\t\t\t\t\teditName={editName}\r\n\t\t\t\t\t\texpanded={expanded}\r\n\t\t\t\t\t\towner={data.owner}\r\n\t\t\t\t\t\tshowLinkedUsersToggle={showLinkedUsersToggle}\r\n\t\t\t\t\t\ttoggleEditOwner={toggleEditOwner}\r\n\t\t\t\t\t\ttoggleAdditionalDetails={showAdditionalDetailsToggle}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<SystemLinkedUsers\r\n\t\t\t\t\tisOpen={showLinkedUsers}\r\n\t\t\t\t\tuserList={data.linkedUsers}\r\n\t\t\t\t\tsetData={setData}\r\n\t\t\t\t\tsystemId={data._id}\r\n\t\t\t\t/>\r\n\t\t\t\t<UpdateOwner\r\n\t\t\t\t\tisOpen={editOwner}\r\n\t\t\t\t\tcurrentOwner={data.owner}\r\n\t\t\t\t\thandleSave={updateOwner}\r\n\t\t\t\t\thandleClose={toggleEditOwner}\r\n\t\t\t\t\ttitle={t('systemsModule.updateSystemOwnerTitle')}\r\n\t\t\t\t\tinstructions={t('systemsModule.chooseManagerToUpdate')}\r\n\t\t\t\t/>\r\n\t\t\t\t<SystemAdditionalDetails\r\n\t\t\t\t\tdata={data.data}\r\n\t\t\t\t\tisOpen={showAdditionalDetails}\r\n\t\t\t\t\tsystemId={data._id}\r\n\t\t\t\t\ttoggleEdit={() => setEditDetails(data._id)}\r\n\t\t\t\t/>\r\n\t\t\t\t{Boolean(editDetails) && (\r\n\t\t\t\t\t<UpsertSystem\r\n\t\t\t\t\t\thandleClose={() => setEditDetails(null)}\r\n\t\t\t\t\t\tsystemId={editDetails}\r\n\t\t\t\t\t\thandleUpdate={updateSystemData}\r\n\t\t\t\t\t\tdata={data.data}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t</Paper>\r\n\t\t</Grid>\r\n\t);\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tpaper: {\r\n\t\tbackground: 'rgba(0,0,0,0.4)',\r\n\t\tborder: '1px solid rgba(255,255,255,0.2)',\r\n\t\tborderRadius: '5px',\r\n\t\tmargin: '4px 5px',\r\n\t},\r\n\tmainRow: {\r\n\t\tdisplay: 'flex',\r\n\t\tjustifyContent: 'space-between',\r\n\t\twidht: 'auto',\r\n\t\t[theme.breakpoints.down('md')]: {\r\n\t\t\tflexDirection: 'column',\r\n\t\t},\r\n\t},\r\n\tsemiMainRow: {\r\n\t\tdisplay: 'flex',\r\n\t\twidth: 'auto',\r\n\t\tjustifyContent: 'space-between',\r\n\t},\r\n\tactionsContainer: {\r\n\t\tdisplay: 'flex',\r\n\t\twidth: 'fit-content',\r\n\t\tpadding: '5px',\r\n\t\tmargin: 'auto 0',\r\n\t\tjustifyContent: 'space-between',\r\n\t\t[theme.breakpoints.down('md')]: {\r\n\t\t\tflexDirection: 'column-reverse',\r\n\t\t\talignItems: 'center',\r\n\t\t\tmargin: 'auto',\r\n\t\t},\r\n\t},\r\n\tactions: {\r\n\t\tmargin: 'auto 10px',\r\n\t\t[theme.breakpoints.down('md')]: {\r\n\t\t\tbackground: 'rgba(0,0,0,0.4)',\r\n\t\t\tborderRadius: '50px',\r\n\t\t\tmargin: '10px 0',\r\n\t\t\tpadding: '5px 10px',\r\n\t\t},\r\n\t},\r\n\tsystemName: {\r\n\t\tcolor: 'white',\r\n\t\tmargin: 'auto 20px',\r\n\t\tfontSize: '18px',\r\n\t\twhiteSpace: 'wrap',\r\n\t\tborderRadius: '50px',\r\n\t\tpadding: '5px 20px',\r\n\t},\r\n\ticonBtn: {\r\n\t\tpadding: '0px',\r\n\t\theight: 'fit-content',\r\n\t\twidth: 'fit-content',\r\n\t\tmargin: '0 20px',\r\n\t\t[theme.breakpoints.down('md')]: {\r\n\t\t\tmargin: '5px 10px',\r\n\t\t},\r\n\t},\r\n\tuserIcon: {\r\n\t\tfontSize: '20px',\r\n\t\tcolor: 'white',\r\n\t\tborder: '1px solid rgba(255,255,255,0.2)',\r\n\t\tpadding: '8px',\r\n\t\tborderRadius: '50px',\r\n\t\t'&:hover': {\r\n\t\t\tbackground: 'rgba(0,0,0,0.2)',\r\n\t\t},\r\n\t},\r\n\townerInfo: {\r\n\t\theight: 'auto',\r\n\t\twidth: '150px',\r\n\t\tpadding: '5px 20px 5px 10px',\r\n\t\tdisplay: 'grid',\r\n\t\tplaceItems: 'center',\r\n\t\tborderRadius: '5px',\r\n\t\t[theme.breakpoints.down('md')]: {\r\n\t\t\tmarginTop: '5px',\r\n\t\t\tborderRadius: '50px',\r\n\t\t\twidth: '170px',\r\n\t\t\tpadding: '5px 20px 5px 5px',\r\n\t\t},\r\n\t},\r\n\teditOwner: {\r\n\t\twidth: 'auto',\r\n\t\theight: '200px',\r\n\t\tmargin: '20px',\r\n\t\tborder: '1px solid rgba(255,255,255,0.2)',\r\n\t\tborderRadius: '5px',\r\n\t},\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemName.js",["471","472"],"import React, { useState } from 'react';\r\nimport { makeStyles, useMediaQuery, Button, Fade, OutlinedInput, FormControl, InputLabel, ClickAwayListener, IconButton, } from '@material-ui/core';\r\nimport SaveRoundedIcon from '@material-ui/icons/SaveRounded';\r\nimport ClearRoundedIcon from '@material-ui/icons/ClearRounded';\r\nimport { updateSystemName } from '../../../api/systemsApi'\r\n\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\r\nimport { green, red } from '@material-ui/core/colors';\r\n\r\nexport const SystemName = ({ systemId, editName, setEditName, setSystemName, title }) => {\r\n\r\n    const classes = useStyles();\r\n    const { t, i18n } = useTranslation();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const [ textValue, setTextValue ] = useState(title);\r\n    const [ editNameHover, setEditNameHover ] = useState(false);\r\n\r\n    const handleChange = event => {\r\n        setTextValue(event.target.value);\r\n    };\r\n\r\n    const handleSave = async () => {\r\n         await updateSystemName(systemId, textValue);\r\n         setSystemName(textValue);\r\n         setEditName(false);\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                editName ?\r\n                <ClickAwayListener onClickAway={() => setEditName(false)}>\r\n                    <div className={classes.editContainer}>\r\n                        <FormControl variant='outlined' className={classes.textInput}>\r\n                            <InputLabel htmlFor='olip' shrink>{t(\"systemsModule.systemName\")}</InputLabel>\r\n                            <OutlinedInput\r\n                                autoFocus\r\n                                notched\r\n                                id='olip' \r\n                                value={ textValue }\r\n                                onChange={handleChange}\r\n                                labelWidth={75}\r\n                                className={classes.input} \r\n                            />\r\n                        </FormControl>\r\n                        <IconButton \r\n                            className={classes.save}\r\n                            onClick={handleSave}\r\n                        >\r\n                            <SaveRoundedIcon className={classes.icon}/>\r\n                        </IconButton>\r\n                        <IconButton \r\n                            className={classes.cancel}\r\n                            onClick={() => setEditName(false)}\r\n                        >\r\n                            <ClearRoundedIcon className={classes.icon} />\r\n                        </IconButton>\r\n                       </div> \r\n                </ClickAwayListener>\r\n                \r\n                : \r\n                <Button \r\n                    className={classes.systemName}\r\n                    onMouseEnter={() => setEditNameHover(true)}\r\n                    onMouseLeave={() => setEditNameHover(false)}\r\n                    onClick={() => { setEditNameHover(false); setEditName(true)}}\r\n                >\r\n                    { title }\r\n                    {\r\n                        editNameHover &&\r\n                        <Fade in={true} timeout={700}>\r\n                            <EditRoundedIcon style={{ \r\n                                margin: '0 10px 0 0',\r\n                                fontSize: '16px'\r\n                            }}/>\r\n                        </Fade>\r\n                        \r\n                    }\r\n                </Button>\r\n            }\r\n        </React.Fragment>                    \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    editContainer: {\r\n        height: 'auto',\r\n        margin: 'auto 0',\r\n        width: '100%',\r\n        dispaly: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    systemName: {\r\n        width: 'auto',\r\n        color: 'white',\r\n        margin: 'auto 20px',\r\n        fontSize: '16px',\r\n        whiteSpace: 'wrap',\r\n        borderRadius: '50px',\r\n        padding: '5px 20px',\r\n        textAlign: 'left'\r\n    },\r\n    textInput: {\r\n        width: '65%',\r\n        margin: '15px 5px 15px 10px',\r\n        '& label.Mui-focused': {\r\n            color: 'white',\r\n        },\r\n        '& label': {\r\n            color: 'white'\r\n        },\r\n        '& .MuiOutlinedInput-root': {\r\n            '& fieldset': {\r\n                borderColor: 'white',\r\n            },\r\n            '&:hover fieldset': {\r\n                borderColor: 'rgba(255,255,255,0.7)',\r\n            },\r\n            '&.Mui-focused fieldset': {\r\n                borderColor: 'rgba(255,255,255,0.7)',\r\n              },\r\n        },\r\n        \r\n    },\r\n    input: {\r\n        color: 'white',\r\n        height: '45px',\r\n        borderRadius: '25px',\r\n        padding: '10px',\r\n        '&:focus': {\r\n            border: '2px solid white'\r\n        }\r\n\r\n    },\r\n    icon: {\r\n        color: 'white',\r\n        fontSize: '20px',\r\n        padding: '0px',\r\n        '&hover': {\r\n\r\n        }\r\n    },\r\n    save: {\r\n        background: green[800],\r\n        padding: '8px',\r\n        margin: '18px 5px',\r\n        \r\n    },\r\n    cancel: {\r\n        background: red[800],\r\n        padding: '8px',\r\n        margin: '18px 5px',\r\n       \r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\AddLinkedUser.js",["473","474","475"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { Grid, makeStyles, Paper, FormControl, IconButton, useMediaQuery, Fade, Modal, Backdrop,Select, MenuItem, Button } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport ClearRoundedIcon from '@material-ui/icons/ClearRounded';\r\nimport { LanguageContext } from '../../../context/LanguageContext';\r\nimport { getUserList } from '../../../api/userApi';\r\nimport clsx from 'clsx'\r\n\r\n\r\n\r\nexport const AddLinkedUser = ({ handleClose, handleSave, isOpen, linkedUsers }) => {\r\n\r\n    const classes = useStyles();\r\n    const { lang } = useContext(LanguageContext);\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const { t, i18n } = useTranslation();\r\n    const [ userList, setUserList ] = useState([]);\r\n    const [ selectedUser, setSelectedUser ] = useState(null)\r\n    \r\n    useEffect(() => {\r\n        getUserList()\r\n        .then(data => {\r\n            let ul = linkedUsers.map(l => l._id);\r\n            setUserList(data.filter(u => ul.indexOf(u._id) === -1 ));\r\n        })\r\n    }, [])\r\n\r\n    const handleChange = event => {\r\n        setSelectedUser(event.target.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal\r\n            open={isOpen}\r\n            onClose={handleClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout: 500\r\n            }}\r\n            className={classes.modal}\r\n        >\r\n            <Fade in={isOpen}>\r\n                <Grid container justify='center' alignItems='center' style={{ outline: '0'}}>\r\n                    <Grid item xl={3}>\r\n                        <Paper \r\n                            className={classes.paper} \r\n                            style={{ direction: lang.dir }}\r\n                            elevation={6}    \r\n                        >\r\n                            <div className={classes.header}>\r\n                                <div className={classes.title}>\r\n                                    {t(\"systemsModule.addRelatedUserTitle\")}\r\n                                </div>\r\n                                <IconButton className={classes.closeBtn} onClick={handleClose}>\r\n                                    <ClearRoundedIcon className={classes.icon}/>\r\n                                </IconButton>  \r\n                            </div>\r\n                            <div className={classes.instructions}>\r\n                                {t(\"systemsModule.chooseUserToAdd\")}\r\n                            </div>\r\n                            <FormControl variant='outlined' className={classes.textInput} >\r\n                                <Select\r\n                                    value={selectedUser}\r\n                                    onChange={handleChange}\r\n                                    className={classes.menu}\r\n                                    MenuProps={{\r\n                                        classes: {\r\n                                            paper: classes.menupaper,\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    {\r\n                                        userList.map( (user, i) => {\r\n                                            return (\r\n                                                <MenuItem\r\n                                                    className={classes.menuitem}\r\n                                                    value={user._id} \r\n                                                    key={i}\r\n                                                    style={{ direction: lang.code === 'he' ? 'rtl' : 'ltr'}}\r\n                                                >\r\n                                                    {`${user.firstName} ${user.lastName}`}\r\n                                                </MenuItem>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Select>\r\n                            </FormControl>\r\n                            <div className={classes.controls}>\r\n                                <Button\r\n                                    className={clsx(classes.control, classes.save)}\r\n                                    onClick={() => handleSave(selectedUser)}\r\n                                    disabled={!selectedUser}\r\n                                >\r\n                                    {t(\"alert.confirm\")}\r\n                                </Button>\r\n                                <Button\r\n                                    className={clsx(classes.control, classes.cancel)}\r\n                                    onClick={handleClose}\r\n                                >\r\n                                    {t(\"alert.cancel\")}\r\n                                </Button>\r\n                            </div>\r\n                        </Paper>\r\n                    </Grid>\r\n                    \r\n                </Grid> \r\n                \r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        background: 'rgba(0,0,0,0.4)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        padding: '10px',\r\n        borderRadius: '10px',\r\n        '&:focus': {\r\n            outline: 'none'\r\n        }\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backdropFilter: 'blur(10px)'   \r\n    },\r\n    header: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center'\r\n    },\r\n    title: {\r\n        color: 'white',\r\n        fontSize: '18px',\r\n        padding: '5px 10px',\r\n        height: 'fit-content'\r\n    },\r\n    closeBtn: {\r\n        fontSize: '20px',\r\n        height: '40px',\r\n        width: '40px'\r\n    },\r\n    icon: {\r\n        color: 'white',\r\n        borderRadius: '25px',\r\n        padding: '5px',\r\n        '&:hover': {\r\n            background: 'rgba(255,255,255,0.2)'\r\n        }\r\n    },\r\n    instructions: {\r\n        width: 'auto',\r\n        color: 'rgba(255,255,255,0.6)',\r\n        fontSize: '12px',\r\n        margin: '0px 10px'\r\n    },\r\n    menu: {\r\n        color: 'white',\r\n        '&:hover': {\r\n            borderColor: 'white'\r\n        }\r\n    },\r\n    menupaper: {\r\n        background: 'rgba(0,0,0,0.3)',\r\n        backdropFilter: 'blur(10px)',\r\n        maxHeight: '200px',\r\n        overflowY: 'auto',\r\n    },\r\n    menuitem: {\r\n        color: 'white'\r\n    },\r\n    textInput: {\r\n        margin: '20px 5px',\r\n        width: '300px',\r\n        '& input': {\r\n            color: 'white',\r\n            paddingLeft: '20px',\r\n        },\r\n        '& label': {\r\n            color: 'white',\r\n            paddingLeft: '5px' \r\n        },\r\n        '& fieldset': {\r\n            borderColor: 'rgba(255,255,255,0.6)',\r\n            borderRadius: '42px'\r\n        }    \r\n    },\r\n    controls: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    control: {\r\n        width: '30%',\r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        fontSize: '16px',\r\n        margin: '5px',\r\n        padding: '5px 30px',\r\n        borderRadius: '30px',\r\n        color: 'white', \r\n    },\r\n    save: {\r\n        background: 'rgba(0,0,0,0.2)', \r\n        '&:hover': {\r\n            background: 'black'\r\n        },\r\n        '&:disabled': {\r\n            color: 'rgba(255,255,255,0.3)'\r\n        }\r\n    },\r\n    cancel: {\r\n        border: '0px solid grey',\r\n        '&:hover': {\r\n            borderWidth: '1px'\r\n        }\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemsHeader.js",["476"],"import React from 'react';\r\nimport { Grid, makeStyles, Paper, useMediaQuery } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport const SystemsHeader = () => {\r\n\r\n    const classes = useStyles();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const { t, i18n } = useTranslation();\r\n\r\n    return (\r\n        <Grid item xs={ 12 } sm={7} md={8} lg={11} xl={11}>\r\n            <Paper elevation={9} className={classes.headerPaper}>\r\n                <div className={classes.systemName}>\r\n                    {t(\"systemsModule.systemName\")}\r\n                </div>\r\n                {\r\n                    !downSm &&\r\n                    <div className={classes.actionsContainer}>\r\n                        <div className={classes.iconHeader}>\r\n                            {t(\"systemsModule.moreDetails\")}\r\n                        </div>\r\n                        <div className={classes.iconHeader}>\r\n                            {t(\"systemsModule.tasks\")}\r\n                        </div>\r\n                        <div className={classes.iconHeader}>\r\n                            {t(\"systemsModule.faults\")}\r\n                        </div>\r\n                        <div className={classes.iconHeader}>\r\n                            {t(\"systemsModule.documents\")}\r\n                        </div>\r\n                        <div className={classes.iconHeader}>\r\n                            {t(\"systemsModule.changeManager\")}\r\n                        </div>\r\n                        <div className={classes.iconHeader}>\r\n                            {t(\"systemsModule.users\")}\r\n                        </div>      \r\n                        <div className={classes.ownerHeader}>\r\n                            {t(\"systemsModule.ownerHeader\")}\r\n                        </div>\r\n                    </div>\r\n                } \r\n            </Paper>\r\n        </Grid>                          \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    headerPaper: {\r\n        height: '45px',\r\n        background: 'rgba(0,0,0,0.7)',\r\n        margin: '5px',\r\n        borderRadius: '5px',\r\n        color: 'white',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        fontSize: '12px'\r\n    },\r\n    systemName: {\r\n        margin: 'auto 20px',\r\n        whiteSpace: 'nowrap'\r\n    },\r\n    actionsContainer: {\r\n        display: 'flex',\r\n        fontSize: '12px',\r\n        width: '668px',\r\n        justifyContent: 'flex-end'\r\n \r\n    },\r\n    iconHeader: {\r\n        width: '78px',\r\n        textAlign: 'center',\r\n        margin: 'auto'\r\n    },\r\n    ownerHeader: {\r\n        width: '190px',\r\n        textAlign: 'center',\r\n        margin: 'auto',\r\n        [theme.breakpoints.down('md')]: {\r\n            margin: 'auto 0'\r\n        }\r\n    }\r\n\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemControls.js",["477","478","479","480"],"import React, { useEffect, useState } from 'react';\r\nimport { IconButton, makeStyles, Paper, useMediaQuery, Tooltip, Collapse } from '@material-ui/core';\r\nimport { UserItem } from '../../user/UserItem';\r\nimport PersonRoundedIcon from '@material-ui/icons/PersonRounded';\r\nimport TransferWithinAStationRoundedIcon from '@material-ui/icons/TransferWithinAStationRounded';\r\nimport { useTranslation } from 'react-i18next';\r\nimport WarningRoundedIcon from '@material-ui/icons/WarningRounded';\r\nimport AssignmentRoundedIcon from '@material-ui/icons/AssignmentRounded';\r\nimport DescriptionRoundedIcon from '@material-ui/icons/DescriptionRounded';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\n\r\n\r\nexport const SystemControls = ({ editName, expanded, owner, showLinkedUsersToggle, toggleEditOwner, toggleAdditionalDetails }) => {\r\n\r\n    const classes = useStyles();\r\n    const { t, i18n } = useTranslation();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n\r\n    return (\r\n        <Collapse in={((!downSm && !editName) || expanded)}>\r\n            <div className={classes.actionsContainer}>\r\n                <div className={classes.actions}>\r\n                    <Tooltip title={t(\"systemsModule.moreDetails\")}>\r\n                        <IconButton\r\n                            className={classes.iconBtn}\r\n                            onClick={toggleAdditionalDetails}\r\n                        >\r\n                            <MoreHorizIcon className={classes.userIcon}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title={t(\"systemsModule.showTasks\")}>\r\n                        <IconButton\r\n                            className={classes.iconBtn}\r\n                        >\r\n                            <AssignmentRoundedIcon className={classes.userIcon}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title={t(\"systemsModule.showFaults\")}>\r\n                        <IconButton\r\n                            className={classes.iconBtn}\r\n                        >\r\n                            <WarningRoundedIcon className={classes.userIcon}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title={t(\"systemsModule.showDocuments\")}>\r\n                        <IconButton\r\n                            className={classes.iconBtn}\r\n                        >\r\n                            <DescriptionRoundedIcon className={classes.userIcon}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title={t(\"systemsModule.changeManager\")}>\r\n                        <IconButton\r\n                            className={classes.iconBtn}\r\n                            onClick={toggleEditOwner}\r\n                        >\r\n                            <TransferWithinAStationRoundedIcon className={classes.userIcon}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title={t(\"systemsModule.showUsers\")}>\r\n                        <IconButton\r\n                            className={classes.iconBtn}\r\n                            onClick={showLinkedUsersToggle}\r\n                        >\r\n                            <PersonRoundedIcon className={classes.userIcon}/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    \r\n                </div>\r\n                <div className={classes.ownerInfo}>\r\n                    <UserItem \r\n                        user={owner}\r\n                        avatarSize={40}\r\n                        showPhone\r\n                        showName\r\n                        size={12}\r\n                    />\r\n                </div> \r\n            </div>\r\n        </Collapse>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({ \r\n    actionsContainer: {\r\n        display: 'flex',\r\n        width: 'fit-content',\r\n        padding: '5px',\r\n        margin: 'auto 0',\r\n        justifyContent: 'space-between',\r\n        [theme.breakpoints.down('md')] : {\r\n            flexDirection: 'column-reverse',\r\n            alignItems: 'center',\r\n            margin: 'auto',\r\n        }\r\n    },\r\n    actions: {\r\n        margin: 'auto 10px',\r\n        [theme.breakpoints.down('md')] : {\r\n            background: 'rgba(0,0,0,0.4)',\r\n            borderRadius: '50px',\r\n            margin: '10px 0',\r\n            padding: '5px 10px'\r\n        }\r\n    },\r\n    iconBtn: {\r\n        padding: '0px',\r\n        height: 'fit-content',\r\n        width: 'fit-content',\r\n        margin: '0 20px',\r\n        [theme.breakpoints.down('md')]: {\r\n            margin: '5px 10px'\r\n        }\r\n        \r\n    },\r\n    userIcon: {\r\n        fontSize: '20px',\r\n        color: 'white',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        padding: '8px',\r\n        borderRadius: '50px',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.2)'\r\n        }\r\n        \r\n    },\r\n    ownerInfo: {\r\n        height: 'auto', \r\n        width: '150px',\r\n        padding: '5px 20px 5px 10px',\r\n        display: 'grid',\r\n        placeItems: 'center',\r\n        [theme.breakpoints.down('md')]: {\r\n            marginTop: '5px',\r\n            borderRadius: '50px',\r\n            width: '170px',\r\n            padding: '5px 20px 5px 5px',\r\n        }\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemLinkedUsers.js",["481","482"],"import React, { useState, } from 'react';\r\nimport { Grid, makeStyles, Collapse, Tooltip, IconButton, useMediaQuery, Fade } from '@material-ui/core';\r\nimport { UserItem } from '../../user/UserItem';\r\nimport { getFullName } from '../../../api/genericApi';\r\nimport ClearRoundedIcon from '@material-ui/icons/ClearRounded';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { AlertDialog } from '../../reuseables/AlertDialog';\r\nimport { addUser, removeSystemUser } from '../../../api/systemsApi';\r\nimport AddRoundedIcon from '@material-ui/icons/AddRounded';\r\nimport { AddLinkedUser } from './AddLinkedUser';\r\n\r\nexport const SystemLinkedUsers = ({ userList, setData, systemId, isOpen }) => {\r\n\r\n    const classes = useStyles();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const [ linkedUsers, setLinkedUsers ] = useState(userList || []);\r\n    const [ showControls, setShowControls ] = useState(null);\r\n    const [ showAddLinkedUser, setShowAddLinkedUser ] = useState(false);\r\n    const [ alertDialog ,setAlertDialog ] = useState(null)\r\n    const { t, i18n } = useTranslation(); \r\n\r\n    const confirmRemove = linkedUser => event => {\r\n        event.stopPropagation();\r\n        let toRemove = linkedUsers.find(user => user._id === linkedUser._id)\r\n        setAlertDialog({\r\n            text: `${t(\"systemsModule.userRemoveConfirmText\")} ${getFullName(toRemove)}?`,\r\n            title: t(\"systemsModule.userRemoveConfirmTitle\"),\r\n            handleConfirm: async () => { \r\n                const res = await removeSystemUser(systemId, linkedUser._id);\r\n                if (res) {\r\n                    setData(res);\r\n                    setAlertDialog(null);\r\n                    setLinkedUsers([]);\r\n                    setLinkedUsers(res.linkedUsers);\r\n                }  \r\n            },\r\n            handleCancel: () => setAlertDialog(null)\r\n        })\r\n    }\r\n\r\n    const handleAddLinkedUser = () => {\r\n        if (showAddLinkedUser) {\r\n            setShowAddLinkedUser(false);\r\n            return;\r\n        }\r\n        setShowAddLinkedUser(true);\r\n    }\r\n\r\n    const handleAddLinekdUser = async userId => {\r\n        const res = await addUser(systemId, userId);\r\n        if (res) {\r\n            setData(res);\r\n            setLinkedUsers(res.linkedUsers);\r\n            setShowAddLinkedUser(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Collapse in={isOpen} >\r\n            <div className={classes.linkedusers}>\r\n                <Grid container justify='flex-start' className={ classes.container} alignItems='center'>\r\n                    <Grid item xs={12} className={classes.titleContainer}>\r\n                        <div className={classes.title}>\r\n                            {t(\"systemsModule.assignedUsers\")}\r\n                        </div>\r\n                        <IconButton \r\n                            className={classes.addBtn}\r\n                            onClick={handleAddLinkedUser}\r\n                        >\r\n                            <AddRoundedIcon className={classes.icon}/>\r\n                        </IconButton>\r\n                        {\r\n                            showAddLinkedUser &&\r\n                            <AddLinkedUser \r\n                                isOpen={showAddLinkedUser}\r\n                                handleClose={handleAddLinkedUser}\r\n                                linkedUsers={linkedUsers}\r\n                                handleSave={handleAddLinekdUser}\r\n\r\n                            />\r\n                        }\r\n                        \r\n                    </Grid>\r\n                    {\r\n                        linkedUsers.length ? \r\n                        linkedUsers.map((linkedUser, i) => {\r\n                            return (\r\n                                <Grid item xs={12} sm={7} md={6} lg={3} className={classes.gridItem}>\r\n                                    <div \r\n                                        className={classes.userCont}\r\n                                        onMouseEnter={() => setShowControls(i)}\r\n                                        onMouseLeave={() => setShowControls(null)}\r\n                                        key={i}\r\n                                    >\r\n                                        <UserItem \r\n                                            user={linkedUser}\r\n                                            showTitle\r\n                                            showPhone\r\n                                            showName\r\n                                            avatarSize={'50px'}\r\n                                            size={13}\r\n                                        />\r\n                                        <Fade in={showControls === i || downSm}>\r\n                                            <Tooltip title={t(\"systemsModule.removeUser\")}>\r\n                                                <IconButton \r\n                                                    className={classes.removeuser}\r\n                                                    onClick={confirmRemove(linkedUser)}\r\n                                                >\r\n                                                    <ClearRoundedIcon className={classes.icon}/>\r\n                                                </IconButton>\r\n                                            </Tooltip>\r\n                                        </Fade> \r\n                                    </div>\r\n                                </Grid>\r\n                            )\r\n                        }) :\r\n                        <div className={classes.noUsers}>\r\n                            {t(\"systemsModule.noUsersAssigned\")}\r\n                        </div>\r\n\r\n                    }\r\n                    {\r\n                        Boolean(alertDialog) &&\r\n                        <AlertDialog \r\n                            alertDialog={alertDialog}\r\n                            open={Boolean(alertDialog)}\r\n                        />\r\n                    }    \r\n                </Grid>\r\n            </div>\r\n        </Collapse>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    linkedusers: {\r\n        width: 'auto',\r\n        margin: '10px',\r\n        borderRadius: '25px',\r\n        background: 'rgba(0,0,0,0.1)',\r\n        boxShadow: '0px 0px 5px 2px rgba(0,0,0,0.2)',\r\n    },\r\n    container: {\r\n        width: 'auto',\r\n        padding: '5px',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        borderRadius: '5px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    gridItem: {\r\n        borderRadius: '20px',\r\n        padding: '5px 10px',\r\n        '&:hover':{\r\n            background: 'rgba(0,0,0,0.2)',\r\n            boxShadow: '-0px 0px 5px 2px rgba(0,0,0,0.2)',\r\n            \r\n        }\r\n    },\r\n    titleContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        borderBottom: '1px solid rgba(255,255,255,0.2)',\r\n        margin: '0 10px',\r\n        padding: '5px 5px 10px'\r\n\r\n    },\r\n    addBtn: {\r\n        fontSize: '20px',\r\n        color: 'white',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        padding: '2px',\r\n        borderRadius: '50px',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.2)'\r\n        }\r\n    },\r\n    cell: {\r\n        color: 'white',\r\n        textAlign: 'center'\r\n    },\r\n    userCont: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        padding: '5px 10px',\r\n        position: 'relative'\r\n    },\r\n    removeuser: {\r\n        padding: '4px',\r\n        margin: 'auto 4px',\r\n        height: '50%',\r\n        '&:hover' :{\r\n            background: 'rgba(255,255,255,0.1)'\r\n        }\r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        color: 'white',\r\n        padding: '8px'\r\n    },\r\n    title: {\r\n        color: 'white',\r\n        fontSize: '16px'\r\n    },\r\n    noUsers: {\r\n        margin: '10px',\r\n        padding: '0px 0 15px',\r\n        color: 'white',\r\n        fontSize: '14px',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        padding: '10px 20px',\r\n        borderRadius: '25px'\r\n    }\r\n    \r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\Faults.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultsControls.js",["483","484"],"import {\r\n\tButton,\r\n\tButtonGroup,\r\n\tCollapse,\r\n\tGrid,\r\n\tmakeStyles,\r\n\tuseMediaQuery,\r\n} from '@material-ui/core';\r\nimport { ClearRounded } from '@material-ui/icons';\r\nimport DoubleArrowIcon from '@material-ui/icons/DoubleArrow';\r\nimport ExpandMoreRoundedIcon from '@material-ui/icons/ExpandMoreRounded';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport PersonRoundedIcon from '@material-ui/icons/PersonRounded';\r\nimport BlurOnRoundedIcon from '@material-ui/icons/BlurOnRounded';\r\nimport ViewListRoundedIcon from '@material-ui/icons/ViewListRounded';\r\nimport ViewWeekRoundedIcon from '@material-ui/icons/ViewWeekRounded';\r\nimport clsx from 'clsx';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport { getAsset, getFullAddress } from '../../../api/assetsApi';\r\nimport { getFaultsStatusListSuggestions } from '../../../api/faultsApi';\r\nimport { removeQueryParam } from '../../../api/genericApi';\r\nimport {\r\n\tgetAssetsSuggestions,\r\n\tgetSystemsByAssetOptions,\r\n} from '../../../api/systemsApi';\r\nimport { createUserOptions } from '../../../api/userApi';\r\nimport { useQuery } from '../../reuseables/customHooks/useQuery';\r\nimport { FilterByMultiSelect } from '../../reuseables/FilterByMultiSelect';\r\nimport { SearchBoxSelect } from '../../reuseables/SearchBoxSelect';\r\n\r\nexport const FaultsControls = ({ viewType, setViewType }) => {\r\n\tconst history = useHistory();\r\n\tconst location = useLocation();\r\n\tconst query = useQuery(location.search);\r\n\tconst classes = useStyles();\r\n\tconst downSm = useMediaQuery((theme) => theme.breakpoints.down('md'));\r\n\tconst { t, i18n } = useTranslation();\r\n\tconst [reloadedValue, setReloadedValue] = useState(null);\r\n\tconst [collapsed, setCollapsed] = useState(!downSm ? true : false);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (query.asset) {\r\n\t\t\thandleReloaded(query.asset).then((data) => {\r\n\t\t\t\tif (data) {\r\n\t\t\t\t\tsetReloadedValue(data);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tsetReloadedValue({\r\n\t\t\t\tlabel: '',\r\n\t\t\t\tvalue: null,\r\n\t\t\t});\r\n\t\t\thistory.push({\r\n\t\t\t\tpath: location.pathname,\r\n\t\t\t\tsearch: removeQueryParam(location.search, 'system'),\r\n\t\t\t});\r\n\t\t}\r\n\t}, [location.search]);\r\n\r\n\tconst handleReloaded = async (assetId) => {\r\n\t\tconst res = await getAsset(assetId, false);\r\n\t\tif (res) {\r\n\t\t\treturn {\r\n\t\t\t\tlabel: getFullAddress(res),\r\n\t\t\t\tvalue: res._id,\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n\r\n\tconst toggleCollapse = () => {\r\n\t\tif (collapsed) {\r\n\t\t\tsetCollapsed(false);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsetCollapsed(true);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t{downSm && (\r\n\t\t\t\t<Grid container justify=\"center\">\r\n\t\t\t\t\t<Grid item xs={12} className={classes.gridItem}>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tclassName={classes.sortandfilter}\r\n\t\t\t\t\t\t\tstartIcon={\r\n\t\t\t\t\t\t\t\t<FilterListIcon className={classes.icon} />\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tendIcon={\r\n\t\t\t\t\t\t\t\tcollapsed ? (\r\n\t\t\t\t\t\t\t\t\t<ClearRounded />\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t<ExpandMoreRoundedIcon />\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tonClick={toggleCollapse}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{t(\r\n\t\t\t\t\t\t\t\t`faultsModule.${\r\n\t\t\t\t\t\t\t\t\tcollapsed ? 'hide' : 'show'\r\n\t\t\t\t\t\t\t\t}Filters`\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t)}\r\n\t\t\t<Collapse in={collapsed}>\r\n\t\t\t\t<Grid container justify=\"center\">\r\n\t\t\t\t\t<Grid item xs={12} className={classes.gridItem}>\r\n\t\t\t\t\t\t{reloadedValue && (\r\n\t\t\t\t\t\t\t<SearchBoxSelect\r\n\t\t\t\t\t\t\t\tsuggestionsFunc={getAssetsSuggestions}\r\n\t\t\t\t\t\t\t\tplaceholder={t('systemsModule.filterByAsset')}\r\n\t\t\t\t\t\t\t\tfilterField={'asset'}\r\n\t\t\t\t\t\t\t\treloadedLabel={reloadedValue.label}\r\n\t\t\t\t\t\t\t\treloadedValue={reloadedValue.value}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t{query.asset && (\r\n\t\t\t\t\t\t\t<FilterByMultiSelect\r\n\t\t\t\t\t\t\t\toptionsFunc={() =>\r\n\t\t\t\t\t\t\t\t\tgetSystemsByAssetOptions(query.asset)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tplaceholder={t(\r\n\t\t\t\t\t\t\t\t\t'systemsModule.filterBySystemName'\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\tfilterIcon={\r\n\t\t\t\t\t\t\t\t\t<BlurOnRoundedIcon className={classes.icon} />\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tfilterField={'system'}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t{viewType === 'list' && (\r\n\t\t\t\t\t\t\t<FilterByMultiSelect\r\n\t\t\t\t\t\t\t\toptionsFunc={getFaultsStatusListSuggestions}\r\n\t\t\t\t\t\t\t\tplaceholder={t('faultsModule.filterByStatus')}\r\n\t\t\t\t\t\t\t\tfilterIcon={\r\n\t\t\t\t\t\t\t\t\t<DoubleArrowIcon className={classes.icon} />\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tfilterField={'status'}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<Grid item xs={12} className={classes.gridItem}>\r\n\t\t\t\t\t\t<FilterByMultiSelect\r\n\t\t\t\t\t\t\toptionsFunc={createUserOptions}\r\n\t\t\t\t\t\t\tplaceholder={t('faultsModule.filterByFaultOwner')}\r\n\t\t\t\t\t\t\tfilterIcon={\r\n\t\t\t\t\t\t\t\t<PersonRoundedIcon className={classes.icon} />\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfilterField={'owner'}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<ButtonGroup className={classes.typeGroup}>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tclassName={clsx(\r\n\t\t\t\t\t\t\t\t\tclasses.modeBtn,\r\n\t\t\t\t\t\t\t\t\tclasses.listBtn,\r\n\t\t\t\t\t\t\t\t\tviewType === 'list'\r\n\t\t\t\t\t\t\t\t\t\t? classes.modeBtnActive\r\n\t\t\t\t\t\t\t\t\t\t: null\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\tstartIcon={\r\n\t\t\t\t\t\t\t\t\t<ViewListRoundedIcon\r\n\t\t\t\t\t\t\t\t\t\tclassName={classes.icon}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tonClick={() => setViewType('list')}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{t('faultsModule.listMode')}\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tclassName={clsx(\r\n\t\t\t\t\t\t\t\t\tclasses.modeBtn,\r\n\t\t\t\t\t\t\t\t\tclasses.blocksBtn,\r\n\t\t\t\t\t\t\t\t\tviewType === 'blocks'\r\n\t\t\t\t\t\t\t\t\t\t? classes.modeBtnActive\r\n\t\t\t\t\t\t\t\t\t\t: null\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\tstartIcon={\r\n\t\t\t\t\t\t\t\t\t<ViewWeekRoundedIcon\r\n\t\t\t\t\t\t\t\t\t\tclassName={classes.icon}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tonClick={() => setViewType('blocks')}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{t('faultsModule.blocksMode')}\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</ButtonGroup>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Collapse>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nconst useStyles = makeStyles((them) => ({\r\n\tgridItem: {\r\n\t\tdisplay: 'flex',\r\n\t\tjustifyContent: 'center',\r\n\t\talignItems: 'flex-start',\r\n\t\tflexWrap: 'wrap',\r\n\t},\r\n\ticon: {\r\n\t\tfontSize: '20px',\r\n\t\tmarginLeft: '4px',\r\n\t\tcolor: 'white',\r\n\t\tborderRadius: '50px',\r\n\t\tpadding: '6px',\r\n\t\tborder: '1px solid rgba(255,255,255,0.2)',\r\n\t},\r\n\tsortandfilter: {\r\n\t\tborder: '1px solid rgba(255,255,255,0.2)',\r\n\t\tbackground: 'rgba(0,0,0,0.7)',\r\n\t\tcolor: 'white',\r\n\t\tborderRadius: '50px',\r\n\t\tpadding: '5px 25px 5px 3px',\r\n\t\twhiteSpace: 'nowrap',\r\n\t\t'&:hover': {\r\n\t\t\tbackground: 'black',\r\n\t\t},\r\n\t},\r\n\ttypeGroup: {\r\n\t\tmargin: '5px',\r\n\t\theight: '45px',\r\n\t},\r\n\tmodeBtn: {\r\n\t\tpadding: '0 15px 0 5px',\r\n\t\tcolor: 'white',\r\n\t\twidth: 'auto',\r\n\t\twhiteSpace: 'nowrap',\r\n\t\tborder: '1px solid rgba(255,255,255,0.2)',\r\n\t},\r\n\tlistBtn: {\r\n\t\tborderRadius: '25px 0 0 25px',\r\n\t},\r\n\tblocksBtn: {\r\n\t\tborderRadius: '0px 25px 25px 0px',\r\n\t},\r\n\tmodeBtnActive: {\r\n\t\tbackground: 'rgba(0,0,0,0.6)',\r\n\t},\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\faultsApi.js",["485"],"import axios from 'axios';\r\nimport i18next from 'i18next';\r\nimport { getFullAddress } from './assetsApi';\r\n\r\naxios.defaults.headers.common['token'] = localStorage.getItem('wb_token');\r\n\r\nexport const getFaultsStatusList = async () => {\r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/statuses/getStatusList`, { module: 'faults' });\r\n        if (res.status === 200) {\r\n            return res.data;\r\n        }\r\n    } catch(e) {\r\n        console.log(e)\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const getFaultsStatusListSuggestions = async () => {\r\n    const data = await getFaultsStatusList();\r\n    let statusList = [];\r\n    console.log(data)\r\n    if (data.length) { \r\n        data.forEach(st => {\r\n            statusList.push({\r\n                label: i18next.t(`faultsModule.statuses.${st.statusId}`),\r\n                value: st._id\r\n            })\r\n        });\r\n    }\r\n    return statusList;\r\n}\r\n\r\nexport const getMinifiedFaults = async (filters) => {\r\n    \r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/faults/getFaults`, { filters });\r\n        if (res) {\r\n            return res.data;\r\n        }\r\n        \r\n        return [];\r\n    } catch(e) {\r\n        console.log(e)\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nexport const getFaults = async (tenant, filters) => {\r\n    \r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/faults/getFaults`, { tenant, filters });\r\n        if (res) {\r\n            return res.data;\r\n        }\r\n        \r\n        return [];\r\n    } catch(e) {\r\n        console.log(e)\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const getFault = async (faultId, plain) => {\r\n    \r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/faults/getFault`, { faultId, plain: plain });\r\n        if (res) {\r\n            return res.data;\r\n        } \r\n        return null;\r\n    } catch(e) {\r\n        console.log(e)\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const createNewFault = async details => {\r\n    \r\n    let formData = new FormData();\r\n    Object.entries(details).forEach(f => {\r\n        if (f[0] === 'images') {\r\n            for (let i = 0; i < details.images.length; i++) {\r\n                formData.append(\"images\", details.images[i]);\r\n              }\r\n        } else {\r\n            formData.append(f[0], f[1])\r\n        }\r\n    });\r\n    \r\n    let config = {\r\n        headers: {\r\n            'Content-Type': `multipart/form-data`,\r\n            token: localStorage.getItem('wb_token')\r\n        }\r\n    };\r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/faults/createFault`, formData, config); \r\n        if (res) {\r\n            return res.data\r\n        };\r\n    } catch(e) {\r\n        console.log(e)\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const updateFault = async (details) => {\r\n    let formData = new FormData();\r\n    Object.entries(details).forEach(f => {\r\n        if (f[0] === 'images') {\r\n            for (let i = 0; i < details.images.length; i++) {\r\n                formData.append(\"images\", details.images[i]);\r\n              }\r\n        } else if (f[0] === 'uploadedImages') { \r\n            formData.append(\"uploadedImages\", JSON.stringify(f[1]))\r\n        } else {\r\n            formData.append(f[0], f[1])\r\n        }\r\n    });\r\n    let config = {\r\n        headers: {\r\n            'Content-Type': `multipart/form-data`,\r\n            token: localStorage.getItem('wb_token')\r\n        }\r\n    };\r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/faults/updateFaultData`, formData, config); \r\n        if (res) {\r\n            return res.data\r\n        };\r\n    } catch(e) {\r\n        console.log(e)\r\n        return null;\r\n    }\r\n\r\n}\r\n\r\nexport const updateFaultOwner = async (faultId, userId) => {\r\n    \r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/faults/updateFaultOwner`, { faultId, userId });\r\n        if (res) {\r\n            return res.data;\r\n            \r\n        } \r\n        return null;\r\n    } catch(e) {\r\n        console.log(e)\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const removeFollowingUser = async (faultId, userId) => {\r\n    \r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/faults/removeFollower`, { faultId, userId });\r\n        if (res) {\r\n            return res.data;\r\n        }\r\n    } catch (e) {\r\n        console.log(e.message);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nexport const addFollowingUser = async (faultId, userId) => {\r\n    \r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/faults/addFollower`, { faultId, userId });\r\n        if (res) {\r\n            return res.data;\r\n        }\r\n    } catch (e) {\r\n        console.log(e.message);\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const saveFaultComment = async (faultId, userId, text) => {\r\n    \r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/faults/addFaultComment`, { faultId, userId, text });\r\n        if (res) {\r\n            return res.data;\r\n        }\r\n    } catch (e) {\r\n        console.log(e.message);\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const updateFaultComment = async (faultId, commentId, text) => {\r\n    \r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/faults/updateFaultComment`, { faultId, commentId, text });\r\n        if (res) {\r\n            return res.data;\r\n        }\r\n    } catch (e) {\r\n        console.log(e.message);\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const updateFaultStatus = async (faultId, status ) => {\r\n    \r\n\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/faults/changeFaultStatus`, { faultId, status });\r\n        if (res) {\r\n            return res.data;\r\n        }\r\n    } catch (e) {\r\n        console.log(e.message);\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const getFaultOptionsByAssetOrSystem = async (asset, system) => {\r\n    \r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/faults/getFaultOptions`, { asset, system });\r\n        let options = [];\r\n        if (!res) return [];\r\n        res.data.forEach(f => {\r\n            options.push({ label: f.faultId, value: f._id})\r\n        });\r\n        return options;\r\n    } catch(e) {\r\n        console.log(e)\r\n        return null;\r\n    }\r\n}","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultListView.js",["486","487","488"],"import { Grid, List, ListItem, makeStyles, useMediaQuery } from '@material-ui/core';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport { FaultsContext } from '../../../context/FaultsContext';\r\nimport { useQuery } from '../../reuseables/customHooks/useQuery';\r\nimport { FaultMinified } from './FaultMinified';\r\nimport { FaultView } from './FaultView';\r\n\r\nexport const FaultListView = ({ faults }) => {\r\n    \r\n    const location = useLocation();\r\n    const classes = useStyles();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('sm'));\r\n    const { setFaults } = useContext(FaultsContext);\r\n    const [ faultView, setFaultView ] = useState(null);\r\n    const [ faultsData, setFaultsData ] = useState([]);\r\n    const [ isLoading, setIsLoading ] = useState(true);\r\n\r\n    useEffect(() => {\r\n        setFaultsData(faults);\r\n        setIsLoading(false);\r\n    }, [faults])\r\n   \r\n    const updateFaultState = (faultId, field, data) => {\r\n        setIsLoading(true);\r\n        let faultIndex = faultsData.findIndex(f => f._id === faultId);\r\n        if (!faultIndex && faultIndex !== 0) return;\r\n        let lf = [...faultsData];\r\n        lf[faultIndex][field] = data;\r\n        setFaults(lf);\r\n        setIsLoading(false);\r\n    }\r\n \r\n    return (\r\n        <Grid container className={classes.main} justify='flex-start'>\r\n            <Grid item xs={12} md={5} lg={3} xl={3} className={classes.faultList}>\r\n                <List className={classes.list}>\r\n                {   \r\n                    isLoading ? \r\n                    null\r\n                    :\r\n                    faultsData.map((f,i) => \r\n                        <ListItem \r\n                            button \r\n                            className={classes.item}\r\n                            onClick={() => setFaultView(f)}\r\n                        >  \r\n                            <FaultMinified \r\n                                data={f}\r\n                                key={i}\r\n                            />\r\n                        </ListItem>\r\n                        \r\n                    )\r\n                }\r\n                </List>\r\n            </Grid>\r\n            {\r\n                !downSm &&\r\n                Boolean(faultView) &&\r\n                <Grid item md={7} lg={9} xl={9} className={classes.faultPresenter}>\r\n                    <FaultView \r\n                        fid={faultView.faultId}\r\n                        updateFaultState={updateFaultState}\r\n                        faultData={faultView}\r\n                    />\r\n                </Grid>\r\n            }\r\n            \r\n        </Grid>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    main: {\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        height: '70vh',\r\n        [theme.breakpoints.down('sm')]: {\r\n            border: '0',\r\n            height: 'auto'\r\n        }\r\n    },\r\n    faultList: {\r\n        borderRight: '1px solid rgba(255,255,255,0.2)',\r\n        height: '100%',\r\n        overflowY: 'scroll',\r\n        '&::-webkit-scrollbar': {\r\n            display: 'none'\r\n        },\r\n        [theme.breakpoints.down('sm')]: {\r\n            border: '0',\r\n            overflowY: 'unset',\r\n        }\r\n    },\r\n    list: {\r\n        background: 'rgba(0,0,0,0.4)',\r\n        padding: 0,\r\n        overflowY: 'unset'\r\n    },\r\n    item: {\r\n        height:'200px',\r\n        borderBottom: '1px solid rgba(255,255,255,0.2)',\r\n        [theme.breakpoints.down('sm')]: {\r\n            margin: '10px 0'\r\n        }\r\n    },\r\n    faultPresenter: {\r\n        background: 'rgba(0,0,0,0.1)',\r\n        height: '100%'\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultMinified.js",["489","490"],"import { Grid, makeStyles, useMediaQuery } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { getFullAddress } from '../../../api/assetsApi';\r\nimport { StatusTag } from '../../reuseables/StatusTag';\r\nimport { UserItem } from '../../user/UserItem';\r\nimport { FaultLink } from './FaultLink';\r\n\r\nexport const FaultMinified = ({ data }) => {\r\n\tconst classes = useStyles();\r\n\tconst [minifiedData, setMinifiedData] = useState(data);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetMinifiedData(data);\r\n\t}, [data]);\r\n\r\n\treturn (\r\n\t\t<Grid container className={classes.container} alignItems=\"flex-start\">\r\n\t\t\t<Grid\r\n\t\t\t\tcontainer\r\n\t\t\t\tjustify=\"space-between\"\r\n\t\t\t\talignItems=\"center\"\r\n\t\t\t\tclassName={classes.topRow}\r\n\t\t\t>\r\n\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t<div className={classes.asset}>\r\n\t\t\t\t\t\t{getFullAddress(minifiedData.asset, true)}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t\t<Grid xs={12} item className={classes.title}>\r\n\t\t\t\t{minifiedData.title}\r\n\t\t\t</Grid>\r\n\t\t\t<Grid\r\n\t\t\t\tcontainer\r\n\t\t\t\tjustify=\"space-between\"\r\n\t\t\t\talignItems=\"center\"\r\n\t\t\t\tclassName={classes.bottomRow}\r\n\t\t\t>\r\n\t\t\t\t<Grid item xs={5} className={classes.userData}>\r\n\t\t\t\t\t<UserItem\r\n\t\t\t\t\t\tsize={13}\r\n\t\t\t\t\t\tavatarSize={40}\r\n\t\t\t\t\t\tuser={minifiedData.owner}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<FaultLink faultId={minifiedData.faultId} size={14} />\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid item xs={7} className={classes.status}>\r\n\t\t\t\t\t<StatusTag status={minifiedData.status} type={'fault'} />\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t</Grid>\r\n\t);\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tcontainer: {\r\n\t\twidth: '100%',\r\n\t\theight: '100%',\r\n\t\tposition: 'relative',\r\n\t},\r\n\ttitle: {\r\n\t\tcolor: 'white',\r\n\t\tfontSize: '16px',\r\n\t\tpadding: '15px 5px',\r\n\t\tdisplay: '-webkit-box',\r\n\t\tWebkitLineClamp: '2',\r\n\t\tWebkitBoxOrient: 'vertical',\r\n\t\toverflow: 'hidden',\r\n\t\ttextOverflow: 'ellipsis',\r\n\t\theight: '60px',\r\n\t},\r\n\ttopRow: {\r\n\t\tpadding: '5px',\r\n\t\tmaxHeight: '60px',\r\n\t},\r\n\tuserData: {\r\n\t\tpadding: '5px 0px',\r\n\t\tdisplay: 'flex',\r\n\t\talignItems: 'center',\r\n\t\tjustifyContent: 'flex-start',\r\n\t},\r\n\tbottomRow: {\r\n\t\theight: '50px',\r\n\t},\r\n\tasset: {\r\n\t\tcolor: 'white',\r\n\t\tborderRadius: '50px',\r\n\t\tbackground: 'rgba(0,0,0,0.4)',\r\n\t\tpadding: '5px 15px',\r\n\t\tborder: '1px solid rgba(255,255,255,0.2)',\r\n\t\tboxShadow: 'rgba(0,0,0,0.3) 1px 1px 5px 2px',\r\n\t\twidth: 'fit-content',\r\n\t\ttextAlign: 'center',\r\n\t},\r\n\tfaultLink: {\r\n\t\tdisplay: 'flex',\r\n\t\tjustifyContent: 'flex-end',\r\n\t\tmargin: '3px 0',\r\n\t},\r\n\tstatus: {\r\n\t\tdisplay: 'flex',\r\n\t\tjustifyContent: 'flex-end',\r\n\t},\r\n\tlink: {\r\n\t\tdisplay: 'flex',\r\n\t\tjustifyContent: 'flex-end',\r\n\t},\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\StatusTag.js",["491","492"],"\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport CheckCircleOutlineRoundedIcon from '@material-ui/icons/CheckCircleOutlineRounded';\r\nimport HourglassEmptyRoundedIcon from '@material-ui/icons/HourglassEmptyRounded';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\r\nimport clsx from 'clsx';\r\nimport { green, red, yellow } from '@material-ui/core/colors';\r\n\r\nexport const StatusTag = ({status, type, size}) => {\r\n\r\n    const classes = useStyles();\r\n    const { t, i18n } = useTranslation();\r\n    \r\n    return (\r\n        <div \r\n            className={clsx(classes.statusTag,classes[status.statusId])}\r\n            style={{ fontSize: size || '14px'}}    \r\n        >\r\n            {\r\n                status.statusId  === 'ready' ? \r\n                <PlayCircleOutlineIcon className={classes.icon}/> :\r\n                status.statusId  === 'inProgress' ? \r\n                <CachedIcon className={classes.icon} /> :\r\n                status.statusId  === 'pending' ?\r\n                <HourglassEmptyRoundedIcon className={classes.icon}className={classes.icon} /> : \r\n                status.statusId  === 'closed' ?\r\n                <CheckCircleOutlineRoundedIcon className={classes.icon} /> : null\r\n            }\r\n            <div className={classes.title}>\r\n                {t(`${type}sModule.statuses.${status.statusId}`)}\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    statusTag: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        width: 'fit-content',\r\n        padding: '0 10px',\r\n        borderRadius: '25px',\r\n        whiteSpace: 'nowrap'\r\n\r\n    },\r\n    title: {\r\n        padding: '7px 10px 7px 0px'\r\n    },\r\n    ready: {\r\n       \r\n        background: red[600],\r\n        color: 'white'\r\n    },\r\n    inProgress: {\r\n        background: yellow[500],\r\n        color: 'black',\r\n        \r\n    },\r\n    pending: {\r\n        background: 'rgba(255,255,255,0.4)',\r\n        color: 'black'\r\n    },\r\n    closed: {\r\n        background: green[800],\r\n        color: 'white'\r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n        padding: '0 5px'\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultLink.js",["493"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nexport const FaultLink = ({ faultId, size }) => {\r\n\r\n    return (\r\n        <Link\r\n            to={`/workspace/faults/${faultId}`}\r\n            style={{ textDecoration: 'none' }}\r\n        >\r\n           <span style={{\r\n               color: 'white',\r\n               fontSize: `${size}px`,\r\n               whiteSpace: 'nowrap'\r\n           }}>\r\n             {faultId}\r\n           </span>\r\n        </Link>\r\n    )\r\n}","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultView.js",["494"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\Carousel.js",["495","496","497","498"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { makeStyles, Slide, Paper, IconButton, Backdrop, Modal } from '@material-ui/core'\r\nimport ChevronLeftRoundedIcon from '@material-ui/icons/ChevronLeftRounded';\r\nimport ChevronRightRoundedIcon from '@material-ui/icons/ChevronRightRounded';\r\nimport clsx from 'clsx';\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\nimport { ClearRounded } from '@material-ui/icons';\r\nimport ZoomInRoundedIcon from '@material-ui/icons/ZoomInRounded';\r\nimport ZoomOutRoundedIcon from '@material-ui/icons/ZoomOutRounded';\r\nimport ZoomOutMapRoundedIcon from '@material-ui/icons/ZoomOutMapRounded';\r\n\r\nexport const Carousel = ({ images, isOpen, size }) => {\r\n    \r\n    const classes = useStyles();\r\n    const [ slideIn, setSlideIn ] = useState(isOpen);\r\n    const [ slideDirection, setSlideDirection ] = useState('left');\r\n    const [ index, setIndex ] = useState(0);\r\n    const { lang } = useContext(LanguageContext);\r\n    const [ photoViewMode, setPhotoViewMode ] = useState(false);\r\n    const [ picSize, setPicSize ] = useState(size)\r\n\r\n    useEffect(() => {\r\n        if (photoViewMode) {\r\n            setPicSize(800)\r\n        }\r\n    }, [photoViewMode])\r\n\r\n    const handleClick = dir => event => {\r\n        setSlideDirection(dir);\r\n        setSlideIn(false);\r\n \r\n        setTimeout(() => {\r\n            setIndex((index - (dir === 'left' ? 1 : -1) + images.length) % images.length);\r\n            setSlideIn(true);\r\n        }, 100)\r\n    }\r\n\r\n    const handleZoom = up => {\r\n        if (up) {\r\n            if (picSize === 1300) return;\r\n            setPicSize(picSize + 100)\r\n        } else {\r\n            if (picSize === 300) return;\r\n            setPicSize(picSize - 100)\r\n        }\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setPicSize(300);\r\n        setPhotoViewMode(false);\r\n    }\r\n\r\n    return (\r\n        <CarouselWrapper\r\n            isModal={photoViewMode}\r\n            wrapper={ children => \r\n                <Modal\r\n                    open={true}\r\n                    onClose={handleClose}\r\n                    closeAfterTransition\r\n                    BackdropComponent={Backdrop}\r\n                    BackdropProps={{\r\n                        timeout: 500\r\n                    }}\r\n                    className={classes.modal}\r\n                >\r\n                    <div className={classes.content} >\r\n                        <CarouselControls \r\n                            handleZoom={handleZoom} \r\n                            picSize={picSize} \r\n                            handleClose={handleClose}\r\n                        />\r\n                        {children}\r\n                    </div>\r\n                    \r\n                </Modal>\r\n            }\r\n        >\r\n            <div \r\n                className={classes.container}\r\n                style={{ cursor: photoViewMode ? 'default' : 'pointer'}}\r\n            >\r\n                <IconButton\r\n                    className={clsx(classes.arrow, classes.arrowLeft)}\r\n                    onClick={handleClick('left')}\r\n                    style={{ left: lang.drection === 'rtl' ? '97%' : '3%' }}\r\n                >\r\n                    <ChevronLeftRoundedIcon className={classes.icon}/>\r\n                </IconButton>\r\n                <CarouselSlide image={images[index]} size={picSize} setPhotoViewMode={setPhotoViewMode}/>\r\n                <IconButton\r\n                    className={clsx(classes.arrow, classes.arrowRight)}\r\n                    onClick={handleClick('right')}\r\n                    style={{ right: lang.drection === 'rtl' ? '97%' : '3%' }}\r\n                >\r\n                    <ChevronRightRoundedIcon className={classes.icon}/>\r\n                </IconButton>\r\n            </div>\r\n        </CarouselWrapper>\r\n        \r\n    )\r\n}\r\n\r\nconst CarouselSlide = ({image, size, setPhotoViewMode}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Paper \r\n            className={classes.paper} \r\n            elevation={0} \r\n            style={{ height: `${size}px`}}\r\n            onClick={() => setPhotoViewMode(true)}\r\n        >\r\n            <img src={image} className={classes.image} />\r\n        </Paper>   \r\n    )\r\n}\r\n\r\nconst CarouselControls = ({handleZoom, picSize, handleClose}) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.controls}>\r\n            <div className={classes.close}>\r\n                <IconButton\r\n                    className={classes.iconBtn}\r\n                    onClick={handleClose}\r\n                >\r\n                    <ClearRounded className={classes.icon} />\r\n                </IconButton>\r\n            </div>\r\n            \r\n            <div className={classes.zoomControl}>\r\n                <IconButton \r\n                    className={classes.iconBtn} \r\n                    onClick={() => handleZoom(true)} \r\n                    disabled={picSize === 1300}\r\n                >\r\n                    <ZoomInRoundedIcon className={classes.icon} />\r\n                </IconButton>\r\n                <IconButton \r\n                    className={classes.iconBtn} \r\n                    onClick={() => handleZoom(false)}\r\n                    disabled={picSize === 300}\r\n                >\r\n                    <ZoomOutRoundedIcon className={classes.icon} />\r\n                </IconButton>\r\n                <IconButton className={classes.iconBtn} >\r\n                    <ZoomOutMapRoundedIcon className={classes.icon} />\r\n                </IconButton>\r\n            </div>\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nconst CarouselWrapper = ({isModal, wrapper, children }) =>\r\n    isModal ? wrapper(children) : children\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backdropFilter: 'blur(10px)'   \r\n    },\r\n    container: {\r\n        display: 'flex',\r\n        position: 'relative',\r\n        width: '100%',\r\n        justifyContent: 'center',\r\n        padding: '10px 5px',\r\n        borderRadius: '10px',\r\n        outline: 'none'\r\n    },\r\n    content: {\r\n        height: '100%', \r\n        width: '100%', \r\n        outline: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    paper: {\r\n        padding: 0,\r\n        margin: 0,\r\n        width: '100%',\r\n        direction: 'ltr',\r\n        background: 'transparent',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        userSelect: 'none'\r\n    },\r\n    image: {\r\n        maxHeight: '90%',\r\n        maxWidth: '90%',\r\n        borderRadius: '5px',\r\n        objectFit: 'cover',\r\n        userSelect: 'none'\r\n    },\r\n    arrow: {\r\n        position: 'absolute',\r\n        background: 'rgba(0,0,0,0.6)',\r\n        color: 'white',\r\n        zIndex: 1,\r\n        padding: '5px',\r\n\r\n    },\r\n    arrowLeft: {\r\n        top: '50%',\r\n        transform: 'translateY(-50%)'\r\n    },\r\n    arrowRight: {\r\n        top: '50%',\r\n        transform: 'translateY(-50%)'\r\n    },\r\n    icon: {\r\n        fontSize: '32px',\r\n    },\r\n    iconBtn: {\r\n        background: 'rgba(255,255,255,0.6)',\r\n        color: 'black',\r\n        padding: '8px',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.8)',\r\n            color: 'white',\r\n        }\r\n\r\n    },\r\n    controls: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        position: 'absolute',\r\n        top: 0,\r\n        width: '90%',\r\n        padding: '2% 5%',\r\n        zIndex: 1\r\n    },\r\n    zoomControl: {\r\n        width: '170px',\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultViewControls.js",["499"],"import { IconButton, makeStyles, Tooltip } from '@material-ui/core';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport DoubleArrowIcon from '@material-ui/icons/DoubleArrow';\r\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\r\nimport TransferWithinAStationRoundedIcon from '@material-ui/icons/TransferWithinAStationRounded';\r\nimport React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n\r\nexport const FaultViewControls = ({ id, faultId, editFault, updateOwner, changeStatus }) => {\r\n\r\n    const classes = useStyles();\r\n    const { t, i18n } = useTranslation();\r\n\r\n    const openInNewWindow = () => {\r\n        window.open(`http://localhost:3000/workspace/faults/${faultId}`)\r\n    }\r\n    \r\n    return (\r\n        <div className={classes.container}> \r\n            <Tooltip title={t(\"general.openInNew\")}>\r\n                <IconButton\r\n                    className={classes.iconBtn}\r\n                    onClick={openInNewWindow}\r\n                >\r\n                    <OpenInNewIcon className={classes.icon}/>\r\n                </IconButton>\r\n            </Tooltip>\r\n            <Tooltip title={t(\"faultsModule.controls.editDetails\")}>\r\n                <IconButton\r\n                    className={classes.iconBtn}\r\n                    onClick={editFault}\r\n                >\r\n                    <CreateIcon className={classes.icon}/>\r\n                </IconButton>\r\n            </Tooltip>\r\n            <Tooltip title={t(\"faultsModule.controls.changeOwner\")}>\r\n                <IconButton\r\n                    className={classes.iconBtn}\r\n                    onClick={updateOwner}\r\n                >\r\n                    <TransferWithinAStationRoundedIcon className={classes.icon}/>\r\n                </IconButton>\r\n            </Tooltip>\r\n            <Tooltip title={t(\"faultsModule.controls.changeStatus\")}>\r\n                <IconButton\r\n                    className={classes.iconBtn}\r\n                    onClick={changeStatus}\r\n                >\r\n                    <DoubleArrowIcon className={classes.icon}/>\r\n                </IconButton>\r\n            </Tooltip>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        display: 'flex'\r\n    },\r\n    iconBtn: {\r\n        background: 'rgba(0,0,0,0.4)',\r\n        borderRadius: '50px',\r\n        color: 'white',\r\n        margin: '0 5px',\r\n        padding: '10px',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.7)'\r\n        }\r\n    },\r\n    icon: {\r\n        fontSize: '20px',\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\UserList.js",["500"],"import { IconButton, List, ListItem, makeStyles, Tooltip, useMediaQuery } from '@material-ui/core';\r\nimport { ClearRounded } from '@material-ui/icons';\r\nimport AddRoundedIcon from '@material-ui/icons/AddRounded';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { getFullName } from '../../api/genericApi';\r\nimport { UserItem } from '../user/UserItem';\r\nimport { AlertDialog } from './AlertDialog';\r\n\r\n\r\n\r\nexport const UserList = ({ users, handleRemove, removeTooltip, handleAdd, addTooltip, title, placeholder, width }) => {\r\n    \r\n    const classes = useStyles();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const { t } = useTranslation();\r\n    const [ userList, setUserList ] = useState(users || []);\r\n    const [ liHover, setLiHover ] = useState(null)\r\n    const [ alertDialog, setAlertDialog ] = useState(null);\r\n\r\n    useEffect(() => {\r\n        setUserList(users)\r\n    }, [users]);\r\n\r\n    useEffect(() => {\r\n        console.log(alertDialog)\r\n    }, [alertDialog])\r\n\r\n    const toggleHover = index => event => {\r\n        event.stopPropagation();\r\n        setLiHover(index);\r\n    }\r\n\r\n    const removeUser = user => event => {\r\n        setAlertDialog({\r\n            handleConfirm: async () => {\r\n                const res = await handleRemove(user._id);  \r\n                setAlertDialog(null)\r\n            },\r\n            handleCancel: () => setAlertDialog(null),\r\n            text: `${t(\"general.removeUserConfirmation.part1\")} ${getFullName(user)} ${t(\"general.removeUserConfirmation.part2\")}?`,\r\n            title: `${t(\"general.removeUserFromFollowing\")}`\r\n        })\r\n    }\r\n    return (\r\n           \r\n        <div className={classes.linked} style={{ minWidth: `200px`, width: '100%'}}>\r\n            <div className={classes.topRow}>\r\n                <div className={classes.linkedHeader}>\r\n                    {title}\r\n                </div>\r\n                <Tooltip title={addTooltip}>\r\n                    <IconButton \r\n                        className={classes.addUser}\r\n                        onClick={handleAdd}\r\n                    >\r\n                        <AddRoundedIcon className={classes.icon}/>\r\n                    </IconButton>\r\n                </Tooltip>\r\n                \r\n            </div>\r\n            \r\n            <List className={classes.followingList}>\r\n                {\r\n                    Boolean(userList.length) ?\r\n                        userList.map((user, i) => \r\n                        <ListItem \r\n                            key={i} \r\n                            className={classes.listItem}\r\n                            onMouseEnter={toggleHover(i)}\r\n                            onMouseLeave={() => setLiHover(null)}\r\n                        >\r\n                            <UserItem \r\n                                user={user} \r\n                                avatarSize={40}\r\n                                size={11}\r\n                                showTitle\r\n                                showPhone\r\n                                showName\r\n                            />\r\n                            {\r\n                                (liHover === i || downSm )&&\r\n                                <Tooltip title={removeTooltip}>\r\n                                    <IconButton \r\n                                        className={classes.removeUser}\r\n                                        onClick={removeUser(user)}\r\n                                    >\r\n                                        <ClearRounded className={classes.icon}/>\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            }\r\n                            \r\n                        </ListItem>\r\n                    )\r\n                    : \r\n                    <ListItem className={classes.placeholder}>\r\n                        {placeholder}\r\n                    </ListItem>\r\n                }\r\n            </List>\r\n            {\r\n                Boolean(alertDialog) &&\r\n                <AlertDialog \r\n                    isOpen={Boolean(alertDialog)}\r\n                    alertDialog={alertDialog}\r\n                />\r\n            }\r\n            \r\n        </div>\r\n            \r\n\r\n        \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\r\n    linked: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'flex-start',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        margin: '10px 0',\r\n        borderRadius: '10px',\r\n        padding: '10px 0',\r\n        height: '300px'\r\n       \r\n    },\r\n    topRow: {\r\n        margin: '0px auto',\r\n        width: '90%',\r\n        borderBottom: '1px solid rgba(255,255,255,0.2)',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center'\r\n    },\r\n    linkedHeader: {\r\n        color: 'white',\r\n        fontSize: '16px',\r\n        padding: '5px',\r\n    },\r\n    followingList: {\r\n        padding: '5px 0',\r\n        overflowY: 'auto',\r\n        \r\n    },\r\n    listItem: {\r\n        width: '100%',\r\n        borderRadius: '5px',\r\n        padding: '8px',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.4)',\r\n        }\r\n    },\r\n    removeUser: {\r\n        color: 'white',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.3)'\r\n        }\r\n    },\r\n    addUser: {\r\n        color: 'white',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        padding: '5px',\r\n        margin: '0 0 10px 0'\r\n    },\r\n    icon: {\r\n        fontSize: '20px'\r\n    },\r\n    placeholder: {\r\n        background: 'rgba(0,0,0,0.4)',\r\n        borderRadius: '25px',\r\n        color: 'white',\r\n        padding: '10px 20px',\r\n        width: '90%',\r\n        margin: '10px auto',\r\n        fontSize: '13px'\r\n    }\r\n    \r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\CommentSection.js",["501","502","503","504"],"import { Avatar, Button, ClickAwayListener, FormControl, Grid, IconButton, makeStyles, OutlinedInput, useMediaQuery } from '@material-ui/core';\r\nimport { green, red } from '@material-ui/core/colors';\r\nimport ClearRoundedIcon from '@material-ui/icons/ClearRounded';\r\nimport SaveRoundedIcon from '@material-ui/icons/SaveRounded';\r\nimport SendRoundedIcon from '@material-ui/icons/SendRounded';\r\nimport clsx from 'clsx';\r\nimport _ from 'lodash';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport { getDatediffString } from '../../api/genericApi';\r\nimport { AuthContext } from '../../context/AuthContext';\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\n\r\n\r\n\r\nexport const CommentSection = ({ parent, saveComment, updateComment }) => {\r\n\r\n    const classes = useStyles();\r\n    const { t, }= useTranslation();\r\n    const { lang } = useContext(LanguageContext);\r\n    const { auth } = useContext(AuthContext);\r\n    const [ commentList, setCommentList ] = useState(parent.comments || []);\r\n    const [ parentId, setParentId ] = useState(parent._id)\r\n    const [ text, setText ] = useState('');\r\n    const [ textFocused, setTextFocused ] = useState(false);\r\n    const [ editComment, setEditComment ] = useState(null);\r\n    const [ numOfComments, setNumOfComments ] = useState(3); \r\n    \r\n    useEffect(() => {\r\n        setCommentList(parent.comments);\r\n        setParentId(parent._id);\r\n    }, [parent])\r\n\r\n\r\n    const handleChange = event => {\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const handleSendComment = event => {\r\n        event.stopPropagation();\r\n        saveComment(parentId, auth.user._id, text)\r\n        .then(data => {\r\n            setCommentList(data.comments)\r\n        })\r\n        .finally(() => {\r\n            setText('');\r\n            setTextFocused(false);\r\n        })\r\n        \r\n    }\r\n\r\n    const handleEditChange = event => {\r\n        setEditComment({\r\n            ...editComment,\r\n            text: event.target.value\r\n        })\r\n    }\r\n\r\n    const handleUpdateComment = async () => {\r\n        const res = await updateComment(parentId, editComment._id, editComment.text);\r\n        setCommentList(res.comments);\r\n        setEditComment(null);\r\n    }\r\n\r\n    return (\r\n        <Grid container >\r\n            <Grid item xs={12} >\r\n                <div className={classes.title}>\r\n                    {t(\"comments.title\")}\r\n                </div>\r\n            </Grid>\r\n            {\r\n                numOfComments < commentList.length &&\r\n                <Grid item xs={12}>\r\n                    <Button\r\n                        className={classes.showMore}\r\n                        onClick={() => setNumOfComments(numOfComments + 3)}\r\n                    >\r\n                        {t(\"comments.showMore\")}\r\n                    </Button>\r\n                </Grid>\r\n                \r\n            }\r\n            {\r\n                _.takeRight(commentList, numOfComments).map((c,i) => \r\n                    <Grid item xs={12} className={clsx(classes.comment)} key={i}>\r\n                        <div className={classes.commentContainer}>\r\n                            <Avatar className={classes.avatar} alt={'abc'} src={c.user.avatar} style={{ height: '50px', width: '50px' }}/>\r\n                            <div className={classes.data}>\r\n                                <div className={classes.commenter}>\r\n                                    {`${c.user.firstName} ${c.user.lastName}`}\r\n                                </div>\r\n                                {\r\n                                    (Boolean(editComment) && editComment._id === c._id) ? \r\n                                    <div className={classes.editContainer}>\r\n                                        <FormControl variant='outlined' className={classes.form}>\r\n                                            <OutlinedInput\r\n                                                value={ editComment.text || '' }\r\n                                                onChange={handleEditChange}\r\n                                                placeholder={t(\"comments.add\")}\r\n                                                className={clsx(classes.textInput, textFocused ? classes.focused : null)}\r\n                                                onFocus={() => setTextFocused(true)}\r\n                                                multiline\r\n                                                classes={{\r\n                                                    inputMultiline: classes.multiLine\r\n                                                }}\r\n                                            />\r\n                                            \r\n                                        </FormControl>\r\n                                        <IconButton \r\n                                            className={classes.save}\r\n                                            onClick={handleUpdateComment}\r\n                                        >\r\n                                            <SaveRoundedIcon className={classes.icon}/>\r\n                                        </IconButton>\r\n                                        <IconButton \r\n                                            className={classes.cancel}\r\n                                            onClick={() => setEditComment(null)}\r\n                                        >\r\n                                            <ClearRoundedIcon className={classes.icon} />\r\n                                        </IconButton>\r\n                                    </div>\r\n                                    :\r\n                                    <div className={classes.commentText}>\r\n                                        {`${c.text}`}\r\n                                    </div>\r\n                                }\r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className={classes.commentFooter}>\r\n                            {/* <div className={classes.footerField}> \r\n                                <Button className={classes.footerBtn}> \r\n                                    {t(\"comments.reply\")}\r\n                                </Button>\r\n                            </div> */}\r\n                            {\r\n                                c.user._id == auth.user._id &&\r\n                                <div className={classes.footerField}>\r\n                                    {/* {` · `} */}\r\n                                    <Button \r\n                                        className={classes.footerBtn}\r\n                                        onClick={() => setEditComment(c)}\r\n                                    >\r\n                                        {t(\"comments.edit\")}\r\n                                    </Button>\r\n                                </div>\r\n                                 \r\n                            }\r\n                            <div className={classes.footerField}>\r\n                            {` · `}\r\n                            <div className={ classes.timePassed}>\r\n                                {`${getDatediffString(c.createdAt)}`}    \r\n                            </div>\r\n                            \r\n                            </div>\r\n                                      \r\n                        </div>\r\n                    </Grid>\r\n                )\r\n                \r\n            }\r\n            \r\n           \r\n            <ClickAwayListener onClickAway={() => setTextFocused(false)}> \r\n                <Grid item xs={12} sm={12} md={8} lg={6} xl={6} className={classes.addComment}>\r\n                    <FormControl variant='outlined' className={classes.form}>\r\n                        <OutlinedInput\r\n                            value={ text || '' }\r\n                            onChange={handleChange}\r\n                            placeholder={t(\"comments.add\")}\r\n                            className={clsx(classes.textInput, textFocused ? classes.focused : null)}\r\n                            onFocus={() => setTextFocused(true)}\r\n                            multiline\r\n                            classes={{\r\n                                inputMultiline: classes.multiLine\r\n                            }}\r\n                        />\r\n                        \r\n                    </FormControl>\r\n                    <IconButton \r\n                        className={classes.postBtn}\r\n                        onClick={handleSendComment}\r\n                    >\r\n                        <SendRoundedIcon className={clsx(classes.icon, lang.dir === 'rtl' ? classes.mirror : null)}/>\r\n                    </IconButton> \r\n                </Grid>\r\n            </ClickAwayListener>\r\n        </Grid>\r\n    \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    title: {\r\n        color: 'white',\r\n        fontSize: '20px',\r\n        padding: '20px 30px 10px',\r\n        marginBottom: '10px',\r\n        borderBottom: '1px solid rgba(255,255,255,0.2)'\r\n    },\r\n    addComment: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: '10px',\r\n        width: 'fit-content'\r\n    },\r\n    avatar: {\r\n        margin: '0 10px'\r\n    },\r\n    form: {\r\n        color: 'white',\r\n        width: '100%'\r\n\r\n    },\r\n    textInput: {\r\n        padding: '15px 10px',\r\n        borderRadius: '42px',\r\n        '& input': {\r\n            color: 'white',\r\n            width: '80%'\r\n        },\r\n        '& label': {\r\n            color: 'white',\r\n            paddingLeft: '5px' \r\n        },\r\n        '& fieldset': {\r\n            borderColor: 'rgba(255,255,255,0.6)',\r\n            borderRadius: '42px'\r\n        },\r\n           \r\n    },\r\n    focused: {\r\n        boxShadow: 'rgba(0,0,0,0.25) 2px 3px 2px 0px',\r\n        background: 'rgba(0,0,0,0.4)'\r\n    },\r\n    postBtn: {\r\n        color: 'white',\r\n        padding: '7px',\r\n        left: '-40px',\r\n        marginBottom: '1px',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.4)',\r\n        }\r\n    },\r\n    icon: {\r\n        fontSize: '20px'\r\n    },\r\n    mirror: {\r\n        transform: 'scaleX(-1)'\r\n    },\r\n    comment: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        margin: '5px 0'\r\n    },\r\n    commentContainer: {\r\n        width: 'fit-content',\r\n        display: 'flex',\r\n        padding: '10px 30px 10px 0px',\r\n        margin: '0px 10px',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        borderRadius: '35px',\r\n        \r\n    },\r\n    commenter: {\r\n        color: 'rgba(255,255,255,0.6)',\r\n        fontSize: '13px',\r\n        padding: '5px'\r\n    },\r\n    commentText: {\r\n        color: 'white'\r\n    },\r\n    commentFooter: {\r\n        display: 'flex',\r\n        marginLeft: '40px',\r\n        height: '20px'\r\n    },\r\n    footerField: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        fontSize: '11px',\r\n        color: 'rgba(255,255,255,0.4)',\r\n    },\r\n    footerBtn: {\r\n        fontSize: '12px',\r\n        padding: '1px 2px',\r\n        margin: '0px 2px',\r\n        minWidth: '0',\r\n        width: 'fit-content',\r\n        color: 'rgba(255,255,255,0.4)',\r\n        borderRadius: '50px',\r\n        '&:hover': {\r\n            color: 'white',\r\n            textDecoration: 'underline',\r\n            boxShadow: 'none',\r\n            background: 'transparent'\r\n        }\r\n    },\r\n    timePassed: {\r\n        fontSize: '12px',\r\n        padding: '0px 2px',\r\n        margin: '0 2px',\r\n        minWidth: '0',\r\n        width: 'fit-content',\r\n        color: 'rgba(255,255,255,0.4)',\r\n    },\r\n    multiLine: {\r\n        padding: '0px 20px'\r\n    },\r\n    showMore: {\r\n        margin: '5px 30px',\r\n        color: 'white',\r\n        fontSize: '16px',\r\n        padding: '5px',\r\n        '&:hover': {\r\n            boxShadow: 'none',\r\n            background: 'inherit',\r\n            textDecoration: 'underline'\r\n        }\r\n    },\r\n    save: {\r\n        background: green[800],\r\n        padding: '8px',\r\n        margin: '18px 5px',\r\n        \r\n    },\r\n    cancel: {\r\n        background: red[800],\r\n        padding: '8px',\r\n        margin: '18px 5px',\r\n       \r\n    },\r\n    editContainer: {\r\n        height: 'auto',\r\n        margin: 'auto 0',\r\n        width: '100%',\r\n        dispaly: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultViews.js",["505","506","507"],"import { Grid, LinearProgress, makeStyles, useMediaQuery } from '@material-ui/core';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport { getFaults } from '../../../api/faultsApi';\r\nimport { updateQueryParams } from '../../../api/genericApi';\r\nimport { AuthContext } from '../../../context/AuthContext';\r\nimport { FaultsContext } from '../../../context/FaultsContext';\r\nimport { useQuery } from '../../reuseables/customHooks/useQuery';\r\nimport { FaultBlockView } from './FaultBlockView';\r\nimport { FaultListView } from './FaultListView';\r\nimport { FaultsControls } from './FaultsControls';\r\n\r\nexport const FaultViews = () => {\r\n\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = useQuery(location.search);\r\n    const classes = useStyles();\r\n    const { auth } = useContext(AuthContext);\r\n    const { t } = useTranslation();\r\n    const { faults, setFaults } = useContext(FaultsContext)\r\n    const [ viewType, setViewType ] = useState(query['viewType'] || 'list');\r\n    const [ isLoading, setIsLoading ] = useState(true);\r\n    \r\n\r\n    useEffect(() => {\r\n        if (!isLoading) return;\r\n        getFaults(auth.user.tenant, query)\r\n        .then(data => {\r\n            if (data) {\r\n                setFaults(data)\r\n            }      \r\n        })\r\n        .finally(() => {\r\n            setIsLoading(false)\r\n        })\r\n    }, [isLoading])\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true)\r\n    }, [location.search])\r\n\r\n    useEffect(() => { \r\n        history.push({\r\n            path: location.pathname,\r\n            search: updateQueryParams(location.search, [{ name: 'viewType', value: viewType}], ['status'] )\r\n        });   \r\n    }, [viewType]);\r\n\r\n    return (\r\n        <Grid container justify={ 'center'} >\r\n            <div className={classes.pageModule}>\r\n                    {t(\"assetsModule.faults\")}\r\n            </div>\r\n            <Grid item xs={12}>\r\n                <FaultsControls \r\n                    viewType={viewType}\r\n                    setViewType={setViewType}    \r\n                />\r\n            </Grid>\r\n            {\r\n                isLoading ?\r\n                <LinearProgress />\r\n                :\r\n                <Grid item xs={12} \r\n                    className={classes.faultPresent}\r\n                    style={{ height: 'auto' }}\r\n                >\r\n                    {\r\n                        viewType === 'list' ?\r\n                        <FaultListView \r\n                            faults={faults}\r\n                        /> :\r\n                        <FaultBlockView \r\n                            faults={faults}\r\n                        />     \r\n                    }\r\n                    \r\n                </Grid>\r\n            }\r\n            \r\n        </Grid>\r\n        \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    pageModule: {\r\n        color: 'white',\r\n        padding: '10px 40px',\r\n        fontSize: '18px',\r\n        background: 'rgba(0,0,0,0.6)',\r\n        margin: '0px auto 5px',\r\n        width: '30%',\r\n        textAlign: 'center',\r\n        borderRadius: '0 0 25px 25px',\r\n        lineHeight: '1'\r\n    },\r\n    faultPresent: {\r\n        margin: '20px 10px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            margin: '20px 0',\r\n        }\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\CreateContainer.js",["508"],"import { makeStyles } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport { createNewAsset } from '../../api/assetsApi';\r\nimport { uploadDocument } from '../../api/documentsApi';\r\nimport { createNewFault } from '../../api/faultsApi';\r\nimport { createNewSystem } from '../../api/systemsApi';\r\nimport { createNewTask } from '../../api/tasksApi';\r\nimport { UpsertAsset } from '../datapages/assets/UpsertAsset';\r\nimport { UpsertDocument } from '../datapages/documents/UpsertDocument';\r\nimport { UpsertFault } from '../datapages/faults/UpsertFault';\r\nimport { UpsertSystem } from '../datapages/systems/UpsertSystem';\r\nimport { UpsertTask } from '../datapages/tasks/UpsertTask';\r\n\r\n\r\n\r\n\r\nexport const CreateContainer = ({ isOpen, handleClose, itemType }) => {\r\n\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n \r\n    const handleSaveAsset = details => {\r\n        createNewAsset(details)\r\n        .then(data => {\r\n            if (location.pathname === '/workspace/assets') {\r\n                console.log('here')\r\n                history.go(0);\r\n            }\r\n        })\r\n        .finally(() => {\r\n            handleClose();\r\n        })\r\n    }\r\n\r\n    const handleSaveSystem = details => {\r\n        createNewSystem(details)\r\n        .then(data => {\r\n            console.log(data);\r\n            if (location.pathname === '/workspace/systems') {\r\n                history.go(0);\r\n            }\r\n        })\r\n        .finally(() => {\r\n            handleClose();\r\n        })\r\n    }\r\n\r\n    const handleSaveFault = details => {\r\n        createNewFault(details)\r\n        .then(data => {\r\n            handleClose();\r\n            history.push(`/workspace/faults/${data.faultId}`)\r\n        })\r\n    }\r\n\r\n    const handleSaveTask = details => {\r\n        console.log(details)\r\n        createNewTask(details)\r\n        .then(data => {\r\n            handleClose();\r\n            history.push(`/workspace/tasks/${data.taskId}`)\r\n        })\r\n    }\r\n\r\n    const handleSaveDocument = details => {\r\n        uploadDocument(details)\r\n        .then(data => {\r\n            handleClose();\r\n            history.push(`/workspace/docs`)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                itemType === 'asset' ?\r\n                <UpsertAsset \r\n                    handleClose={handleClose}\r\n                    handleSave={handleSaveAsset}\r\n                /> : \r\n                itemType ==='system' ? \r\n                <UpsertSystem \r\n                    handleClose={handleClose}\r\n                    handleSave={handleSaveSystem}\r\n                />\r\n                : \r\n                itemType === 'fault' ?\r\n                <UpsertFault \r\n                    handleClose={handleClose}\r\n                    handleSave={handleSaveFault}\r\n                /> \r\n                : \r\n                itemType === 'task' ?\r\n                <UpsertTask \r\n                    handleClose={handleClose}\r\n                    handleSave={handleSaveTask}\r\n                />\r\n                : \r\n                itemType === 'document' ?\r\n                <UpsertDocument \r\n                    handleClose={handleClose}\r\n                    handleSave={handleSaveDocument}\r\n                /> : null\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backdropFilter: 'blur(10px)'   \r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\SystemAdditionalDetails.js",["509","510","511","512"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { Grid, makeStyles, Collapse, Tooltip, IconButton, useMediaQuery, LinearProgress } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { format } from 'date-fns'\r\nimport { LanguageContext } from '../../../context/LanguageContext';\r\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\r\nimport { UpsertSystem } from './UpsertSystem';\r\n\r\nexport const SystemAdditionalDetails = ({ data, isOpen, systemId, toggleEdit }) => {\r\n\r\n    const classes = useStyles();\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const { lang } = useContext(LanguageContext);\r\n    const [ systemData, setSystemData ] = useState(null);\r\n    const { t, i18n } = useTranslation(); \r\n    const [ isLoading, setIsLoading ] = useState(true)\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        setSystemData(data);\r\n        setIsLoading(false);\r\n    }, [data])\r\n\r\n    return (\r\n      \r\n            isLoading ?\r\n            <LinearProgress />\r\n            :\r\n            <Collapse in={isOpen} >\r\n                <div className={classes.container}>\r\n                    <Grid container justify={'center'} className={classes.grid} spacing={2}>\r\n                        <Grid container className={classes.gridItem}>\r\n                            <Grid item xs={12} className={classes.headerRow}>\r\n                                <div className={classes.title}>\r\n                                    {t(\"systemsModule.additionalDetails\")}\r\n                                </div>\r\n                                <IconButton \r\n                                    className={classes.iconBtn}\r\n                                    onClick={toggleEdit}\r\n                                >\r\n                                    <EditRoundedIcon className={classes.icon}/>\r\n                                </IconButton>\r\n                            </Grid>\r\n                            <Grid item md={6} lg={3} xl={4} className={classes.fieldContainer}>\r\n                                <div className={classes.label}>\r\n                                    {t(\"systemsModule.location\")}\r\n                                </div>\r\n                                <div className={classes.fieldData}>\r\n                                    {systemData.general.location || t(\"general.noData\")}\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={12} md={6} lg={3} xl={4} className={classes.fieldContainer}>\r\n                                <div className={classes.label}>\r\n                                    {t(\"systemsModule.manufacturingYear\")}\r\n                                </div>\r\n                                <div className={classes.fieldData}>\r\n                                    {systemData.general.manufacturingYear || t(\"general.noData\")}\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={12} md={6} lg={3} xl={4} className={classes.fieldContainer}>\r\n                                <div className={classes.label}>\r\n                                    {t(\"systemsModule.SID\")}\r\n                                </div>\r\n                                <div className={classes.fieldData}>\r\n                                    {systemData.general.SID || t(\"general.noData\")}\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={12} md={6} lg={3} xl={4} className={classes.fieldContainer}>\r\n                                <div className={classes.label}>\r\n                                    {t(\"systemsModule.warrantyDetails.issuer\")}\r\n                                </div>\r\n                                <div className={classes.fieldData}>\r\n                                    {t(`systemsModule.warrantyDetails.${systemData.warranty.issuer || 'nowarranty'}`)}\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={12} md={6} lg={3} xl={4} className={classes.fieldContainer}>\r\n                                <div className={classes.label}>\r\n                                    {t(\"systemsModule.warrantyDetails.expiryDate\")}\r\n                                </div>\r\n                                <div className={classes.fieldData}>\r\n                                    {systemData.warranty.expiryDate ? format(new Date(systemData.warranty.expiryDate), lang.dateformat) : t(\"systemsModule.warrantyDetails.nowarranty\")}\r\n                                </div>\r\n                            </Grid>\r\n                            \r\n                        </Grid>\r\n                        <Grid item xs={12} lg={4} xl={4} className={classes.gridItem}>\r\n                            <div className={classes.card}>\r\n                                <div className={classes.cardTitle}>\r\n                                    {t(\"systemsModule.manufacturer\")}\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.manufacturerDetails.name\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.manufacturer.name || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.manufacturerDetails.contactName\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.manufacturer.contactName || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.manufacturerDetails.email\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.manufacturer.email || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.manufacturerDetails.phoneNumber\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.manufacturer.phoneNumber || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.manufacturerDetails.extension\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.manufacturer.extension || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12} lg={4} xl={4} className={classes.gridItem}>\r\n                        <div className={classes.card}>\r\n                                <div className={classes.cardTitle}>\r\n                                    {t(\"systemsModule.supplier\")}\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.supplierDetails.name\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.supplier.name || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.supplierDetails.contactName\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.supplier.contactName || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.supplierDetails.email\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.supplier.email || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.supplierDetails.phoneNumber\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.supplier.phoneNumber || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.supplierDetails.extension\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.supplier.extension || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={12} lg={4} xl={4} className={classes.gridItem}>\r\n                            <div className={classes.card}>\r\n                                <div className={classes.cardTitle}>\r\n                                    {t(\"systemsModule.insurance\")}\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.insuranceDetails.name\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.insurance.name || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.insuranceDetails.contactName\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.insurance.contactName || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.insuranceDetails.email\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.insurance.email || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.insuranceDetails.phoneNumber\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.insurance.phoneNumber || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                                <div className={classes.cardRow}>\r\n                                    <div className={classes.rowLabel}>\r\n                                        {t(\"systemsModule.insuranceDetails.extension\")}\r\n                                    </div>\r\n                                    <div className={classes.rowData}>\r\n                                        { systemData.insurance.extension || t(\"general.noData\") }\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </Collapse>\r\n      \r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        borderRadius: '5px',\r\n        margin: '10px',\r\n        padding: '10px'\r\n    },\r\n    grid: {\r\n        padding: '10px',\r\n    },\r\n    gridItem: {\r\n        display: 'flex',\r\n        margin: '10px 0'\r\n    },\r\n    fieldContainer: {\r\n        padding: '10px',\r\n        margin : '15px 0', \r\n        height: '60px',\r\n    },\r\n    label: {\r\n        padding: '5px 10px',\r\n        borderRadius: '5px 5px 0px 0',\r\n        background: 'rgba(0,0,0,0.3)',\r\n        color: 'white',\r\n        width: 'fit-content',\r\n        fontSize: '13px'\r\n    },\r\n    fieldData: {\r\n        padding: '15px 20px',\r\n        width: '200px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '0 5px 5px 5px',\r\n        color: 'white'\r\n    },\r\n    card: {\r\n        margin: '10px 0px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '5px',\r\n        padding: '10px',\r\n        width: '100%'\r\n    },\r\n    cardTitle: {\r\n        color: 'white',\r\n        fontSize: '20px',\r\n        padding: '10px',\r\n        background: 'rgba(0,0,0,0.3)',\r\n        borderRadius: '5px',\r\n        \r\n    },\r\n    cardRow: {\r\n        padding: '10px',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'space-between',\r\n        color: 'white',\r\n        borderBottom: '1px solid rgba(255,255,255,0.2)'\r\n    },\r\n    rowLabel: {\r\n        padding: '3px 0',\r\n        fontSize: '14px',\r\n        color: 'rgba(255,255,255,0.6)'\r\n    },\r\n    rowData: {\r\n        fontSize: '16px'\r\n    },\r\n    headerRow: {\r\n        color: 'white',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        padding: '0px 10px 10px 10px',\r\n        fontSize: '20px',\r\n        borderBottom: '1px solid rgba(255,255,255,0.2)'\r\n    },\r\n    iconBtn: {\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.3)'\r\n        }\r\n    },\r\n    icon: {\r\n        color: 'white',\r\n        fontSize: '20px'\r\n    },\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\systems\\UpsertSystem.js",["513","514","515","516","517"],"import DateFnsUtils from '@date-io/date-fns';\r\nimport { Avatar, Backdrop, Button, Chip, Fade, FormControlLabel, FormHelperText, Grid, IconButton, makeStyles, MenuItem, Modal, Paper, Radio, RadioGroup, Select, TextField, useMediaQuery } from '@material-ui/core';\r\nimport { ClearRounded } from '@material-ui/icons';\r\nimport { DatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport clsx from 'clsx';\r\nimport heLocale from \"date-fns/locale/he\";\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { getFullName } from '../../../api/genericApi';\r\nimport { getAssetsSuggestions } from '../../../api/systemsApi';\r\nimport { createUserOptions } from '../../../api/userApi';\r\nimport { AuthContext } from '../../../context/AuthContext';\r\nimport { LanguageContext } from '../../../context/LanguageContext';\r\nimport { UserItem } from '../../user/UserItem';\r\n\r\n\r\n\r\n\r\nexport const UpsertSystem = ({ handleClose, handleSave, handleUpdate, systemId, data }) => {\r\n    const classes = useStyles();\r\n    const { lang } = useContext(LanguageContext);\r\n    const { t } = useTranslation();\r\n    const [ mode, setMode ] = useState(handleUpdate ? 'update' : 'create')\r\n    const [ errors, setErrors ] = useState([]);\r\n    const [ assets, setAssets ] = useState([]);\r\n    const [ userList, setUserList ] = useState([]);\r\n    const [ details, setDetails ] = useState({\r\n        name: '',\r\n        asset: '',\r\n        owner: '',\r\n        linkedUsers: []\r\n    });\r\n    const [ addData, setAddData ] = useState(data || {\r\n        general: {\r\n            location: '',\r\n            manufacturingYear: '',\r\n            SID: '',\r\n        },\r\n        manufacturer: {\r\n            name: '',\r\n            contactName: '',\r\n            email: '',\r\n            phoneNumber: '',\r\n            extension: '', \r\n        },\r\n        supplier: {\r\n            name: '',\r\n            contactName: '',\r\n            email: '',\r\n            phoneNumber: '',\r\n            extension: '',\r\n        },\r\n        insurance: {\r\n            name: '',\r\n            contanctName: '',\r\n            email: '',\r\n            phoneNumber: '',\r\n            extension: '',\r\n            expiryDate: null,\r\n        },\r\n        warranty: {\r\n            issuer: '',\r\n            expiryDate: null\r\n        }\r\n    })\r\n\r\n    const validateFields = () => {\r\n        return new Promise((resolve,reject) => {\r\n            let errList = [];\r\n            if (handleUpdate) resolve(true);\r\n            if (!details.owner) {\r\n                errList.push({ field: 'owner', text: t(\"errors.isRequired\")})\r\n            }\r\n            if (!details.asset) {\r\n                errList.push({ field: 'asset', text: t(\"errors.isRequired\")})\r\n            }\r\n            if (!details.name) {\r\n                errList.push({ field: 'name', text: t(\"errors.isRequired\")})\r\n            }\r\n            \r\n            if (errList.length) {\r\n                setErrors(errList);\r\n                resolve(false);\r\n            };\r\n            resolve(true);\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        createUserOptions()\r\n        .then(data => {\r\n            setUserList(data);\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        getAssetsSuggestions()\r\n        .then(data => {\r\n            if (data.length){\r\n                console.log(data)\r\n                setAssets(data);\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    const handleConfirm = () => {\r\n        validateFields()\r\n        .then(res => {\r\n            if (res) {\r\n                if (mode === 'update') {\r\n                    handleUpdate({system: systemId, data: addData});\r\n                    return;\r\n                }\r\n                handleSave({ ...details, data: addData});\r\n                return;\r\n            };\r\n        })      \r\n    }\r\n\r\n    const handleChangeAddData = obj => event => {\r\n        setAddData({\r\n            ...addData,\r\n            [obj.type]: {\r\n                ...addData[obj.type],\r\n                [obj.field]: event.target.value\r\n            }\r\n        })\r\n    };\r\n\r\n    const handleChange = field => event => {\r\n        console.log(event.target.value)\r\n        setDetails({\r\n            ...details,\r\n            [field]: event.target.value\r\n        })\r\n        if (errors.length) {\r\n            setErrors(errors.filter(err => err.field !== field))\r\n        }\r\n    }\r\n\r\n    const handleChangeMultiple = (event) => {\r\n        setDetails({...details, \r\n            linkedUsers: event.target.value\r\n        });\r\n    };\r\n\r\n    const handleLinkedRemove = (linkedUser) => event => {\r\n        event.stopPropagation();\r\n        console.log('clicked')\r\n        setDetails({ ...details, \r\n            linkedUsers: details.linkedUsers.filter(lu => lu !== linkedUser)\r\n        })\r\n        \r\n    }\r\n\r\n    const handleChangeInsuranceExpiry = date => {\r\n        setAddData({\r\n            ...addData,\r\n            insurance: {\r\n                ...addData.insurance,\r\n                expiryDate: date\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleChangeWarrantyExpiry = date => {\r\n        setAddData({\r\n            ...addData,\r\n            warranty: {\r\n                ...addData.warranty,\r\n                expiryDate: date\r\n            }\r\n        })\r\n    }\r\n    \r\n    \r\n\r\n    return (\r\n        <Modal\r\n            open={true}\r\n            onClose={handleClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout: 300\r\n            }}\r\n            className={classes.modal}\r\n        >\r\n            <Fade in={true} timeout={300}>\r\n                <Grid container justify='center' alignItems='center' style={{ outline: '0'}}>\r\n                    <Grid item xs={12} sm={10} md={8} lg={8} xl={6} className={classes.gridCont}>\r\n                        <Paper\r\n                            elevation={6}\r\n                            className={classes.paper}\r\n                            style={{ direction: lang.dir }}\r\n                        >\r\n                            <Grid container>\r\n                                <Grid item xs={12} className={classes.headerRow}>\r\n                                    <div className={classes.title}>\r\n                                        {mode === 'update' ? t(\"systemsModule.updateSystemDetails\") : t(\"systemsModule.createSystem\")}\r\n                                    </div>\r\n                                    <div className={classes.close}>\r\n                                        <IconButton\r\n                                            className={classes.iconBtn}\r\n                                            onClick={handleClose}\r\n                                        >\r\n                                            <ClearRounded className={classes.icon}/>\r\n                                        </IconButton>\r\n                                    </div>\r\n                                </Grid>\r\n                                {\r\n                                    mode === 'create' &&\r\n                                    <React.Fragment>\r\n                                        <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.section}>\r\n                                            <Grid item xs={12}>\r\n                                                <div className={classes.sectionTitle}>\r\n                                                    {t(\"systemsModule.generalDetails\")}\r\n                                                </div>\r\n                                            </Grid>\r\n                                            <Grid item xs={12} className={classes.fields}>\r\n                                                <Grid container justify='flex-start'>\r\n                                                    <Grid item xs={12} className={classes.textContainer}>\r\n                                                        <TextField\r\n                                                            variant={\"outlined\"}\r\n                                                            label={t(`systemsModule.systemName`)}\r\n                                                            error={ errors.filter(e => e.field === `name`).length > 0 }\r\n                                                            value={ details.name }\r\n                                                            onChange={handleChange('name')}\r\n                                                            className={classes.textField}\r\n                                                            size={'medium'}\r\n                                                            helperText={ errors.filter(e => e.field === `name`).length > 0 ? t(\"errors.isRequired\"): null }\r\n                                                        />\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6} md={6} lg={6} xl={6} className={classes.section}>\r\n                                            <Grid item xs={12}>\r\n                                                <div className={classes.sectionTitle}>\r\n                                                    {t(\"systemsModule.owningAsset\")}\r\n                                                </div>\r\n                                            </Grid>\r\n                                            <Grid item xs={12} className={classes.fields}>\r\n                                                <Grid container justify='flex-start'>\r\n                                                    <Grid item xs={12} className={classes.textContainer}>\r\n                                                    <Select\r\n                                                        variant={\"outlined\"}\r\n                                                        error={ errors.filter(e => e.field === `asset`).length > 0 }\r\n                                                        value={ details.asset }\r\n                                                        onChange={handleChange(`asset`)}\r\n                                                        className={classes.selectInput}\r\n                                                        MenuProps={{\r\n                                                            anchorOrigin: {\r\n                                                                vertical: \"bottom\",\r\n                                                                horizontal: \"center\",\r\n                                                            },\r\n                                                            transformOrigin: {\r\n                                                                vertical: \"top\",\r\n                                                                horizontal: \"center\",\r\n                                                            },\r\n                                                            getContentAnchorEl: null,\r\n                                                            disablePortal: true,\r\n                                                            classes: {\r\n                                                                paper: classes.menupaper,\r\n                                                        \r\n                                                            }\r\n                                                        }}\r\n                                                        \r\n                                                    >\r\n                                                        {\r\n                                                            assets.map((asset, i) => \r\n                                                                <MenuItem \r\n                                                                    key={i}\r\n                                                                    value={asset.value}\r\n                                                                    style={{ direction: lang.dir }}\r\n                                                                    className={classes.menuitem}\r\n                                                                >\r\n                                                                    {asset.text}\r\n                                                                </MenuItem>\r\n                                                            )\r\n                                                        }\r\n                                                    </Select>\r\n                                                    {\r\n                                                        errors.filter(e => e.field === 'asset').length > 0 &&\r\n                                                        <FormHelperText style={{ color: '#f44336', marginRight: '15px'}}>{t(\"errors.isRequired\")}</FormHelperText>\r\n                                                    }\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6} md={6} lg={4} xl={4}  className={classes.section}>\r\n                                            <Grid item xs={12}>\r\n                                                <div className={classes.sectionTitle}>\r\n                                                    {t(\"systemsModule.systemOwner\")}\r\n                                                </div>\r\n                                            </Grid>\r\n                                            <Grid item xs={12} className={classes.fields}>\r\n                                                <Grid item xs={12} className={classes.textContainer}>\r\n                                                    <Select\r\n                                                        variant={\"outlined\"}\r\n                                                        error={ errors.filter(e => e.field === `owner`).length > 0 }\r\n                                                        value={ details.owner }\r\n                                                        onChange={handleChange(`owner`)}\r\n                                                        className={classes.selectInput}\r\n                                                        MenuProps={{\r\n                                                            anchorOrigin: {\r\n                                                                vertical: \"bottom\",\r\n                                                                horizontal: \"center\",\r\n                                                            },\r\n                                                            transformOrigin: {\r\n                                                                vertical: \"top\",\r\n                                                                horizontal: \"center\",\r\n                                                            },\r\n                                                            getContentAnchorEl: null,\r\n                                                            disablePortal: true,\r\n                                                            classes: {\r\n                                                                paper: classes.menupaper,\r\n                                                        \r\n                                                            }\r\n                                                        }}\r\n                                                        renderValue={(selected) => {\r\n                                                            let user = userList.find( f => f._id === selected);\r\n                                                            return (\r\n                                                                \r\n                                                                    <Chip\r\n                                                                        size={'medium'}\r\n                                                                        avatar={<Avatar style={{ height: '40px', width: '40px'}} src={user.avatar} />}\r\n                                                                        label={getFullName(user)}\r\n                                                                        className={classes.chip}\r\n                                                                        \r\n                                                                    />\r\n                                                            \r\n                                                            )\r\n                                                        }}\r\n                                                    >\r\n                                                        {\r\n                                                            userList.map((user, i) => \r\n                                                                <MenuItem \r\n                                                                    key={i}\r\n                                                                    value={user.value}\r\n                                                                    style={{ direction: lang.dir }}\r\n                                                                    className={classes.menuitem}\r\n                                                                >\r\n                                                                    <div className={classes.userCont}>\r\n                                                                        <UserItem\r\n                                                                            showName\r\n                                                                            user={user}\r\n                                                                            avatarSize={40}\r\n                                                                            size={13}\r\n                                                                        />\r\n                                                                    </div>\r\n                                                                    \r\n                                                                </MenuItem>\r\n                                                            )\r\n                                                        }\r\n                                                    </Select>\r\n                                                    {\r\n                                                        errors.filter(e => e.field === 'owner').length > 0 &&\r\n                                                        <FormHelperText style={{ color: '#f44336', marginRight: '15px'}}>{t(\"errors.isRequired\")}</FormHelperText>\r\n                                                    }\r\n                                                    \r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6} md={6} lg={7} xl={7} className={classes.section}>\r\n                                        <Grid item xs={12}>\r\n                                            <div className={classes.sectionTitle}>\r\n                                                {t(\"systemsModule.linkedUsers\")}\r\n                                            </div>\r\n                                        </Grid>\r\n                                        <Grid item xs={12} className={classes.fields}>\r\n                                            <Grid item xs={12} className={classes.textContainer}>\r\n                                            <Select\r\n                                                variant={\"outlined\"}\r\n                                                multiple\r\n                                                value={details.linkedUsers}\r\n                                                onChange={handleChangeMultiple}\r\n                                                className={classes.selectInput}\r\n                                                MenuProps={{\r\n                                                    classes: {\r\n                                                        paper: classes.menupaper,\r\n                                                \r\n                                                    },\r\n                                                    anchorOrigin: {\r\n                                                        vertical: \"bottom\",\r\n                                                        horizontal: \"center\",\r\n                                                    },\r\n                                                    transformOrigin: {\r\n                                                        vertical: \"top\",\r\n                                                        horizontal: \"center\",\r\n                                                    },\r\n                                                    getContentAnchorEl: null,\r\n                                                    disablePortal: true,\r\n                                                    classes: {\r\n                                                        paper: classes.menupaper,\r\n                                    \r\n                                                    }\r\n                                                }}\r\n                                                renderValue={(selected) => (\r\n                                                    <div className={classes.chips}>\r\n                                                    {\r\n                                                        selected.map((value) => {\r\n                                                            let user = userList.find( f => f._id === value);\r\n                                                            return (\r\n                                                                <div className={classes.chipsCont}>\r\n                                                                    <Chip\r\n                                                                        clickable\r\n                                                                        size={'medium'}\r\n                                                                        avatar={<Avatar style={{ height: '40px', width: '40px'}} src={user.avatar} />}\r\n                                                                        label={getFullName(user)}\r\n                                                                        onDelete={handleLinkedRemove(value)}\r\n                                                                        deleteIcon={<ClearRounded className={classes.removeIcon}/>}\r\n                                                                        onMouseDown={e => e.stopPropagation()}\r\n                                                                        className={classes.chip}\r\n                                                                    />\r\n                                                                </div>\r\n                                                            )\r\n\r\n                                                            \r\n                                                        })\r\n                                                    }\r\n                                                    </div>\r\n                                                )}\r\n                                    \r\n                                                >\r\n                                                {\r\n                                                        userList.map((user, i) => \r\n                                                            <MenuItem \r\n                                                                key={i}\r\n                                                                value={user.value}\r\n                                                                style={{ direction: lang.dir }}\r\n                                                                className={classes.menuitem}\r\n                                                            >\r\n                                                                <div className={classes.userCont}>\r\n                                                                    <UserItem\r\n                                                                        showName\r\n                                                                        user={user}\r\n                                                                        avatarSize={40}\r\n                                                                        size={14}\r\n                                                                    />\r\n                                                                </div>\r\n                                                                \r\n                                                            </MenuItem>\r\n                                                        )\r\n                                                    }\r\n                                                </Select>\r\n                                                \r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    </React.Fragment>\r\n                                }\r\n                                <Grid item xs={12} className={classes.section}>\r\n                                    <Grid item xs={4}>\r\n                                        <div \r\n                                            className={classes.sectionTitle}\r\n                                        >\r\n                                            {t(\"systemsModule.additionalDetails\")}\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid container className={classes.fields}>\r\n                                        <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                            <TextField\r\n                                                variant={\"outlined\"}\r\n                                                label={t(`systemsModule.location`)}\r\n                                                value={ addData.general.location }\r\n                                                onChange={handleChangeAddData({ type: 'general', field: 'location'})}\r\n                                                className={classes.textField}\r\n                                                size={'medium'}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                            <TextField\r\n                                                variant={\"outlined\"}\r\n                                                label={t(`systemsModule.manufacturingYear`)}\r\n                                                value={ addData.general.manufacturingYear }\r\n                                                onChange={handleChangeAddData({ type: 'general', field: 'manufacturingYear'})}\r\n                                                className={classes.textField}\r\n                                                size={'medium'}\r\n\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                            <TextField\r\n                                                variant={\"outlined\"}\r\n                                                label={t(`systemsModule.SID`)}\r\n                                                value={ addData.general.SID }\r\n                                                onChange={handleChangeAddData({ type: 'general', field: 'SID'})}\r\n                                                className={classes.textField}\r\n                                                size={'medium'}\r\n                                            />\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} className={classes.section}>\r\n                                    <Grid item xs={4}>\r\n                                        <div \r\n                                            className={classes.sectionTitle}\r\n                                        >\r\n                                            {t(\"systemsModule.manufacturer\")}\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid container className={classes.fields}>\r\n                                        <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                            <TextField\r\n                                                variant={\"outlined\"}\r\n                                                label={t(`systemsModule.manufacturerDetails.name`)}\r\n                                                value={ addData.manufacturer.name }\r\n                                                onChange={handleChangeAddData({ type: 'manufacturer', field: 'name'})}\r\n                                                className={classes.textField}\r\n                                                size={'medium'}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                            <TextField\r\n                                                variant={\"outlined\"}\r\n                                                label={t(`systemsModule.manufacturerDetails.contactName`)}\r\n                                                value={ addData.manufacturer.contactName }\r\n                                                onChange={handleChangeAddData({ type: 'manufacturer', field: 'contactName'})}\r\n                                                className={classes.textField}\r\n                                                size={'medium'}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                            <TextField\r\n                                                variant={\"outlined\"}\r\n                                                label={t(`systemsModule.manufacturerDetails.email`)}\r\n                                                value={  addData.manufacturer.email }\r\n                                                onChange={handleChangeAddData({ type: 'manufacturer', field: 'email'})}\r\n                                                className={classes.textField}\r\n                                                size={'medium'}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                            <TextField\r\n                                                variant={\"outlined\"}\r\n                                                label={t(`systemsModule.manufacturerDetails.phoneNumber`)}\r\n                                                value={ addData.manufacturer.phoneNumber }\r\n                                                onChange={handleChangeAddData({ type: 'manufacturer', field: 'phoneNumber'})}\r\n                                                className={classes.textField}\r\n                                                size={'medium'}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                            <TextField\r\n                                                variant={\"outlined\"}\r\n                                                label={t(`systemsModule.manufacturerDetails.extension`)}\r\n                                                value={ addData.manufacturer.extension }\r\n                                                onChange={handleChangeAddData({ type: 'manufacturer', field: 'extension'})}\r\n                                                className={classes.textField}\r\n                                                size={'medium'}\r\n                                            />\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} className={classes.section}>\r\n                                    <Grid item xs={4}>\r\n                                        <div \r\n                                            className={classes.sectionTitle}\r\n                                        >\r\n                                            {t(\"systemsModule.supplier\")}\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid container className={classes.fields}>\r\n                                        <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                            <TextField\r\n                                                variant={\"outlined\"}\r\n                                                label={t(`systemsModule.supplierDetails.name`)}\r\n                                                value={ addData.supplier.name }\r\n                                                onChange={handleChangeAddData({ type: 'supplier', field: 'name'})}\r\n                                                className={classes.textField}\r\n                                                size={'medium'}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                            <TextField\r\n                                                variant={\"outlined\"}\r\n                                                label={t(`systemsModule.supplierDetails.contactName`)}\r\n                                                value={ addData.supplier.contactName }\r\n                                                onChange={handleChangeAddData({ type: 'supplier', field: 'contactName'})}\r\n                                                className={classes.textField}\r\n                                                size={'medium'}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                            <TextField\r\n                                                variant={\"outlined\"}\r\n                                                label={t(`systemsModule.supplierDetails.email`)}\r\n                                                value={  addData.supplier.email }\r\n                                                onChange={handleChangeAddData({ type: 'supplier', field: 'email'})}\r\n                                                className={classes.textField}\r\n                                                size={'medium'}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                            <TextField\r\n                                                variant={\"outlined\"}\r\n                                                label={t(`systemsModule.supplierDetails.phoneNumber`)}\r\n                                                value={ addData.supplier.phoneNumber }\r\n                                                onChange={handleChangeAddData({ type: 'supplier', field: 'phoneNumber'})}\r\n                                                className={classes.textField}\r\n                                                size={'medium'}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                            <TextField\r\n                                                variant={\"outlined\"}\r\n                                                label={t(`systemsModule.supplierDetails.extension`)}\r\n                                                value={ addData.supplier.extension }\r\n                                                onChange={handleChangeAddData({ type: 'supplier', field: 'extension'})}\r\n                                                className={classes.textField}\r\n                                                size={'medium'}\r\n                                            />\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} className={classes.section}>\r\n                                    <Grid item xs={4}>\r\n                                        <div \r\n                                            className={classes.sectionTitle}\r\n                                        >\r\n                                            {t(\"systemsModule.insurance\")}\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid container className={classes.fields}>\r\n                                        <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                            <TextField\r\n                                                variant={\"outlined\"}\r\n                                                label={t(`systemsModule.insuranceDetails.name`)}\r\n                                                value={ addData.insurance.name }\r\n                                                onChange={handleChangeAddData({ type: 'insurance', field: 'name'})}\r\n                                                className={classes.textField}\r\n                                                size={'medium'}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                            <TextField\r\n                                                variant={\"outlined\"}\r\n                                                label={t(`systemsModule.insuranceDetails.contactName`)}\r\n                                                value={ addData.insurance.contactName }\r\n                                                onChange={handleChangeAddData({ type: 'insurance', field: 'contactName'})}\r\n                                                className={classes.textField}\r\n                                                size={'medium'}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                            <TextField\r\n                                                variant={\"outlined\"}\r\n                                                label={t(`systemsModule.insuranceDetails.email`)}\r\n                                                value={  addData.insurance.email }\r\n                                                onChange={handleChangeAddData({ type: 'insurance', field: 'email'})}\r\n                                                className={classes.textField}\r\n                                                size={'medium'}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                            <TextField\r\n                                                variant={\"outlined\"}\r\n                                                label={t(`systemsModule.insuranceDetails.phoneNumber`)}\r\n                                                value={ addData.insurance.phoneNumber }\r\n                                                onChange={handleChangeAddData({ type: 'insurance', field: 'phoneNumber'})}\r\n                                                className={classes.textField}\r\n                                                size={'medium'}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                            <TextField\r\n                                                variant={\"outlined\"}\r\n                                                label={t(`systemsModule.insuranceDetails.extension`)}\r\n                                                value={ addData.insurance.extension }\r\n                                                onChange={handleChangeAddData({ type: 'insurance', field: 'extension'})}\r\n                                                className={classes.textField}\r\n                                                size={'medium'}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                            \r\n                                            <MuiPickersUtilsProvider utils={DateFnsUtils} locale={heLocale}>\r\n                                                <DatePicker\r\n                                                    \r\n                                                    format=\"dd/MM/yyyy\"\r\n                                                    label={t(`systemsModule.insuranceDetails.expiryDate`)}\r\n                                                    value={addData.insurance.expiryDate}\r\n                                                    onChange={handleChangeInsuranceExpiry}\r\n                                                    inputVariant={\"outlined\"}\r\n                                                    className={classes.textField}\r\n                                                    autoOk={true}\r\n                                                    disablePast={true}\r\n                                                \r\n                                                />\r\n                                            </MuiPickersUtilsProvider>\r\n                                        </Grid>\r\n                                        \r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} className={classes.section}>\r\n                                    <Grid item xs={4}>\r\n                                        <div \r\n                                            className={classes.sectionTitle}\r\n                                        >\r\n                                            {t(\"systemsModule.warranty\")}\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid container className={classes.fields}>\r\n                                        <Grid item xs={12} sm={6} md={6} lg={8} xl={8} className={classes.textContainer}>\r\n                                            <RadioGroup\r\n                                                value={addData.warranty.issuer}\r\n                                                onChange={handleChangeAddData({ type: 'warranty', field: 'issuer'})}\r\n                                                className={classes.radioGroup}\r\n                                            >\r\n                                                <FormControlLabel value='supplier' control={<Radio color={'white'} className={classes.radioBtn}/>} label={t(\"systemsModule.warrantyDetails.supplier\")}/>\r\n                                                <FormControlLabel value='manufacturer' control={<Radio color={'white'} className={classes.radioBtn} />} label={t(\"systemsModule.warrantyDetails.manufacturer\")}/>\r\n                                                <FormControlLabel value='' control={<Radio color={'white'} className={classes.radioBtn} />} label={t(\"systemsModule.warrantyDetails.nowarranty\")}/>\r\n                                            </RadioGroup>\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer}>\r\n                                            <MuiPickersUtilsProvider utils={DateFnsUtils} locale={heLocale}>\r\n                                                <DatePicker\r\n                                                    format=\"dd/MM/yyyy\"\r\n                                                    label={t(`systemsModule.warrantyDetails.expiryDate`)}\r\n                                                    value={addData.warranty.expiryDate}\r\n                                                    onChange={handleChangeWarrantyExpiry}\r\n                                                    inputVariant={\"outlined\"}\r\n                                                    className={classes.textField}\r\n                                                    autoOk={true}\r\n                                                    disablePast={true}\r\n                                                />\r\n                                            </MuiPickersUtilsProvider>\r\n                                        </Grid>\r\n                                        \r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} className={classes.controls}>\r\n                                    <Button\r\n                                        className={clsx(classes.control, classes.save)}\r\n                                        onClick={handleConfirm}\r\n                                    >\r\n                                        {t(\"controls.confirm\")}\r\n                                    </Button>\r\n                                    <Button\r\n                                        className={clsx(classes.control, classes.cancel)}\r\n                                        onClick={handleClose}\r\n                                    >\r\n                                        {t(\"controls.cancel\")}\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backdropFilter: 'blur(10px)'   \r\n    },\r\n    gridCont: {\r\n        height: 'fit-content'\r\n    },\r\n    paper: {\r\n        background: 'rgba(0,0,0,0.4)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '10px',\r\n        padding: '10px 20px',\r\n        overflowY: 'overlay',\r\n        height: '80vh',\r\n        '&:focus': {\r\n            outline: 'none'\r\n        },\r\n        [theme.breakpoints.down('sm')]: {\r\n            height: '81vh',\r\n            borderRadius: '0',\r\n            top: 0,\r\n            border: '0',\r\n            padding: '10px 5px'\r\n        },\r\n    },\r\n    headerRow: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        width: '100%',      \r\n        borderBottom: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    title: {\r\n        color: 'white',\r\n        padding: '20px 10px 10px',\r\n        fontSize: '20px',\r\n        whiteSpace: 'nowrap'\r\n    },\r\n    iconBtn: {\r\n        margin: '10px',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.3)'\r\n        }\r\n    },\r\n    icon: {\r\n        color: 'white',\r\n        fontSize: '20px'\r\n    },\r\n    section: {\r\n        margin: '10px 5px',\r\n        \r\n    },\r\n    sectionTitle: {\r\n        color: 'white',\r\n        fontSize: '16px',\r\n        padding: '10px 20px',\r\n        width: 'fit-content',\r\n        borderRadius: '10px 10px 0 0',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        whiteSpace: 'nowrap'\r\n    },\r\n    fields: {\r\n        padding: '10px 20px',\r\n        borderRadius: '0px 10px 10px 10px',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        [theme.breakpoints.down('sm')]: {\r\n            padding: '10px',\r\n        }\r\n    },\r\n    textContainer: {\r\n        padding: '5px',\r\n    },\r\n    textField: {\r\n        width: '100%',\r\n        '& fieldset': {\r\n            borderRadius: '5px',\r\n        },  \r\n    },\r\n    selectInput: {\r\n        width: '100%',\r\n        '& fieldset': {\r\n            borderRadius: '5px',\r\n        }   \r\n    },\r\n    menupaper: {\r\n        background: 'rgba(0,0,0,0.8)',\r\n        backdropFilter: 'blur(10px)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        marginRight: '7px',\r\n        marginLeft: '-5px',\r\n        maxHeight: '200px',\r\n        overflowY: 'auto',\r\n\r\n    },\r\n    menuitem: {\r\n        color: 'white',\r\n        width: '100%',\r\n        '&:hover': {\r\n            background: 'rgba(255,255,255,0.1)'\r\n        }\r\n    },\r\n    controls: {\r\n        borderTop: '1px solid rgba(255,255,255,0.2)',\r\n        padding: '10px 0',\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    control: {\r\n        width: '30%',\r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        fontSize: '16px',\r\n        margin: '5px',\r\n        padding: '5px 30px',\r\n        borderRadius: '30px',\r\n        color: 'white',\r\n       \r\n    },\r\n    save: {\r\n        background: 'rgba(0,0,0,0.2)', \r\n        '&:hover': {\r\n            background: 'black'\r\n        },\r\n        '&:disabled': {\r\n            color: 'rgba(255,255,255,0.3)'\r\n        }\r\n    },\r\n    cancel: {\r\n        '&:hover': { \r\n            boxShadow: 'inset rgba(255,255,255,0.3) 0 0 2px 1px'\r\n        }\r\n    },\r\n    chips: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap'\r\n    },\r\n    chip: {\r\n        height: '50px',\r\n        fontSize: '14px',\r\n        borderRadius: '50px',\r\n        display: 'flex',\r\n        justifyContent: 'flex-start',\r\n        color: 'white',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        background: 'rgba(0,0,0,0.6)',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.6)',\r\n            boxShadow: 'inset lightgrey 0px 0px 1px 1px'\r\n        } \r\n    },\r\n    userCont: {\r\n        height: 'fit-content',\r\n        padding: 0,\r\n        margin: 0,\r\n        margin: '5px 0',\r\n        \r\n    },\r\n    chipsCont: {\r\n        height: 'fit-content',\r\n        padding: 0,\r\n        margin: '3px',\r\n        borderRadius: '50px',\r\n        background: 'rgba(255,255,255,0.1)',\r\n        boxShadow: 'inset rgba(0,0,0,0.5) 0px 0px 2px 1px',\r\n        display: 'flex',\r\n        jutifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        \r\n    },\r\n    removeIcon: {\r\n        color: 'rgba(255,255,255,0.2)',\r\n        padding: '5px',\r\n        marginRight: '5px',\r\n        borderRadius: '50px',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.8)',\r\n            color: 'white',\r\n        }\r\n    },\r\n    radioGroup: {\r\n        color: 'white',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignitems: 'center',\r\n        \r\n    },\r\n    radioBtn: {\r\n        color: 'white',\r\n        padding: '15px'\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\UpsertFault.js",["518","519","520","521","522"],"import { Avatar, Backdrop, Button, Chip, Fade, FormHelperText, Grid, IconButton, LinearProgress, makeStyles, MenuItem, Modal, Paper, Select, TextField, useMediaQuery } from '@material-ui/core';\r\nimport { ClearRounded } from '@material-ui/icons';\r\nimport DeleteOutlineRoundedIcon from '@material-ui/icons/DeleteOutlineRounded';\r\nimport clsx from 'clsx';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { getFault } from \"../../../api/faultsApi\";\r\nimport { getFullName } from '../../../api/genericApi';\r\nimport { createSystemMenuOptions, getAssetsSuggestions, getSystemsByAsset } from '../../../api/systemsApi';\r\nimport { createUserOptions } from '../../../api/userApi';\r\nimport { AuthContext } from '../../../context/AuthContext';\r\nimport { LanguageContext } from '../../../context/LanguageContext';\r\nimport { UserItem } from '../../user/UserItem';\r\n\r\n\r\n\r\n\r\nexport const UpsertFault = ({ handleClose, handleSave, handleUpdate, faultId}) => {\r\n    const classes = useStyles();\r\n    const { lang } = useContext(LanguageContext);\r\n    const { auth } = useContext(AuthContext);\r\n    const { t } = useTranslation();\r\n    const [ mode, setMode ] = useState(handleUpdate ? 'update' : 'create')\r\n    const [ errors, setErrors ] = useState([]);\r\n    const [ assets, setAssets ] = useState([]);\r\n    const [ systems, setSystems ] = useState([]);\r\n    const [ userList, setUserList ] = useState([]);\r\n    const [ isLoading, setIsLoading ] = useState(true);\r\n    const [ details, setDetails ] = useState({\r\n        tenant: auth.user.tenant,\r\n        title: '',\r\n        description: '',\r\n        asset: '',\r\n        system: '',\r\n        owner: '',\r\n        following: [],\r\n        createdBy: auth.user._id,\r\n        images: [],\r\n        uploadedImages: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        console.log(details)\r\n    }, [details])\r\n\r\n    useEffect(() => {\r\n        createUserOptions()\r\n        .then(data => {\r\n            setUserList(data);\r\n            return getAssetsSuggestions()\r\n        })\r\n        .then(data => {\r\n            setAssets(data); \r\n            if (!faultId) {\r\n                setIsLoading(false);\r\n                return;\r\n            }\r\n            getFault(faultId, true)        \r\n            .then(data => {\r\n                return Promise.all([loadSystemOptions(data.asset), Promise.resolve(data)]) \r\n            })\r\n            .then(res => {\r\n               let data = res[1];\r\n               if (!data) return;\r\n               setDetails({ ...data, images: [], uploadedImages: data.images});\r\n            })\r\n            .finally(() => {\r\n                setIsLoading(false)\r\n            }); \r\n        }) \r\n    }, []);\r\n\r\n\r\n    const validateFields = () => {\r\n        return new Promise((resolve,reject) => {\r\n            let errList = [];\r\n            if (!details.owner) {\r\n                errList.push({ field: 'owner', text: t(\"errors.isRequired\")})\r\n            }\r\n            if (!details.asset) {\r\n                errList.push({ field: 'asset', text: t(\"errors.isRequired\")})\r\n            }\r\n            if (!details.system) {\r\n                errList.push({ field: 'system', text: t(\"errors.isRequired\")})\r\n            }\r\n            if (!details.title) {\r\n                errList.push({ field: 'title', text: t(\"errors.isRequired\")})\r\n            }\r\n            \r\n            if (errList.length) {\r\n                setErrors(errList);\r\n                resolve(false);\r\n            };\r\n            resolve(true);\r\n        })\r\n    }\r\n\r\n    const loadSystemOptions = async (assetId) => {\r\n        return getSystemsByAsset(assetId)\r\n        .then(systems => {\r\n            return createSystemMenuOptions(systems)\r\n        })\r\n        .then(data => {\r\n            setSystems(data);\r\n            return true;\r\n        })\r\n    };\r\n\r\n    const handleConfirm = () => {\r\n        validateFields()\r\n        .then(res => {\r\n            if (!res) return;\r\n            if (mode === 'update') {\r\n                handleUpdate(details)\r\n            } else \r\n                handleSave(details);\r\n            }\r\n        )      \r\n    }\r\n\r\n    const handleChange = field => async event => {\r\n        setDetails({\r\n            ...details,\r\n            [field]: event.target.value\r\n        })\r\n        if (field === 'asset'){\r\n            if (event.target.value) {\r\n                await loadSystemOptions(event.target.value)\r\n            } else {\r\n                setDetails({\r\n                    ...details,\r\n                    system: null\r\n                });\r\n                setSystems([]);\r\n            }\r\n            \r\n        }\r\n        if (errors.length) {\r\n            setErrors(errors.filter(err => err.field !== field))\r\n        }\r\n    }\r\n\r\n    const handleFileUpload = event => {\r\n        setDetails({\r\n            ...details,\r\n            images: event.target.files\r\n        })\r\n    }\r\n\r\n    const removeImage = i => event => {\r\n        let im = details.uploadedImages;\r\n        im.splice(i, 1);\r\n        setDetails({ ...details, uploadedImages: im})\r\n    }\r\n\r\n    return (\r\n        isLoading ? \r\n        <LinearProgress /> :\r\n        <Modal\r\n            open={true}\r\n            onClose={handleClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout: 500\r\n            }}\r\n            className={classes.modal}\r\n        >\r\n            <Fade in={true}>\r\n                <Grid container justify='center' alignItems='center' style={{ outline: '0'}}>\r\n                    <Grid item xs={12} sm={10} md={8} lg={8} xl={6} className={classes.gridCont}>\r\n                        <Paper\r\n                            elevation={6}\r\n                            className={classes.paper}\r\n                            style={{ direction: lang.dir }}\r\n                        >\r\n                            <Grid container>\r\n                                <Grid item xs={12} className={classes.headerRow}>\r\n                                    <div className={classes.title}>\r\n                                        {mode === 'update' ? t(\"faultsModule.upsert.updateFaultDetails\") : t(\"faultsModule.upsert.createFault\")}\r\n                                    </div>\r\n                                    <div className={classes.close}>\r\n                                        <IconButton\r\n                                            className={classes.iconBtn}\r\n                                            onClick={handleClose}\r\n                                        >\r\n                                            <ClearRounded className={classes.icon}/>\r\n                                        </IconButton>\r\n                                    </div>\r\n                                </Grid>                     \r\n                                <Grid item xs={12} sm={6} md={6} lg={6} xl={6} className={classes.section}>\r\n                                    <Grid item xs={12}>\r\n                                        <div className={classes.sectionTitle}>\r\n                                            {t(\"faultsModule.upsert.asset\")}\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} className={classes.fields}>\r\n                                        <Grid container justify='flex-start'>\r\n                                            <Grid item xs={12} className={classes.textContainer}>\r\n                                            <Select\r\n                                                variant={\"outlined\"}\r\n                                                error={ errors.filter(e => e.field === `asset`).length > 0 }\r\n                                                value={ details.asset }\r\n                                                onChange={handleChange(`asset`)}\r\n                                                className={classes.selectInput}\r\n                                                MenuProps={{\r\n                                                    anchorOrigin: {\r\n                                                        vertical: \"bottom\",\r\n                                                        horizontal: \"center\",\r\n                                                    },\r\n                                                    transformOrigin: {\r\n                                                        vertical: \"top\",\r\n                                                        horizontal: \"center\",\r\n                                                    },\r\n                                                    getContentAnchorEl: null,\r\n                                                    classes: {\r\n                                                        paper: classes.menupaper,\r\n                                                \r\n                                                    }\r\n                                                }}\r\n                                                \r\n                                            >\r\n                                                {\r\n                                                    assets.map((asset, i) => \r\n                                                        <MenuItem \r\n                                                            key={i}\r\n                                                            value={asset.value}\r\n                                                            style={{ direction: lang.dir }}\r\n                                                            className={classes.menuitem}\r\n                                                        >\r\n                                                            {asset.text}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }\r\n                                            </Select>\r\n                                            {\r\n                                                errors.filter(e => e.field === 'asset').length > 0 &&\r\n                                                <FormHelperText style={{ color: '#f44336', marginRight: '15px'}}>{t(\"errors.isRequired\")}</FormHelperText>\r\n                                            }\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6} md={4} lg={4} xl={4} className={classes.section}>\r\n                                    <Grid item xs={12}>\r\n                                        <div className={classes.sectionTitle}>\r\n                                            {t(\"faultsModule.upsert.system\")}\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} className={classes.fields}>\r\n                                        <Grid container justify='flex-start'>\r\n                                            <Grid item xs={12} className={classes.textContainer}>\r\n                                            <Select\r\n                                                variant={\"outlined\"}\r\n                                                error={ errors.filter(e => e.field === `system`).length > 0 }\r\n                                                value={ details.system }\r\n                                                onChange={handleChange(`system`)}\r\n                                                className={classes.selectInput}\r\n                                                MenuProps={{\r\n                                                    anchorOrigin: {\r\n                                                        vertical: \"bottom\",\r\n                                                        horizontal: \"center\",\r\n                                                    },\r\n                                                    transformOrigin: {\r\n                                                        vertical: \"top\",\r\n                                                        horizontal: \"center\",\r\n                                                    },\r\n                                                    getContentAnchorEl: null,\r\n                                                    classes: {\r\n                                                        paper: classes.menupaper,\r\n                                                \r\n                                                    }\r\n                                                }}\r\n                                                \r\n                                            >\r\n                                                {\r\n                                                    systems.map((system, i) => \r\n                                                        <MenuItem \r\n                                                            key={i}\r\n                                                            value={system.value}\r\n                                                            style={{ direction: lang.dir }}\r\n                                                            className={classes.menuitem}\r\n                                                        >\r\n                                                            {system.text}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }\r\n                                            </Select>\r\n                                            {\r\n                                                errors.filter(e => e.field === 'asset').length > 0 &&\r\n                                                <FormHelperText style={{ color: '#f44336', marginRight: '15px'}}>{t(\"errors.isRequired\")}</FormHelperText>\r\n                                            }\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} className={classes.section}>\r\n                                    <Grid item xs={12}>\r\n                                        <div className={classes.sectionTitle}>\r\n                                            {t(\"faultsModule.upsert.generalDetails\")}\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} className={classes.fields}>\r\n                                        <Grid container justify='flex-start'>\r\n                                            <Grid item xs={12} className={classes.textContainer}>\r\n                                                <TextField\r\n                                                    variant={\"outlined\"}\r\n                                                    label={t(`faultsModule.upsert.title`)}\r\n                                                    error={ errors.filter(e => e.field === `title`).length > 0 }\r\n                                                    value={ details.title }\r\n                                                    onChange={handleChange('title')}\r\n                                                    className={classes.textField}\r\n                                                    size={'medium'}\r\n                                                    helperText={ errors.filter(e => e.field === `title`).length > 0 ? t(\"errors.isRequired\") : `${60 - details.title.length} ${t(\"faultsModule.upsert.titleLimit\")}` }\r\n                                                    inputProps={{\r\n                                                        maxLength: 60\r\n                                                    }}\r\n                                                    FormHelperTextProps={{\r\n                                                        style: { color: errors.filter(e => e.field === `title`).length > 0 ? 'rgb(244, 67, 54)' : 'rgba(255,255,255,0.6)' }\r\n                                                    }}\r\n                                                    \r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={12} className={classes.textContainer}>\r\n                                                <TextField\r\n                                                    variant={\"outlined\"}\r\n                                                    label={t(`faultsModule.upsert.description`)}\r\n                                                    value={ details.description }\r\n                                                    onChange={handleChange('description')}\r\n                                                    className={classes.textField}\r\n                                                    size={'medium'}\r\n                                                    multiline={true}\r\n                                                    rows={7}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6} md={6} lg={4} xl={4}  className={classes.section}>\r\n                                    <Grid item xs={12}>\r\n                                        <div className={classes.sectionTitle}>\r\n                                            {t(\"faultsModule.upsert.faultOwner\")}\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} className={classes.fields}>\r\n                                        <Grid item xs={12} className={classes.textContainer}>\r\n                                            <Select\r\n                                                variant={\"outlined\"}\r\n                                                error={ errors.filter(e => e.field === `owner`).length > 0 }\r\n                                                value={ details.owner }\r\n                                                onChange={handleChange(`owner`)}\r\n                                                className={classes.selectInput}\r\n                                                MenuProps={{\r\n                                                    anchorOrigin: {\r\n                                                        vertical: \"bottom\",\r\n                                                        horizontal: \"center\",\r\n                                                    },\r\n                                                    transformOrigin: {\r\n                                                        vertical: \"top\",\r\n                                                        horizontal: \"center\",\r\n                                                    },\r\n                                                    getContentAnchorEl: null,\r\n                                                    classes: {\r\n                                                        paper: classes.menupaper,\r\n                                                \r\n                                                    }\r\n                                                }}\r\n                                                renderValue={(selected) => {\r\n                                                    let user = userList.find( f => f._id === selected);\r\n                                                    return (\r\n                                                        \r\n                                                            <Chip\r\n                                                                size={'medium'}\r\n                                                                avatar={<Avatar style={{ height: '40px', width: '40px'}} src={user.avatar} />}\r\n                                                                label={getFullName(user)}\r\n                                                                className={classes.chip}\r\n                                                                \r\n                                                            />\r\n                                                    \r\n                                                    )\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    userList.map((user, i) => \r\n                                                        <MenuItem \r\n                                                            key={i}\r\n                                                            value={user.value}\r\n                                                            style={{ direction: lang.dir }}\r\n                                                            className={classes.menuitem}\r\n                                                        >\r\n                                                            <div className={classes.userCont}>\r\n                                                                <UserItem\r\n                                                                    user={user}\r\n                                                                    avatarSize={40}\r\n                                                                    size={13}\r\n                                                                    showName\r\n                                                                />\r\n                                                            </div>\r\n                                                            \r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }\r\n                                            </Select>\r\n                                            {\r\n                                                errors.filter(e => e.field === 'owner').length > 0 &&\r\n                                                <FormHelperText style={{ color: '#f44336', marginRight: '15px'}}>{t(\"errors.isRequired\")}</FormHelperText>\r\n                                            }\r\n                                            \r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                \r\n                                <Grid item xs={12} md={6} className={classes.section}>\r\n                                            <Grid item xs={12}>\r\n                                                <div className={classes.sectionTitle}>\r\n                                                    {mode === 'create' ? t(\"faultsModule.upsert.faultImages\") : t(\"faultsModule.upsert.addFaultImages\")}\r\n                                                </div>\r\n                                            </Grid>\r\n                                            <Grid item xs={12} className={classes.fields}>\r\n                                                <Grid container justify='flex-start'>\r\n                                                    <Grid item xs={12} className={classes.textContainer}>\r\n                                                        <Button\r\n                                                            component={'label'}\r\n                                                            variant={'contained'}\r\n                                                            className={classes.uploadBtn}\r\n                                                        >\r\n                                                            { t(\"faultsModule.upsert.uploadImages\")}\r\n                                                            <input \r\n                                                                accepts='image/*'\r\n                                                                type='file'\r\n                                                                multiple\r\n                                                                onChange={handleFileUpload}\r\n                                                                hidden  \r\n                                                            />\r\n                                                        </Button>\r\n                                                        <span className={classes.filesUploaded}>\r\n                                                            {`${details.images.length} ${t(\"faultsModule.upsert.imagesSelected\")}` }\r\n                                                        </span>\r\n                                                    </Grid>\r\n                                                    {\r\n                                                        Boolean(details.uploadedImages.length) &&\r\n                                                        <React.Fragment>\r\n                                                            <Grid item xs={12} className={classes.uploadedImagesTitle}>\r\n                                                                {t(\"faultsModule.upsert.uploadedImages\")}\r\n                                                            </Grid>\r\n                                                            {\r\n                                                                details.uploadedImages.map((image, i) => \r\n                                                                    <Grid item xs={12} className={classes.imageRow} key={i}>\r\n                                                                        <img src={image} className={classes.previewImage} />\r\n                                                                        <IconButton     \r\n                                                                            onClick={removeImage(i)}\r\n                                                                            className={classes.removeImageBtn}\r\n                                                                        >\r\n                                                                            <DeleteOutlineRoundedIcon className={classes.removeImage}/>\r\n                                                                        </IconButton>\r\n                                                                    </Grid>\r\n                                                                )\r\n                                                            }\r\n                                                        </React.Fragment> \r\n                                                    } \r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                <Grid item xs={12} className={classes.controls}>\r\n                                    <Button\r\n                                        className={clsx(classes.control, classes.save)}\r\n                                        onClick={handleConfirm}\r\n                                    >\r\n                                        {t(\"controls.confirm\")}\r\n                                    </Button>\r\n                                    <Button\r\n                                        className={clsx(classes.control, classes.cancel)}\r\n                                        onClick={handleClose}\r\n                                    >\r\n                                        {t(\"controls.cancel\")}\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backdropFilter: 'blur(10px)'   \r\n    },\r\n    \r\n    gridCont: {\r\n        height: 'fit-content'\r\n    },\r\n    paper: {\r\n        background: 'rgba(0,0,0,0.4)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '10px',\r\n        padding: '10px 20px',\r\n        overflowY: 'overlay',\r\n        [theme.breakpoints.down('sm')]: {\r\n            height: '81vh',\r\n            top: 0,\r\n            borderRadius: '0',\r\n            border: '0',\r\n            padding: '10px 5px'\r\n        },\r\n        '&:focus': {\r\n            outline: 'none'\r\n        }\r\n    },\r\n    headerRow: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        width: '100%',      \r\n        borderBottom: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    title: {\r\n        color: 'white',\r\n        padding: '20px 10px 10px',\r\n        fontSize: '20px',\r\n        whiteSpace: 'nowrap'\r\n    },\r\n    iconBtn: {\r\n        margin: '10px',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.3)'\r\n        }\r\n    },\r\n    icon: {\r\n        color: 'white',\r\n        fontSize: '20px'\r\n    },\r\n    section: {\r\n        margin: '10px 5px',\r\n        \r\n    },\r\n    sectionTitle: {\r\n        color: 'white',\r\n        fontSize: '16px',\r\n        padding: '10px 20px',\r\n        width: 'fit-content',\r\n        borderRadius: '10px 10px 0 0',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        whiteSpace: 'nowrap'\r\n    },\r\n    fields: {\r\n        padding: '10px 20px',\r\n        borderRadius: '0px 10px 10px 10px',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        [theme.breakpoints.down('sm')]: {\r\n            padding: '10px',\r\n        }\r\n    },\r\n    textContainer: {\r\n        padding: '5px',\r\n    },\r\n    textField: {\r\n        width: '100%',\r\n        '& fieldset': {\r\n            borderRadius: '5px',\r\n        },  \r\n    },\r\n    selectInput: {\r\n        width: '100%',\r\n        '& fieldset': {\r\n            borderRadius: '5px',\r\n        }   \r\n    },\r\n    menupaper: {\r\n        background: 'rgba(0,0,0,0.8)',\r\n        backdropFilter: 'blur(10px)',\r\n        height: '200px',\r\n        overflowY: 'auto',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        marginRight: '7px',\r\n        marginLeft: '-5px'\r\n\r\n    },\r\n    menuitem: {\r\n        color: 'white',\r\n        width: '100%',\r\n        '&:hover': {\r\n            background: 'rgba(255,255,255,0.1)'\r\n        }\r\n    },\r\n    controls: {\r\n        borderTop: '1px solid rgba(255,255,255,0.2)',\r\n        padding: '10px 0',\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    control: {\r\n        width: '30%',\r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        fontSize: '16px',\r\n        margin: '5px',\r\n        padding: '5px 30px',\r\n        borderRadius: '30px',\r\n        color: 'white',\r\n       \r\n    },\r\n    save: {\r\n        background: 'rgba(0,0,0,0.2)', \r\n        '&:hover': {\r\n            background: 'black'\r\n        },\r\n        '&:disabled': {\r\n            color: 'rgba(255,255,255,0.3)'\r\n        }\r\n    },\r\n    cancel: {\r\n        '&:hover': { \r\n            boxShadow: 'inset rgba(255,255,255,0.3) 0 0 2px 1px'\r\n        }\r\n    },\r\n    chips: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap'\r\n    },\r\n    chip: {\r\n        height: '50px',\r\n        fontSize: '14px',\r\n        borderRadius: '50px',\r\n        display: 'flex',\r\n        justifyContent: 'flex-start',\r\n        color: 'white',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        background: 'rgba(0,0,0,0.6)',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.6)',\r\n            boxShadow: 'inset lightgrey 0px 0px 1px 1px'\r\n        } \r\n    },\r\n    userCont: {\r\n        height: 'fit-content',\r\n        padding: 0,\r\n        margin: 0,\r\n        margin: '5px 0',\r\n        \r\n    },\r\n    chipsCont: {\r\n        height: 'fit-content',\r\n        padding: 0,\r\n        margin: '3px',\r\n        borderRadius: '50px',\r\n        background: 'rgba(255,255,255,0.1)',\r\n        boxShadow: 'inset rgba(0,0,0,0.5) 0px 0px 2px 1px',\r\n        display: 'flex',\r\n        jutifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        \r\n    },\r\n    removeIcon: {\r\n        color: 'rgba(255,255,255,0.2)',\r\n        padding: '5px',\r\n        marginRight: '5px',\r\n        borderRadius: '50px',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.8)',\r\n            color: 'white',\r\n        }\r\n    },\r\n    radioGroup: {\r\n        color: 'white',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignitems: 'center',\r\n        \r\n    },\r\n    radioBtn: {\r\n        color: 'white',\r\n        padding: '15px'\r\n    },\r\n    filesUploaded: {\r\n        color: 'white',\r\n        padding: '0 15px'\r\n    },\r\n    uploadBtn: {\r\n        margin: '9px 0',\r\n        background: 'rgba(0,0,0,0.1)',\r\n        color: 'white',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '50px',\r\n        whiteSpace: 'nowrap',\r\n        '&:hover': {\r\n            boxShadow: 'inset white 0 0 2px 1px',\r\n            background: 'rgba(0,0,0,0.3)'\r\n        }\r\n    },\r\n    imageRow: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        padding: '10px 5px',\r\n        borderBottom: '1px solid rgba(255,255,255,0.2)'\r\n    },\r\n    previewImage: {\r\n        height: '50px',\r\n        width: '100px'\r\n    },\r\n    removeImageBtn: {\r\n        color: 'rgba(255,255,255,0.5)',\r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        '&:hover': {\r\n            color: 'white',\r\n            borderColor: 'white'\r\n        }\r\n    },\r\n    uploadedImagesTitle: {\r\n        color: 'white',\r\n        padding: '10px 5px',\r\n        borderBottom: '1px solid rgba(255,255,255,0.2)'\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\UpdateOwner.js",["523","524","525"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { Grid, makeStyles, Paper, FormControl, IconButton, useMediaQuery, Fade, Modal, Backdrop,Select, MenuItem, Button } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport ClearRoundedIcon from '@material-ui/icons/ClearRounded';\r\nimport { getUserList } from '../../api/userApi';\r\nimport clsx from 'clsx'\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\n\r\n\r\n\r\nexport const UpdateOwner = ({ handleClose, handleSave, isOpen, currentOwner, title, instructions }) => {\r\n\r\n    const classes = useStyles();\r\n    const { lang } = useContext(LanguageContext);\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const { t, i18n } = useTranslation();\r\n    const [ userList, setUserList ] = useState([]);\r\n    const [ selectedUser, setSelectedUser ] = useState('')\r\n    \r\n    useEffect(() => {\r\n        getUserList()\r\n        .then(data => {\r\n            if (currentOwner) {\r\n                setSelectedUser(currentOwner._id)\r\n            }\r\n            setUserList(data.filter(u => u._id !== currentOwner._id ));\r\n        })\r\n    }, [])\r\n\r\n    const handleChange = event => {\r\n        setSelectedUser(event.target.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal\r\n            open={isOpen}\r\n            onClose={handleClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout: 500\r\n            }}\r\n            className={classes.modal}\r\n        >\r\n            <Fade in={isOpen}>\r\n                <Grid container justify='center' alignItems='center' style={{ outline: '0'}}>\r\n                    <Grid item xs={11} sm={7} md={5} lg={3} xl={3}>\r\n                        <Paper \r\n                            className={classes.paper} \r\n                            style={{ direction: lang.dir }}\r\n                            elevation={6}    \r\n                        >\r\n                            <div className={classes.header}>\r\n                                <div className={classes.title}>\r\n                                    {title}\r\n                                </div>\r\n                                <IconButton className={classes.closeBtn} onClick={handleClose}>\r\n                                    <ClearRoundedIcon className={classes.icon}/>\r\n                                </IconButton>  \r\n                            </div>\r\n                            <div className={classes.instructions}>\r\n                                {instructions}\r\n                            </div>\r\n                            <FormControl variant='outlined' className={classes.textInput} >\r\n                                <Select\r\n                                    value={selectedUser}\r\n                                    onChange={handleChange}\r\n                                    className={classes.menu}\r\n                                    MenuProps={{\r\n                                        classes: {\r\n                                            paper: classes.menupaper\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    {\r\n                                        userList.map( (user, i) => {\r\n                                            return (\r\n                                                <MenuItem\r\n                                                    className={classes.menuitem}\r\n                                                    value={user._id} \r\n                                                    key={i}\r\n                                                    style={{ direction: lang.code === 'he' ? 'rtl' : 'ltr'}}\r\n                                                >\r\n                                                    {`${user.firstName} ${user.lastName}`}\r\n                                                </MenuItem>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Select>\r\n                            </FormControl>\r\n                            <div className={classes.controls}>\r\n                                <Button\r\n                                    className={clsx(classes.control, classes.save)}\r\n                                    onClick={() => handleSave(selectedUser)}\r\n                                    disabled={!selectedUser}\r\n                                >\r\n                                    {t(\"alert.confirm\")}\r\n                                </Button>\r\n                                <Button\r\n                                    className={clsx(classes.control, classes.cancel)}\r\n                                    onClick={handleClose}\r\n                                >\r\n                                    {t(\"alert.cancel\")}\r\n                                </Button>\r\n                            </div>\r\n                        </Paper>\r\n                    </Grid>\r\n                    \r\n                </Grid> \r\n                \r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        background: 'rgba(0,0,0,0.4)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        padding: '10px',\r\n        borderRadius: '10px',\r\n        '&:focus': {\r\n            outline: 'none'\r\n        }\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backdropFilter: 'blur(10px)'   \r\n    },\r\n    header: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center'\r\n    },\r\n    title: {\r\n        color: 'white',\r\n        fontSize: '18px',\r\n        padding: '5px 10px',\r\n        height: 'fit-content'\r\n    },\r\n    closeBtn: {\r\n        fontSize: '20px',\r\n        height: '40px',\r\n        width: '40px'\r\n    },\r\n    icon: {\r\n        color: 'white',\r\n        borderRadius: '25px',\r\n        padding: '5px',\r\n        '&:hover': {\r\n            background: 'rgba(255,255,255,0.2)'\r\n        }\r\n    },\r\n    instructions: {\r\n        width: 'auto',\r\n        color: 'rgba(255,255,255,0.6)',\r\n        fontSize: '12px',\r\n        margin: '0px 10px'\r\n    },\r\n    menu: {\r\n        color: 'white',\r\n        '&:hover': {\r\n            borderColor: 'white'\r\n        }\r\n    },\r\n    menupaper: {\r\n        background: 'rgba(0,0,0,0.3)',\r\n        backdropFilter: 'blur(10px)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        marginTop: '55px',\r\n        marginRight: '7px',\r\n        maxHeight: '200px',\r\n        overflowY: 'auto',\r\n\r\n    },\r\n    menuitem: {\r\n        color: 'white'\r\n    },\r\n    textInput: {\r\n        margin: '20px 5px',\r\n        width: '300px',\r\n        '& input': {\r\n            color: 'white',\r\n            paddingLeft: '20px',\r\n        },\r\n        '& label': {\r\n            color: 'white',\r\n            paddingLeft: '5px' \r\n        },\r\n        '& fieldset': {\r\n            borderColor: 'rgba(255,255,255,0.6)',\r\n            borderRadius: '42px'\r\n        }    \r\n    },\r\n    controls: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    control: {\r\n        width: '30%',\r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        fontSize: '16px',\r\n        margin: '5px',\r\n        padding: '5px 30px',\r\n        borderRadius: '30px',\r\n        color: 'white', \r\n    },\r\n    save: {\r\n        background: 'rgba(0,0,0,0.2)', \r\n        '&:hover': {\r\n            background: 'black'\r\n        },\r\n        '&:disabled': {\r\n            color: 'rgba(255,255,255,0.3)'\r\n        }\r\n    },\r\n    cancel: {\r\n        border: '0px solid grey',\r\n        '&:hover': {\r\n            borderWidth: '1px'\r\n        }\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\assets\\UpsertAsset.js",["526","527","528"],"import { Backdrop, Button, Fade, FormHelperText, Grid, IconButton, LinearProgress, makeStyles, MenuItem, Modal, Paper, Select, TextField, useMediaQuery } from '@material-ui/core';\r\nimport { ClearRounded } from '@material-ui/icons';\r\nimport clsx from 'clsx';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { getAsset } from '../../../api/assetsApi';\r\nimport { createUserOptions } from '../../../api/userApi';\r\nimport { AuthContext } from '../../../context/AuthContext';\r\nimport { LanguageContext } from '../../../context/LanguageContext';\r\n\r\n\r\n\r\n\r\nexport const UpsertAsset = ({ handleClose, handleSave, assetId, handleUpdate }) => {\r\n    const classes = useStyles();\r\n    const { lang } = useContext(LanguageContext);\r\n    const { auth } = useContext(AuthContext);\r\n    const [ mode, setMode ] = useState(handleUpdate ? 'update' : 'create')\r\n    const { t } = useTranslation();\r\n    const [ errors, setErrors ] = useState([]);\r\n    const [ userList, setUserList ] = useState([]);\r\n    const [ addInfoContext, setAddInfoContext ] = useState(null)\r\n    const [ isLoading, setIsLoading ] = useState(true)\r\n    const [ details, setDetails ] = useState({\r\n        tenant: auth.user.tenant,\r\n        address: {\r\n            country: '',\r\n            province: '',\r\n            city: '',\r\n            street: '',\r\n            streetNumber: '',\r\n            entrance: '',\r\n            zipcode: '',\r\n        },\r\n        owner: '',\r\n        type: '',\r\n        addInfo: null,\r\n        createdBy: auth.user._id \r\n    });\r\n\r\n    useEffect(() => {\r\n        createUserOptions()\r\n        .then(data => {\r\n            setUserList(data);\r\n            return Promise.resolve(assetId)\r\n        })\r\n        .then(res => {\r\n            if (!res) {\r\n                setIsLoading(false);\r\n                return;\r\n            }\r\n            getAsset(res, true)\r\n            .then(data => {\r\n                setDetails(data);\r\n                setIsLoading(false)\r\n            }) \r\n        })\r\n        \r\n    },[])\r\n\r\n \r\n\r\n    const validateFields = () => {\r\n        return new Promise((resolve,reject) => {\r\n            let errList = [];\r\n            Object.entries({...details.address,owner: details.owner, type: details.type}).forEach((entry) => {\r\n                if (['province', 'entrance'].indexOf(entry[0]) !== -1 ) return;\r\n                if (!entry[1]) {\r\n                    errList.push({ field: entry[0], text: t(\"errors.isRequired\")})\r\n                }\r\n            });\r\n            \r\n            if (errList.length) {\r\n                setErrors(errList);\r\n                resolve(false);\r\n            };\r\n            resolve(true);\r\n        })\r\n    }\r\n\r\n    const handleConfirm = () => {\r\n        validateFields()\r\n        .then(res => {\r\n            if (!res) return\r\n            if ( mode === 'create') {\r\n                handleSave(details);\r\n            } else {\r\n                console.log(details)\r\n                handleUpdate(details)\r\n            }\r\n            \r\n        })      \r\n    }\r\n\r\n    const handleChange = data => event => {\r\n        if (data.type) {\r\n            setDetails({...details, [data.type]: {\r\n                ...details[data.type],\r\n                [data.field]: event.target.value\r\n            }});\r\n        } else if (data.field === 'type') {\r\n            setDetails({\r\n                ...details, \r\n                type: event.target.value,\r\n                addInfo: event.target.value === 'apartment' \r\n                ? { floor: '', unit: ''} \r\n                : { floors: '', units: ''}\r\n            });\r\n            setAddInfoContext(event.target.value);\r\n        } else {\r\n            setDetails({...details, [data.field]: event.target.value}) \r\n        };\r\n        if (errors.length) {\r\n            setErrors(errors.filter(err => err.field !== data.field))\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        isLoading ? \r\n        <LinearProgress /> :\r\n        <Modal\r\n            open={true}\r\n            onClose={handleClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout: 500\r\n            }}\r\n            className={classes.modal}\r\n        >\r\n            <Fade in={true}>\r\n                <Grid container justify='center' alignItems='center' style={{ outline: '0'}}>\r\n                    <Grid item xs={12} sm={10} md={8} lg={8} xl={6} className={classes.gridCont}>\r\n                        <Paper\r\n                            elevation={6}\r\n                            className={classes.paper}\r\n                            style={{ direction: lang.dir }}\r\n                        >\r\n                            <Grid container>\r\n                                <Grid item xs={12} className={classes.headerRow}>\r\n                                    <div className={classes.title}>\r\n                                        {mode === 'create' ? t(\"assetsModule.createAsset\") : t(\"assetsModule.editAsset\")}\r\n                                    </div>\r\n                                    <div className={classes.close}>\r\n                                        <IconButton\r\n                                            className={classes.iconBtn}\r\n                                            onClick={handleClose}\r\n                                        >\r\n                                            <ClearRounded className={classes.icon}/>\r\n                                        </IconButton>\r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid item xs={12} className={classes.section}>\r\n                                    <Grid item xs={12}>\r\n                                        <div className={classes.sectionTitle}>\r\n                                            {t(\"assetsModule.addressDetails\")}\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} className={classes.fields}>\r\n                                        <Grid container justify='flex-start'>\r\n                                            {\r\n                                                Object.keys(details.address).map((f,i) =>\r\n                                                <Grid item xs={12} sm={6} md={6} lg={4} xl={4} className={classes.textContainer} key={i}>\r\n                                                    <TextField\r\n                                                        variant={\"outlined\"}\r\n                                                        label={t(`assetsModule.${f}`)}\r\n                                                        error={ errors.filter(e => e.field === `${f}`).length > 0 }\r\n                                                        value={ details.address[f] }\r\n                                                        onChange={handleChange({type: 'address', field: `${f}`})}\r\n                                                        className={classes.textField}\r\n                                                        size={'medium'}\r\n                                                        helperText={ errors.filter(e => e.field === `${f}`).length > 0 ? t(\"errors.isRequired\"): null }\r\n                                                    />\r\n                                                </Grid>\r\n                                                )\r\n                                                \r\n                                            }\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                \r\n                                </Grid>\r\n                                <Grid item xs={12} sm={5} className={classes.section}>\r\n                                    <Grid item xs={12}>\r\n                                        <div className={classes.sectionTitle}>\r\n                                            {t(\"assetsModule.assetType\")}\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} className={classes.fields}>\r\n                                        <Grid container justify='flex-start'>\r\n                                            <Grid item xs={12} className={classes.textContainer}>\r\n                                                <Select\r\n                                                    variant={\"outlined\"}\r\n                                                    error={ errors.filter(e => e.field === `type`).length > 0 }\r\n                                                    value={ details.type }\r\n                                                    onChange={handleChange({type: '', field: `type`})}\r\n                                                    className={classes.selectInput}\r\n                                                    MenuProps={{\r\n                                                        classes: {\r\n                                                            paper: classes.menupaper,\r\n                                    \r\n                                                        },\r\n                                                        anchorOrigin: {\r\n                                                            vertical: \"bottom\",\r\n                                                            horizontal: \"center\",\r\n                                                        },\r\n                                                        transformOrigin: {\r\n                                                            vertical: \"top\",\r\n                                                            horizontal: \"center\",\r\n                                                        },\r\n                                                        getContentAnchorEl: null,\r\n                                                        disablePortal: true\r\n                                                    }}\r\n                                    \r\n                                                >\r\n                                                    <MenuItem \r\n                                                        value={'building'}\r\n                                                        style={{ direction: lang.dir }}\r\n                                                        className={classes.menuitem}\r\n                                                    >\r\n                                                        {t(\"assetsModule.building\")}\r\n                                                    </MenuItem>\r\n                                                    <MenuItem \r\n                                                        value={'apartment'}\r\n                                                        style={{ direction: lang.dir }}\r\n                                                        className={classes.menuitem}\r\n                                                    >\r\n                                                        {t(\"assetsModule.apartment\")}\r\n                                                    </MenuItem>\r\n                                                </Select>\r\n                                                {\r\n                                                    errors.filter(e => e.field === `type`).length > 0 &&\r\n                                                    <FormHelperText style={{ color: '#f44336', marginRight: '15px'}}>{t(\"errors.isRequired\")}</FormHelperText>\r\n                                                }\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={5}  className={classes.section}>\r\n                                    <Grid item xs={12}>\r\n                                        <div className={classes.sectionTitle}>\r\n                                            {t(\"assetsModule.owner\")}\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} className={classes.fields}>\r\n                                        <Grid item xs={12} className={classes.textContainer}>\r\n                                                <Select\r\n                                                    variant={\"outlined\"}\r\n                                                    error={ errors.filter(e => e.field === `owner`).length > 0 }\r\n                                                    value={ details.owner }\r\n                                                    onChange={handleChange({type: '', field: `owner`})}\r\n                                                    className={classes.selectInput}\r\n                                                    MenuProps={{\r\n                                                        classes: {\r\n                                                            paper: classes.menupaper,\r\n                                                \r\n                                                        },\r\n                                                        anchorOrigin: {\r\n                                                            vertical: \"bottom\",\r\n                                                            horizontal: \"center\",\r\n                                                        },\r\n                                                        transformOrigin: {\r\n                                                            vertical: \"top\",\r\n                                                            horizontal: \"center\",\r\n                                                        },\r\n                                                        getContentAnchorEl: null,\r\n                                                        disablePortal: true\r\n                                                    }}\r\n                                                \r\n                                                >\r\n                                                    {\r\n                                                        userList.map((user, i) => \r\n                                                            <MenuItem \r\n                                                                key={i}\r\n                                                                value={user.value}\r\n                                                                style={{ direction: lang.dir }}\r\n                                                                className={classes.menuitem}\r\n                                                            >\r\n                                                                {user.label}\r\n                                                            </MenuItem>\r\n                                                        )\r\n                                                    }\r\n                                                </Select>\r\n                                                {\r\n                                                    errors.filter(e => e.field === `type`).length > 0 &&\r\n                                                    <FormHelperText style={{ color: '#f44336', marginRight: '15px'}}>{t(\"errors.isRequired\")}</FormHelperText>\r\n                                                }\r\n                                                \r\n                                            </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                {\r\n                                    (Boolean(addInfoContext) || mode === 'update') &&\r\n                                    <Grid item xs={12} md={6} className={classes.section}>\r\n                                        <Grid item xl={12}>\r\n                                            <div className={classes.sectionTitle}>\r\n                                                {t(\"assetsModule.additionalDetails\")}\r\n                                            </div>\r\n                                        </Grid>\r\n                                        <Grid item xl={12} className={classes.fields}>\r\n                                            <Grid container justify='flex-start'>\r\n                                                {\r\n                                                    Object.keys(details.addInfo).map((f,i) => \r\n                                                        <Grid item xs={12} sm={6} className={classes.textContainer} key={i}>\r\n                                                            <TextField\r\n                                                                variant={\"outlined\"}\r\n                                                                label={t(`assetsModule.${f}`)}\r\n                                                                error={ errors.filter(e => e.field === `${f}`).length > 0 }\r\n                                                                value={ details.addInfo[f] }\r\n                                                                onChange={handleChange({type: 'addInfo', field: `${f}`})}\r\n                                                                className={classes.textField}\r\n                                                                size={'medium'}\r\n                                                                InputProps={{\r\n                                                                    classes: {\r\n                                                                        root: classes.rootInput\r\n                                                                    }\r\n                                                                }}\r\n                                                            />\r\n                                                        </Grid>\r\n                                                    ) \r\n                                                }\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                }\r\n                                <Grid item xs={12} className={classes.controls}>\r\n                                    <Button\r\n                                        className={clsx(classes.control, classes.save)}\r\n                                        onClick={handleConfirm}\r\n                                    >\r\n                                        {t(\"controls.confirm\")}\r\n                                    </Button>\r\n                                    <Button\r\n                                        className={clsx(classes.control, classes.cancel)}\r\n                                        onClick={handleClose}\r\n                                    >\r\n                                        {t(\"controls.cancel\")}\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backdropFilter: 'blur(10px)'   \r\n    },\r\n    gridCont: {\r\n        height: 'fit-content'\r\n    },\r\n    paper: {\r\n        background: 'rgba(0,0,0,0.4)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '10px',\r\n        padding: '10px 20px',\r\n        overflowY: 'overlay',\r\n        [theme.breakpoints.down('sm')]: {\r\n            height: '81vh',\r\n            top: 0,\r\n            borderRadius: '0',\r\n            border: '0',\r\n            padding: '10px 5px'\r\n        },\r\n        '&:focus': {\r\n            outline: 'none'\r\n        }\r\n    },\r\n    headerRow: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        width: '100%',      \r\n        borderBottom: '1px solid rgba(255,255,255,0.2)'\r\n    },\r\n    title: {\r\n        color: 'white',\r\n        padding: '20px 10px 10px',\r\n        fontSize: '20px',\r\n        whiteSpace: 'nowrap'\r\n    },\r\n    iconBtn: {\r\n\r\n    },\r\n    icon: {\r\n        color: 'white',\r\n        fontSize: '20px'\r\n    },\r\n    section: {\r\n        margin: '10px 5px',\r\n        \r\n    },\r\n    sectionTitle: {\r\n        color: 'white',\r\n        fontSize: '16px',\r\n        padding: '10px 20px',\r\n        width: 'fit-content',\r\n        borderRadius: '10px 10px 0 0',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        whiteSpace: 'nowrap'\r\n    },\r\n    fields: {\r\n        padding: '10px 20px',\r\n        borderRadius: '0px 10px 10px 10px',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        [theme.breakpoints.down('sm')]: {\r\n            padding: '10px',\r\n        }\r\n    },\r\n    textContainer: {\r\n        padding: '5px',\r\n    },\r\n    textField: {\r\n        width: '100%',\r\n        '& fieldset': {\r\n            borderRadius: '5px',\r\n        },  \r\n    },\r\n    selectInput: {\r\n        width: '100%',\r\n        '& fieldset': {\r\n            borderRadius: '5px',\r\n        }   \r\n    },\r\n    menupaper: {\r\n        background: 'rgba(0,0,0,0.6)',\r\n        backdropFilter: 'blur(10px)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        marginRight: '7px',\r\n        marginLeft: '-5px',\r\n        maxHeight: '200px',\r\n        overflowY: 'auto',\r\n\r\n    },\r\n    menuitem: {\r\n        color: 'white',\r\n        '&:hover':{\r\n            background: 'rgba(255,255,255,0.2)'\r\n        }\r\n    },\r\n    controls: {\r\n        borderTop: '1px solid rgba(255,255,255,0.2)',\r\n        padding: '10px 0',\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    control: {\r\n        width: '30%',\r\n       \r\n        fontSize: '16px',\r\n        margin: '5px',\r\n        padding: '5px 30px',\r\n        borderRadius: '30px',\r\n        color: 'white',\r\n       \r\n    },\r\n    save: {\r\n        background: 'rgba(0,0,0,0.2)', \r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        '&:hover': {\r\n            background: 'black'\r\n        },\r\n        '&:disabled': {\r\n            color: 'rgba(255,255,255,0.3)'\r\n        }\r\n    },\r\n    cancel: {\r\n        '&:hover': { \r\n            boxShadow: 'inset rgba(255,255,255,0.3) 0 0 2px 1px'\r\n        }\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\AddFollower.js",["529","530","531"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { Grid, makeStyles, Paper, FormControl, IconButton, useMediaQuery, Fade, Modal, Backdrop,Select, MenuItem, Button } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport ClearRoundedIcon from '@material-ui/icons/ClearRounded';\r\nimport { getUserList } from '../../api/userApi';\r\nimport clsx from 'clsx'\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\n\r\n\r\n\r\nexport const AddFollower = ({ handleClose, handleSave, isOpen, followerList, title, instructions }) => {\r\n\r\n    const classes = useStyles();\r\n    const { lang } = useContext(LanguageContext);\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const { t, i18n } = useTranslation();\r\n    const [ userList, setUserList ] = useState([]);\r\n    const [ selectedUser, setSelectedUser ] = useState('')\r\n    \r\n    useEffect(() => {\r\n        getUserList()\r\n        .then(data => {  \r\n            setUserList(data.filter(u => Boolean(!followerList.find(f => f._id === u._id))));\r\n        })\r\n    }, [])\r\n\r\n    const handleChange = event => {\r\n        setSelectedUser(event.target.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <Modal\r\n            open={isOpen}\r\n            onClose={handleClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout: 500\r\n            }}\r\n            className={classes.modal}\r\n        >\r\n            <Fade in={isOpen}>\r\n                <Grid container justify='center' alignItems='center' style={{ outline: '0'}}>\r\n                    <Grid item xs={11} sm={7} md={5} lg={3} xl={3}>\r\n                        <Paper \r\n                            className={classes.paper} \r\n                            style={{ direction: lang.dir }}\r\n                            elevation={6}    \r\n                        >\r\n                            <div className={classes.header}>\r\n                                <div className={classes.title}>\r\n                                    {title}\r\n                                </div>\r\n                                <IconButton className={classes.closeBtn} onClick={handleClose}>\r\n                                    <ClearRoundedIcon className={classes.icon}/>\r\n                                </IconButton>  \r\n                            </div>\r\n                            <div className={classes.instructions}>\r\n                                {instructions}\r\n                            </div>\r\n                            <FormControl variant='outlined' className={classes.textInput} >\r\n                                <Select\r\n                                    value={selectedUser}\r\n                                    onChange={handleChange}\r\n                                    className={classes.menu}\r\n                                    MenuProps={{\r\n                                        classes: {\r\n                                            paper: classes.menupaper,\r\n                                           \r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    {\r\n                                        userList.map( (user, i) => {\r\n                                            return (\r\n                                                <MenuItem\r\n                                                    className={classes.menuitem}\r\n                                                    value={user._id} \r\n                                                    key={i}\r\n                                                    style={{ direction: lang.code === 'he' ? 'rtl' : 'ltr'}}\r\n                                                >\r\n                                                    {`${user.firstName} ${user.lastName}`}\r\n                                                </MenuItem>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Select>\r\n                            </FormControl>\r\n                            <div className={classes.controls}>\r\n                                <Button\r\n                                    className={clsx(classes.control, classes.save)}\r\n                                    onClick={handleSave(selectedUser)}\r\n                                    disabled={!selectedUser}\r\n                                >\r\n                                    {t(\"alert.confirm\")}\r\n                                </Button>\r\n                                <Button\r\n                                    className={clsx(classes.control, classes.cancel)}\r\n                                    onClick={handleClose}\r\n                                >\r\n                                    {t(\"alert.cancel\")}\r\n                                </Button>\r\n                            </div>\r\n                        </Paper>\r\n                    </Grid>\r\n                    \r\n                </Grid> \r\n                \r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        background: 'rgba(0,0,0,0.4)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        padding: '10px',\r\n        borderRadius: '10px',\r\n        '&:focus': {\r\n            outline: 'none'\r\n        }\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backdropFilter: 'blur(10px)'   \r\n    },\r\n    header: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center'\r\n    },\r\n    title: {\r\n        color: 'white',\r\n        fontSize: '18px',\r\n        padding: '5px 10px',\r\n        height: 'fit-content'\r\n    },\r\n    closeBtn: {\r\n        fontSize: '20px',\r\n        height: '40px',\r\n        width: '40px'\r\n    },\r\n    icon: {\r\n        color: 'white',\r\n        borderRadius: '25px',\r\n        padding: '5px',\r\n        '&:hover': {\r\n            background: 'rgba(255,255,255,0.2)'\r\n        }\r\n    },\r\n    instructions: {\r\n        width: 'auto',\r\n        color: 'rgba(255,255,255,0.6)',\r\n        fontSize: '12px',\r\n        margin: '0px 10px'\r\n    },\r\n    menu: {\r\n        color: 'white',\r\n        '&:hover': {\r\n            borderColor: 'white'\r\n        }\r\n    },\r\n    menupaper: {\r\n        background: 'rgba(0,0,0,0.3)',\r\n        backdropFilter: 'blur(10px)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        maxHeight: '200px',\r\n        overflowY: 'auto',\r\n        marginTop: '60px',\r\n        marginRight: '7px',\r\n    },\r\n    menuitem: {\r\n        color: 'white'\r\n    },\r\n    textInput: {\r\n        margin: '20px 5px',\r\n        width: '300px',\r\n        '& input': {\r\n            color: 'white',\r\n            paddingLeft: '20px',\r\n        },\r\n        '& label': {\r\n            color: 'white',\r\n            paddingLeft: '5px' \r\n        },\r\n        '& fieldset': {\r\n            borderColor: 'rgba(255,255,255,0.6)',\r\n            borderRadius: '42px'\r\n        }    \r\n    },\r\n    controls: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    control: {\r\n        width: '30%',\r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        fontSize: '16px',\r\n        margin: '5px',\r\n        padding: '5px 30px',\r\n        borderRadius: '30px',\r\n        color: 'white', \r\n    },\r\n    save: {\r\n        background: 'rgba(0,0,0,0.2)', \r\n        '&:hover': {\r\n            background: 'black'\r\n        },\r\n        '&:disabled': {\r\n            color: 'rgba(255,255,255,0.3)'\r\n        }\r\n    },\r\n    cancel: {\r\n        border: '0px solid grey',\r\n        '&:hover': {\r\n            borderWidth: '1px'\r\n        }\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\AlertDialog.js",["532"],"import React, { useContext } from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\nimport { useTranslation } from 'react-i18next';\r\nimport clsx from 'clsx';\r\n\r\nexport const AlertDialog = ({ alertDialog , open }) => {\r\n\r\n        const classes = useStyles();\r\n        const { lang } = useContext(LanguageContext);\r\n        const { t, i18n } = useTranslation();\r\n  return (\r\n    <Dialog\r\n        open={true}\r\n        onClose={alertDialog.handleCancel}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n        style={{ direction: lang.dir}}\r\n        classes={{\r\n            root: classes.root, \r\n            paper: classes.paper,\r\n            container: classes.container\r\n        }}\r\n        BackdropProps={{\r\n            timeout: 500,\r\n            classes: {\r\n                root: classes.root\r\n            }\r\n        }}\r\n    >\r\n    <DialogTitle id=\"alert-dialog-title\" style={{ direction: lang.dir}} className={classes.title}>\r\n        {alertDialog.title}\r\n    </DialogTitle>\r\n    <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-description\" style={{ direction: lang.dir}} className={classes.text}>\r\n        { alertDialog.text }\r\n        </DialogContentText>\r\n    </DialogContent>\r\n    <DialogActions className={classes.controls}>\r\n        <Button\r\n            className={clsx(classes.control, classes.save)}\r\n            onClick={alertDialog.handleConfirm}\r\n        >\r\n            { alertDialog.confirmText || t(\"alert.confirm\") }\r\n        </Button>\r\n        <Button\r\n            className={clsx(classes.control, classes.cancel)}\r\n            onClick={alertDialog.handleCancel}\r\n        >\r\n            { alertDialog.cancelText || t(\"alert.cancel\") }\r\n        </Button>\r\n    </DialogActions>\r\n    </Dialog>\r\n\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        backgroundColor: 'rgba(0,0,0,0.4)'\r\n    },\r\n    container: {\r\n        backdropFilter: 'blur(10px)',\r\n    },\r\n    paper: {\r\n        width: 'auto',\r\n        padding: '5px',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        borderRadius: '10px',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        color: 'white'\r\n    },\r\n    text: {\r\n        color: 'white'\r\n    },\r\n    controls: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    control: {\r\n        width: '30%',\r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        fontSize: '16px',\r\n        margin: '5px',\r\n        padding: '5px 30px',\r\n        borderRadius: '30px',\r\n        color: 'white', \r\n    },\r\n    save: {\r\n        background: 'rgba(0,0,0,0.2)', \r\n        '&:hover': {\r\n            background: 'black'\r\n        }\r\n    },\r\n    cancel: {\r\n        border: '0px solid grey',\r\n        '&:hover': {\r\n            borderWidth: '1px'\r\n        }\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\UpdateStatus.js",["533","534","535"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { Grid, makeStyles, Paper, FormControl, IconButton, useMediaQuery, Fade, Modal, Backdrop,Select, MenuItem, Button } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport ClearRoundedIcon from '@material-ui/icons/ClearRounded';\r\nimport clsx from 'clsx'\r\nimport { LanguageContext } from '../../context/LanguageContext';\r\nimport { getStatusList } from '../../api/genericApi';\r\n\r\n\r\n\r\nexport const UpdateStatus = ({ handleClose, handleSave, isOpen, currentStatus, title, instructions, module }) => {\r\n\r\n    const classes = useStyles();\r\n    const { lang } = useContext(LanguageContext);\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const { t, i18n } = useTranslation();\r\n    const [ statusList, setStatusList ] = useState([]);\r\n    const [ selectedStatus, setSelectedStatus ] = useState('')\r\n    \r\n    useEffect(() => {\r\n        getStatusList('faults')\r\n        .then(data => {\r\n            console.log(data)\r\n            if (currentStatus) {\r\n                setSelectedStatus(currentStatus._id)\r\n            }\r\n            setStatusList(data.filter(s => s._id !== currentStatus._id ));\r\n        })\r\n    }, [])\r\n\r\n    const handleChange = event => {\r\n        setSelectedStatus(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            open={isOpen}\r\n            onClose={handleClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout: 500\r\n            }}\r\n            className={classes.modal}\r\n        >\r\n            <Fade in={isOpen}>\r\n                <Grid container justify='center' alignItems='center' style={{ outline: '0'}}>\r\n                    <Grid item xs={11} sm={7} md={5} lg={3} xl={3}>\r\n                        <Paper \r\n                            className={classes.paper} \r\n                            style={{ direction: lang.dir }}\r\n                            elevation={6}    \r\n                        >\r\n                            <div className={classes.header}>\r\n                                <div className={classes.title}>\r\n                                    {title}\r\n                                </div>\r\n                                <IconButton className={classes.closeBtn} onClick={handleClose}>\r\n                                    <ClearRoundedIcon className={classes.icon}/>\r\n                                </IconButton>  \r\n                            </div>\r\n                            <div className={classes.instructions}>\r\n                                {instructions}\r\n                            </div>\r\n                            <FormControl variant='outlined' className={classes.textInput} >\r\n                                <Select\r\n                                    value={selectedStatus}\r\n                                    onChange={handleChange}\r\n                                    className={classes.menu}\r\n                                    MenuProps={{\r\n                                        classes: {\r\n                                            paper: classes.menupaper\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    {\r\n                                        statusList.map( (status, i) => {\r\n                                            return (\r\n                                                <MenuItem\r\n                                                    className={classes.menuitem}\r\n                                                    value={status._id} \r\n                                                    key={i}\r\n                                                    style={{ direction: lang.code === 'he' ? 'rtl' : 'ltr'}}\r\n                                                >\r\n                                                    {t(`${module}Module.statuses.${status.statusId}`)}\r\n                                                </MenuItem>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Select>\r\n                            </FormControl>\r\n                            <div className={classes.controls}>\r\n                                <Button\r\n                                    className={clsx(classes.control, classes.save)}\r\n                                    onClick={() => handleSave(selectedStatus)}\r\n                                    disabled={!selectedStatus}\r\n                                >\r\n                                    {t(\"alert.confirm\")}\r\n                                </Button>\r\n                                <Button\r\n                                    className={clsx(classes.control, classes.cancel)}\r\n                                    onClick={handleClose}\r\n                                >\r\n                                    {t(\"alert.cancel\")}\r\n                                </Button>\r\n                            </div>\r\n                        </Paper>\r\n                    </Grid>\r\n                    \r\n                </Grid> \r\n                \r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        background: 'rgba(0,0,0,0.4)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        padding: '10px',\r\n        borderRadius: '10px',\r\n        '&:focus': {\r\n            outline: 'none'\r\n        }\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backdropFilter: 'blur(10px)'   \r\n    },\r\n    header: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center'\r\n    },\r\n    title: {\r\n        color: 'white',\r\n        fontSize: '18px',\r\n        padding: '5px 10px',\r\n        height: 'fit-content'\r\n    },\r\n    closeBtn: {\r\n        fontSize: '20px',\r\n        height: '40px',\r\n        width: '40px'\r\n    },\r\n    icon: {\r\n        color: 'white',\r\n        borderRadius: '25px',\r\n        padding: '5px',\r\n        '&:hover': {\r\n            background: 'rgba(255,255,255,0.2)'\r\n        }\r\n    },\r\n    instructions: {\r\n        width: 'auto',\r\n        color: 'rgba(255,255,255,0.6)',\r\n        fontSize: '12px',\r\n        margin: '0px 10px'\r\n    },\r\n    menu: {\r\n        color: 'white',\r\n        '&:hover': {\r\n            borderColor: 'white'\r\n        }\r\n    },\r\n    menupaper: {\r\n        background: 'rgba(0,0,0,0.3)',\r\n        backdropFilter: 'blur(10px)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        marginTop: '55px',\r\n        marginRight: '7px',\r\n        maxHeight: '200px',\r\n        overflowY: 'auto',\r\n        \r\n\r\n    },\r\n    menuitem: {\r\n        color: 'white'\r\n    },\r\n    textInput: {\r\n        margin: '20px 5px',\r\n        width: '300px',\r\n        '& input': {\r\n            color: 'white',\r\n            paddingLeft: '20px',\r\n        },\r\n        '& label': {\r\n            color: 'white',\r\n            paddingLeft: '5px' \r\n        },\r\n        '& fieldset': {\r\n            borderColor: 'rgba(255,255,255,0.6)',\r\n            borderRadius: '42px'\r\n        }    \r\n    },\r\n    controls: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    control: {\r\n        width: '30%',\r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        fontSize: '16px',\r\n        margin: '5px',\r\n        padding: '5px 30px',\r\n        borderRadius: '30px',\r\n        color: 'white', \r\n    },\r\n    save: {\r\n        background: 'rgba(0,0,0,0.2)', \r\n        '&:hover': {\r\n            background: 'black'\r\n        },\r\n        '&:disabled': {\r\n            color: 'rgba(255,255,255,0.3)'\r\n        }\r\n    },\r\n    cancel: {\r\n        border: '0px solid grey',\r\n        '&:hover': {\r\n            borderWidth: '1px'\r\n        }\r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultBlockView.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\FaultsContext.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\faults\\FaultBlock.js",["536"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { FaultMinified } from './FaultMinified';\r\nimport { Link } from 'react-router-dom';\r\nimport clsx from 'clsx';\r\nimport DoubleArrowIcon from '@material-ui/icons/DoubleArrow';\r\n\r\nexport const FaultBlock = ({ data }) => {\r\n    \r\n    const classes = useStyles();\r\n\r\n    return ( \r\n        <div \r\n            className={clsx(classes.faultContainer)}\r\n        >\r\n            <Link\r\n                to={`/workspace/faults/${data.faultId}`}\r\n                style={{ textDecoration: 'none' }}\r\n            >\r\n                <FaultMinified data={data}  />\r\n            </Link>\r\n        </div>                               \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({ \r\n   faultContainer: {\r\n    padding: '10px',\r\n    border: '1px solid rgba(255,255,255,0.2)',\r\n    borderRadius: '7px',\r\n    background: 'rgba(0,0,0,0.4)',\r\n    margin : '5px 0'\r\n   }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\UpsertTask.js",["537","538","539","540","541","542","543","544"],"import { Avatar, Backdrop, Button, Chip, Collapse, Fade, FormControlLabel, FormHelperText, Grid, IconButton, LinearProgress, makeStyles, MenuItem, Modal, Paper, Select, Switch, TextField, useMediaQuery } from '@material-ui/core';\r\nimport { ClearRounded } from '@material-ui/icons';\r\nimport DeleteOutlineRoundedIcon from '@material-ui/icons/DeleteOutlineRounded';\r\nimport clsx from 'clsx';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { getFullName } from '../../../api/genericApi';\r\nimport { createSystemMenuOptions, getAssetsSuggestions, getSystemsByAsset } from '../../../api/systemsApi';\r\nimport { getTask } from \"../../../api/tasksApi\";\r\nimport { createUserOptions } from '../../../api/userApi';\r\nimport { AuthContext } from '../../../context/AuthContext';\r\nimport { LanguageContext } from '../../../context/LanguageContext';\r\nimport { UserItem } from '../../user/UserItem';\r\nimport { TaskSteps } from \"./TaskSteps\";\r\n\r\nexport const UpsertTask = ({ handleClose, handleSave, handleUpdate, taskId}) => {\r\n    const classes = useStyles();\r\n    const { lang } = useContext(LanguageContext);\r\n    const { auth } = useContext(AuthContext);\r\n    const downSm = useMediaQuery(theme => theme.breakpoints.down('md'));\r\n    const { t, i18n } = useTranslation();\r\n    const [ mode, setMode ] = useState(handleUpdate ? 'update' : 'create')\r\n    const [ errors, setErrors ] = useState([]);\r\n    const [ assets, setAssets ] = useState([]);\r\n    const [ systems, setSystems ] = useState([]);\r\n    const [ userList, setUserList ] = useState([]);\r\n    const [ isLoading, setIsLoading ] = useState(true);\r\n    const [ details, setDetails ] = useState({\r\n        tenant: auth.user.tenant,\r\n        title: '',\r\n        description: '',\r\n        asset: '',\r\n        system: '',\r\n        owner: '',\r\n        relatedUsers: [],\r\n        createdBy: auth.user._id,\r\n        isRepeatable: false,\r\n        schedule: [],\r\n        isUsingSteps: false,\r\n        steps: [],\r\n        isSequential: false,\r\n        images: [],\r\n        uploadedImages: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (!details.isUsingSteps) {\r\n            setDetails({ ...details, steps: [], isSequential: false})\r\n        } else if (mode === 'create'){\r\n            setDetails({ ...details, steps: [{ order: 1, description: '' }] })\r\n        }\r\n    }, [details.isUsingSteps]);\r\n\r\n    useEffect(() => {\r\n        createUserOptions()\r\n        .then(data => {\r\n            setUserList(data);\r\n            return getAssetsSuggestions()\r\n        })\r\n        .then(data => {\r\n            setAssets(data); \r\n            if (!taskId) {\r\n                setIsLoading(false);\r\n                return;\r\n            }\r\n            getTask(taskId, true)        \r\n            .then(data => {\r\n                console.log(data)\r\n                return Promise.all([loadSystemOptions(data.asset), Promise.resolve(data)]) \r\n            })\r\n            .then(res => {\r\n               let data = res[1];\r\n               if (!data) return;\r\n               setDetails({ ...data, images: [], uploadedImages: data.images});\r\n            })\r\n            .finally(() => {\r\n                setIsLoading(false)\r\n            }); \r\n        }) \r\n    }, []);\r\n\r\n    const validateFields = () => {\r\n        return new Promise((resolve,reject) => {\r\n            let errList = [];\r\n            if (!details.owner) {\r\n                errList.push({ field: 'owner', text: t(\"errors.isRequired\")})\r\n            }\r\n            if (!details.title) {\r\n                errList.push({ field: 'title', text: t(\"errors.isRequired\")})\r\n            }\r\n            \r\n            if (errList.length) {\r\n                setErrors(errList);\r\n                resolve(false);\r\n            };\r\n            resolve(true);\r\n        })\r\n    }\r\n\r\n    const loadSystemOptions = async (assetId) => {\r\n        return getSystemsByAsset(assetId)\r\n        .then(systems => {\r\n            return createSystemMenuOptions(systems)\r\n        })\r\n        .then(data => {\r\n            setSystems(data);\r\n            return true;\r\n        })\r\n    }\r\n\r\n    const handleConfirm = () => {\r\n        validateFields()\r\n        .then(res => {\r\n            if (!res) return;\r\n            if (mode === 'update') {\r\n                handleUpdate(details)\r\n            } else \r\n                handleSave(details);\r\n            }\r\n        )      \r\n    }\r\n\r\n    const handleChange = field => async event => {\r\n        if (field === 'isUsingSteps' || field === 'isRepeatable') {\r\n            setDetails({\r\n                ...details,\r\n                [field]: event.target.checked\r\n            })\r\n        } else {\r\n            setDetails({\r\n                ...details,\r\n                [field]: event.target.value\r\n            })\r\n        }\r\n        if (field === 'asset'){\r\n            if (event.target.value) {\r\n                await loadSystemOptions(event.target.value)\r\n            } else {\r\n                setDetails({\r\n                    ...details,\r\n                    system: null\r\n                });\r\n                setSystems([]);\r\n            }\r\n            \r\n        }\r\n        if (errors.length) {\r\n            setErrors(errors.filter(err => err.field !== field))\r\n        }\r\n    }\r\n\r\n    const handleFileUpload = event => {\r\n        setDetails({\r\n            ...details,\r\n            images: event.target.files\r\n        })\r\n    }\r\n\r\n    const removeImage = i => event => {\r\n        let im = details.uploadedImages;\r\n        im.splice(i, 1);\r\n        setDetails({ ...details, uploadedImages: im})\r\n    }\r\n\r\n    const toggleIsSequential = event => {\r\n        setDetails({ ...details, isSequential: event.target.checked})\r\n    }\r\n\r\n    const handleStepChange = pos => event => {\r\n        let st = [...details.steps];\r\n        st[pos].description = event.target.value;\r\n        setDetails({ ...details, steps: st})\r\n    }\r\n\r\n    const handleAddStep = () => {\r\n        setDetails({ \r\n                ...details, \r\n                steps: [...details.steps, { \r\n                order: details.steps.length + 1,\r\n                description: '',       \r\n            }]\r\n        });\r\n    }\r\n\r\n    const handleRemoveStep = order => event => {\r\n        let sts = [...details.steps];\r\n        sts.splice(order - 1, 1);\r\n        sts.forEach((s,i) => {\r\n            sts[i].order = i + 1;\r\n        });\r\n        setDetails({ \r\n            ...details, \r\n            steps: sts,\r\n            isUsingSteps: sts.length ? true : false,\r\n            isSequential: sts.length ? details.isSequential : false,\r\n        })\r\n    }\r\n\r\n    return (\r\n        isLoading ? \r\n        <LinearProgress /> :\r\n        <Modal\r\n            open={true}\r\n            onClose={handleClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout: 500\r\n            }}\r\n            className={classes.modal}\r\n        >\r\n            <Fade in={true}>\r\n                <Grid container justify='center' alignItems='center' style={{ outline: '0'}}>\r\n                    <Grid item xs={12} sm={10} md={8} lg={8} xl={6} className={classes.gridCont}>\r\n                        <Paper\r\n                            elevation={6}\r\n                            className={classes.paper}\r\n                            style={{ direction: lang.dir }}\r\n                        >\r\n                            <Grid container>\r\n                                <Grid item xs={12} className={classes.headerRow}>\r\n                                    <div className={classes.title}>\r\n                                        {mode === 'update' ? t(\"tasksModule.upsert.updateTaskDetails\") : t(\"tasksModule.upsert.createTask\")}\r\n                                    </div>\r\n                                    <div className={classes.close}>\r\n                                        <IconButton\r\n                                            className={classes.iconBtn}\r\n                                            onClick={handleClose}\r\n                                        >\r\n                                            <ClearRounded className={classes.icon}/>\r\n                                        </IconButton>\r\n                                    </div>\r\n                                </Grid>                     \r\n                                <Grid item xs={12} sm={6} md={6} lg={6} xl={6} className={classes.section}>\r\n                                    <Grid item xs={12}>\r\n                                        <div className={classes.sectionTitle}>\r\n                                            {t(\"tasksModule.upsert.asset\")}\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} className={classes.fields}>\r\n                                        <Grid container justify='flex-start'>\r\n                                            <Grid item xs={12} className={classes.textContainer}>\r\n                                            <Select\r\n                                                variant={\"outlined\"}\r\n                                                error={ errors.filter(e => e.field === `asset`).length > 0 }\r\n                                                value={ details.asset }\r\n                                                onChange={handleChange(`asset`)}\r\n                                                className={classes.selectInput}\r\n                                                MenuProps={{\r\n                                                    anchorOrigin: {\r\n                                                        vertical: \"bottom\",\r\n                                                        horizontal: \"center\",\r\n                                                    },\r\n                                                    transformOrigin: {\r\n                                                        vertical: \"top\",\r\n                                                        horizontal: \"center\",\r\n                                                    },\r\n                                                    getContentAnchorEl: null,\r\n                                                    classes: {\r\n                                                        paper: classes.menupaper,\r\n                                                \r\n                                                    }\r\n                                                }}\r\n                                                \r\n                                            >\r\n                                                {\r\n                                                    assets.map((asset, i) => \r\n                                                        <MenuItem \r\n                                                            key={i}\r\n                                                            value={asset.value}\r\n                                                            style={{ direction: lang.dir }}\r\n                                                            className={classes.menuitem}\r\n                                                        >\r\n                                                            {asset.text}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }\r\n                                            </Select>\r\n                                            {\r\n                                                errors.filter(e => e.field === 'asset').length > 0 &&\r\n                                                <FormHelperText style={{ color: '#f44336', marginRight: '15px'}}>{t(\"errors.isRequired\")}</FormHelperText>\r\n                                            }\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6} md={4} lg={4} xl={4} className={classes.section}>\r\n                                    <Grid item xs={12}>\r\n                                        <div className={classes.sectionTitle}>\r\n                                            {t(\"tasksModule.upsert.system\")}\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} className={classes.fields}>\r\n                                        <Grid container justify='flex-start'>\r\n                                            <Grid item xs={12} className={classes.textContainer}>\r\n                                            <Select\r\n                                                variant={\"outlined\"}\r\n                                                error={ errors.filter(e => e.field === `system`).length > 0 }\r\n                                                value={ details.system }\r\n                                                onChange={handleChange(`system`)}\r\n                                                className={classes.selectInput}\r\n                                                MenuProps={{\r\n                                                    anchorOrigin: {\r\n                                                        vertical: \"bottom\",\r\n                                                        horizontal: \"center\",\r\n                                                    },\r\n                                                    transformOrigin: {\r\n                                                        vertical: \"top\",\r\n                                                        horizontal: \"center\",\r\n                                                    },\r\n                                                    getContentAnchorEl: null,\r\n                                                    classes: {\r\n                                                        paper: classes.menupaper,\r\n                                                \r\n                                                    }\r\n                                                }}\r\n                                                \r\n                                            >\r\n                                                {\r\n                                                    systems.map((system, i) => \r\n                                                        <MenuItem \r\n                                                            key={i}\r\n                                                            value={system.value}\r\n                                                            style={{ direction: lang.dir }}\r\n                                                            className={classes.menuitem}\r\n                                                        >\r\n                                                            {system.text}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }\r\n                                            </Select>\r\n                                            {\r\n                                                errors.filter(e => e.field === 'asset').length > 0 &&\r\n                                                <FormHelperText style={{ color: '#f44336', marginRight: '15px'}}>{t(\"errors.isRequired\")}</FormHelperText>\r\n                                            }\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} className={classes.section}>\r\n                                    <Grid item xs={12}>\r\n                                        <div className={classes.sectionTitle}>\r\n                                            {t(\"tasksModule.upsert.generalDetails\")}\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} className={classes.fields}>\r\n                                        <Grid container justify='flex-start'>\r\n                                            <Grid item xs={12} className={classes.textContainer}>\r\n                                                <TextField\r\n                                                    variant={\"outlined\"}\r\n                                                    label={t(`tasksModule.upsert.title`)}\r\n                                                    error={ errors.filter(e => e.field === `title`).length > 0 }\r\n                                                    value={ details.title }\r\n                                                    onChange={handleChange('title')}\r\n                                                    className={classes.textField}\r\n                                                    size={'medium'}\r\n                                                    helperText={ errors.filter(e => e.field === `title`).length > 0 ? t(\"errors.isRequired\") : `${60 - details.title.length} ${t(\"tasksModule.upsert.titleLimit\")}` }\r\n                                                    inputProps={{\r\n                                                        maxLength: 60\r\n                                                    }}\r\n                                                    FormHelperTextProps={{\r\n                                                        style: { color: errors.filter(e => e.field === `title`).length > 0 ? 'rgb(244, 67, 54)' : 'rgba(255,255,255,0.6)' }\r\n                                                    }}\r\n                                                    \r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={12} className={classes.textContainer}>\r\n                                                <TextField\r\n                                                    variant={\"outlined\"}\r\n                                                    label={t(`tasksModule.upsert.description`)}\r\n                                                    value={ details.description }\r\n                                                    onChange={handleChange('description')}\r\n                                                    className={classes.textField}\r\n                                                    size={'medium'}\r\n                                                    multiline={true}\r\n                                                    rows={7}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} className={classes.section}>\r\n                                    <Grid item xs={12}>\r\n                                        <div className={classes.sectionTitle}>\r\n                                            {t(\"tasksModule.upsert.steps\")}\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} className={classes.fields}>\r\n                                        <Grid container justify='flex-start'>\r\n                                            <Grid item xs={12} className={classes.textContainer}>\r\n                                                <FormControlLabel\r\n                                                    className={classes.switchLabel}\r\n                                                    control={\r\n                                                    <Switch\r\n                                                        checked={details.isUsingSteps}\r\n                                                        onChange={handleChange('isUsingSteps')}\r\n                                                        classes={{\r\n                                                            switchBase: classes.switchBase,\r\n                                                            checked: classes.checked,\r\n                                                            track: classes.track\r\n                                                        }}\r\n\r\n                                                    />\r\n                                                    }\r\n                                                    label={t(\"tasksModule.upsert.isUsingSteps\")}\r\n                                                />\r\n                                            </Grid>\r\n                                            {\r\n                                            <Grid item xs={12}>                         \r\n                                                <TaskSteps \r\n                                                    data={details.steps} \r\n                                                    handleChange={handleStepChange} \r\n                                                    isUsingSteps={details.isUsingSteps}\r\n                                                    isSequential={details.isSequential}\r\n                                                    toggleIsSequential={toggleIsSequential}\r\n                                                    addStep={handleAddStep}\r\n                                                    removeStep={handleRemoveStep}\r\n                                                />\r\n                                            </Grid>\r\n                                            }\r\n                                            \r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} className={classes.section}>\r\n                                    <Grid item xs={12}>\r\n                                        <div className={classes.sectionTitle}>\r\n                                            {t(\"tasksModule.upsert.repeatableTask\")}\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} className={classes.fields}>\r\n                                        <Grid container justify='flex-start'>\r\n                                            <Grid item xs={12} className={classes.textContainer}>\r\n                                                <FormControlLabel\r\n                                                    className={classes.switchLabel}\r\n                                                    control={\r\n                                                    <Switch\r\n                                                        checked={details.isRepeatable}\r\n                                                        onChange={handleChange('isRepeatable')}\r\n                                                        classes={{\r\n                                                            switchBase: classes.switchBase,\r\n                                                            checked: classes.checked,\r\n                                                            track: classes.track\r\n                                                        }}\r\n                                                    />\r\n                                                    }\r\n                                                    label={t(\"tasksModule.upsert.isRepeatable\")}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item xs={12} className={classes.textContainer}>\r\n                                            <div className={classes.notificationsInstructions}>\r\n                                                {t(\"tasksModule.upsert.notificationsInstructions\")}\r\n                                            </div>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6} md={6} lg={4} xl={4}  className={classes.section}>\r\n                                    <Grid item xs={12}>\r\n                                        <div className={classes.sectionTitle}>\r\n                                            {t(\"tasksModule.upsert.taskOwner\")}\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} className={classes.fields}>\r\n                                        <Grid item xs={12} className={classes.textContainer}>\r\n                                            <Select\r\n                                                variant={\"outlined\"}\r\n                                                error={ errors.filter(e => e.field === `owner`).length > 0 }\r\n                                                value={ details.owner }\r\n                                                onChange={handleChange(`owner`)}\r\n                                                className={classes.selectInput}\r\n                                                MenuProps={{\r\n                                                    anchorOrigin: {\r\n                                                        vertical: \"bottom\",\r\n                                                        horizontal: \"center\",\r\n                                                    },\r\n                                                    transformOrigin: {\r\n                                                        vertical: \"top\",\r\n                                                        horizontal: \"center\",\r\n                                                    },\r\n                                                    getContentAnchorEl: null,\r\n                                                    classes: {\r\n                                                        paper: classes.menupaper,\r\n                                                \r\n                                                    }\r\n                                                }}\r\n                                                renderValue={(selected) => {\r\n                                                    let user = userList.find( f => f._id === selected);\r\n                                                    return (\r\n                                                        \r\n                                                            <Chip\r\n                                                                size={'medium'}\r\n                                                                avatar={<Avatar style={{ height: '40px', width: '40px'}} src={user.avatar} />}\r\n                                                                label={getFullName(user)}\r\n                                                                className={classes.chip}\r\n                                                                \r\n                                                            />\r\n                                                    \r\n                                                    )\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    userList.map((user, i) => \r\n                                                        <MenuItem \r\n                                                            key={i}\r\n                                                            value={user.value}\r\n                                                            style={{ direction: lang.dir }}\r\n                                                            className={classes.menuitem}\r\n                                                        >\r\n                                                            <div className={classes.userCont}>\r\n                                                                <UserItem\r\n                                                                    user={user}\r\n                                                                    avatarSize={40}\r\n                                                                    size={13}\r\n                                                                    showName\r\n                                                                />\r\n                                                            </div>\r\n                                                            \r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }\r\n                                            </Select>\r\n                                            {\r\n                                                errors.filter(e => e.field === 'owner').length > 0 &&\r\n                                                <FormHelperText style={{ color: '#f44336', marginRight: '15px'}}>{t(\"errors.isRequired\")}</FormHelperText>\r\n                                            }\r\n                                            \r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>                              \r\n                                <Grid item xs={12} md={6} className={classes.section}>\r\n                                            <Grid item xs={12}>\r\n                                                <div className={classes.sectionTitle}>\r\n                                                    {mode === 'create' ? t(\"tasksModule.upsert.taskImages\") : t(\"tasksModule.upsert.addTaskImages\")}\r\n                                                </div>\r\n                                            </Grid>\r\n                                            <Grid item xs={12} className={classes.fields}>\r\n                                                <Grid container justify='flex-start'>\r\n                                                    <Grid item xs={12} className={classes.textContainer}>\r\n                                                        <Button\r\n                                                            component={'label'}\r\n                                                            variant={'contained'}\r\n                                                            className={classes.uploadBtn}\r\n                                                        >\r\n                                                            { t(\"tasksModule.upsert.uploadImages\")}\r\n                                                            <input \r\n                                                                accept='image/*'\r\n                                                                type='file'\r\n                                                                multiple\r\n                                                                onChange={handleFileUpload}\r\n                                                                hidden  \r\n                                                            />\r\n                                                        </Button>\r\n                                                        <span className={classes.filesUploaded}>\r\n                                                            {`${details.images.length} ${t(\"tasksModule.upsert.imagesSelected\")}` }\r\n                                                        </span>\r\n                                                    </Grid>\r\n                                                    {\r\n                                                        Boolean(details.uploadedImages.length) &&\r\n                                                        <React.Fragment>\r\n                                                            <Grid item xs={12} className={classes.uploadedImagesTitle}>\r\n                                                                {t(\"tasksModule.upsert.uploadedImages\")}\r\n                                                            </Grid>\r\n                                                            {\r\n                                                                details.uploadedImages.map((image, i) => \r\n                                                                    <Grid item xs={12} className={classes.imageRow} key={i}>\r\n                                                                        <img src={image} className={classes.previewImage} />\r\n                                                                        <IconButton     \r\n                                                                            onClick={removeImage(i)}\r\n                                                                            className={classes.removeImageBtn}\r\n                                                                        >\r\n                                                                            <DeleteOutlineRoundedIcon className={classes.removeImage}/>\r\n                                                                        </IconButton>\r\n                                                                    </Grid>\r\n                                                                )\r\n                                                            }\r\n                                                        </React.Fragment> \r\n                                                    } \r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                <Grid item xs={12} className={classes.controls}>\r\n                                    <Button\r\n                                        className={clsx(classes.control, classes.save)}\r\n                                        onClick={handleConfirm}\r\n                                    >\r\n                                        {t(\"controls.confirm\")}\r\n                                    </Button>\r\n                                    <Button\r\n                                        className={clsx(classes.control, classes.cancel)}\r\n                                        onClick={handleClose}\r\n                                    >\r\n                                        {t(\"controls.cancel\")}\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n            </Fade>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backdropFilter: 'blur(10px)'   \r\n    },\r\n    \r\n    gridCont: {\r\n        height: 'fit-content'\r\n    },\r\n    paper: {\r\n        background: 'rgba(0,0,0,0.4)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '10px',\r\n        padding: '10px 20px',\r\n        overflowY: 'overlay',\r\n        height: '80vh',\r\n        [theme.breakpoints.down('sm')]: {\r\n            height: '81vh',\r\n            borderRadius: '0',\r\n            border: '0',\r\n            padding: '10px 5px'\r\n        },\r\n        '&:focus': {\r\n            outline: 'none'\r\n        }\r\n    },\r\n    headerRow: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        width: '100%',      \r\n        borderBottom: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    title: {\r\n        color: 'white',\r\n        padding: '20px 10px 10px',\r\n        fontSize: '20px',\r\n        whiteSpace: 'nowrap'\r\n    },\r\n    iconBtn: {\r\n        margin: '10px',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.3)'\r\n        }\r\n    },\r\n    icon: {\r\n        color: 'white',\r\n        fontSize: '20px'\r\n    },\r\n    section: {\r\n        margin: '10px 5px',\r\n        \r\n    },\r\n    sectionTitle: {\r\n        color: 'white',\r\n        fontSize: '16px',\r\n        padding: '10px 20px',\r\n        width: 'fit-content',\r\n        borderRadius: '10px 10px 0 0',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        whiteSpace: 'nowrap'\r\n    },\r\n    fields: {\r\n        padding: '10px 20px',\r\n        borderRadius: '0px 10px 10px 10px',\r\n        background: 'rgba(0,0,0,0.4)',\r\n        [theme.breakpoints.down('sm')]: {\r\n            padding: '10px',\r\n        }\r\n    },\r\n    textContainer: {\r\n        padding: '5px',\r\n    },\r\n    textField: {\r\n        width: '100%',\r\n        '& fieldset': {\r\n            borderRadius: '5px',\r\n        },  \r\n    },\r\n    selectInput: {\r\n        width: '100%',\r\n        '& fieldset': {\r\n            borderRadius: '5px',\r\n        }   \r\n    },\r\n    menupaper: {\r\n        background: 'rgba(0,0,0,0.8)',\r\n        backdropFilter: 'blur(10px)',\r\n        height: '200px',\r\n        overflowY: 'auto',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        marginRight: '7px',\r\n        marginLeft: '-5px'\r\n\r\n    },\r\n    menuitem: {\r\n        color: 'white',\r\n        width: '100%',\r\n        '&:hover': {\r\n            background: 'rgba(255,255,255,0.1)'\r\n        }\r\n    },\r\n    controls: {\r\n        borderTop: '1px solid rgba(255,255,255,0.2)',\r\n        padding: '10px 0',\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    control: {\r\n        width: '30%',\r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        fontSize: '16px',\r\n        margin: '5px',\r\n        padding: '5px 30px',\r\n        borderRadius: '30px',\r\n        color: 'white',\r\n       \r\n    },\r\n    save: {\r\n        background: 'rgba(0,0,0,0.2)', \r\n        '&:hover': {\r\n            background: 'black'\r\n        },\r\n        '&:disabled': {\r\n            color: 'rgba(255,255,255,0.3)'\r\n        }\r\n    },\r\n    cancel: {\r\n        '&:hover': { \r\n            boxShadow: 'inset rgba(255,255,255,0.3) 0 0 2px 1px'\r\n        }\r\n    },\r\n    chips: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap'\r\n    },\r\n    chip: {\r\n        height: '50px',\r\n        fontSize: '14px',\r\n        borderRadius: '50px',\r\n        display: 'flex',\r\n        justifyContent: 'flex-start',\r\n        color: 'white',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        background: 'rgba(0,0,0,0.6)',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.6)',\r\n            boxShadow: 'inset lightgrey 0px 0px 1px 1px'\r\n        } \r\n    },\r\n    userCont: {\r\n        height: 'fit-content',\r\n        padding: 0,\r\n        margin: 0,\r\n        margin: '5px 0',\r\n        \r\n    },\r\n    chipsCont: {\r\n        height: 'fit-content',\r\n        padding: 0,\r\n        margin: '3px',\r\n        borderRadius: '50px',\r\n        background: 'rgba(255,255,255,0.1)',\r\n        boxShadow: 'inset rgba(0,0,0,0.5) 0px 0px 2px 1px',\r\n        display: 'flex',\r\n        jutifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        \r\n    },\r\n    removeIcon: {\r\n        color: 'rgba(255,255,255,0.2)',\r\n        padding: '5px',\r\n        marginRight: '5px',\r\n        borderRadius: '50px',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.8)',\r\n            color: 'white',\r\n        }\r\n    },\r\n    radioGroup: {\r\n        color: 'white',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignitems: 'center',\r\n        \r\n    },\r\n    radioBtn: {\r\n        color: 'white',\r\n        padding: '15px'\r\n    },\r\n    filesUploaded: {\r\n        color: 'white',\r\n        padding: '0 15px'\r\n    },\r\n    uploadBtn: {\r\n        margin: '9px 0',\r\n        background: 'rgba(0,0,0,0.1)',\r\n        color: 'white',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '50px',\r\n        whiteSpace: 'nowrap',\r\n        '&:hover': {\r\n            boxShadow: 'inset white 0 0 2px 1px',\r\n            background: 'rgba(0,0,0,0.3)'\r\n        }\r\n    },\r\n    imageRow: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        padding: '10px 5px',\r\n        borderBottom: '1px solid rgba(255,255,255,0.2)'\r\n    },\r\n    previewImage: {\r\n        height: '50px',\r\n        width: '100px'\r\n    },\r\n    removeImageBtn: {\r\n        color: 'rgba(255,255,255,0.5)',\r\n        border: '1px solid rgba(255,255,255,0.5)',\r\n        borderRadius: '50px',\r\n        padding: '6px',\r\n        '&:hover': {\r\n            color: 'white',\r\n            borderColor: 'white'\r\n        }\r\n    },\r\n    uploadedImagesTitle: {\r\n        color: 'white',\r\n        padding: '10px 5px',\r\n        borderBottom: '1px solid rgba(255,255,255,0.2)'\r\n    },\r\n    switchLabel: {\r\n        color: 'white'\r\n    },\r\n    switchBase: {\r\n       color: 'rgba(255,255,255,0.4)',\r\n       '&$checked': {\r\n            color: 'rgba(255,255,255,1)',\r\n        },\r\n        '&$checked + $track': {\r\n            backgroundColor: 'rgba(255,255,255,0.8)',\r\n        },\r\n         \r\n    },\r\n    checked: {},\r\n    track: {\r\n        backgroundColor: 'rgba(255,255,255,0.4)',\r\n    },\r\n    notificationsInstructions: {\r\n        color: 'rgba(255,255,255,0.6)',\r\n        fontSize: '12px',\r\n        marginBottom: '10px'\r\n    },\r\n   \r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\tasksApi.js",["545"],"import axios from 'axios';\r\nimport { specialStringPurge } from './genericApi'\r\nimport i18next from 'i18next'\r\n\r\nexport const getTask = async (taskId, plain) => {\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/tasks/getTask`, { taskId, plain });\r\n        if (res.status === 200) {\r\n            return res.data;\r\n        }\r\n    } catch (e){\r\n        return e.response;\r\n    } \r\n};\r\n\r\nexport const createNewTask = async details => {\r\n    let formData = new FormData();\r\n    Object.entries(details).forEach(f => {\r\n        if (f[0] === 'images') {\r\n            for (let i = 0; i < details.images.length; i++) {\r\n                formData.append(\"images\", details.images[i]);\r\n              }\r\n        } else if (f[1] instanceof Array){\r\n            formData.append(f[0], JSON.stringify(f[1]))\r\n        } else {\r\n            formData.append(f[0], f[1])\r\n        }\r\n    });\r\n    let config = {\r\n        headers: {\r\n            'Content-Type': `multipart/form-data`\r\n        }\r\n    }\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/tasks/createTask`, formData, config); \r\n        if (res) {\r\n            return res.data\r\n        };\r\n    } catch(e) {\r\n        console.log(e)\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const getTasks = async (tenantId, query) => {\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/tasks/getTasks`, { tenantId, query });\r\n        if (res.status === 200) {\r\n            return res.data;\r\n        }\r\n    } catch (e){\r\n        return e.response;\r\n    } \r\n}\r\n\r\nexport const updateTaskOwner = async ( taskId, owner ) => {\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/tasks/updateTaskOwner`, { taskId, owner });\r\n        if (res.status === 200) {\r\n            return res.data;\r\n        }\r\n    } catch (e){\r\n        return e.response;\r\n    } \r\n}\r\n\r\nexport const updateTaskStatus = async ( taskId, status ) => {\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/tasks/updateTaskStatus`, { taskId, status });\r\n        if (res.status === 200) {\r\n            return res.data;\r\n        }\r\n    } catch (e){\r\n        return e.response;\r\n    } \r\n}\r\n\r\nexport const saveTaskComment = async (taskId, userId, text) => {\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/tasks/addTaskComment`, { taskId, userId, text });\r\n        if (res) {\r\n            return res.data;\r\n        }\r\n    } catch (e) {\r\n        console.log(e.message);\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const updateTaskComment = async (taskId, commentId, text) => {\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/tasks/updateTaskComment`, { taskId, commentId, text });\r\n        if (res) {\r\n            return res.data;\r\n        }\r\n    } catch (e) {\r\n        console.log(e.message);\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const addTaskRelatedUser = async (taskId, userId) => {\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/tasks/addRelatedUser`, { taskId, userId });\r\n        if (res) {\r\n            return res.data;\r\n        }\r\n    } catch (e) {\r\n        console.log(e.message);\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const removeTaskRelatedUser = async (taskId, userId) => {\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/tasks/removeRelatedUser`, { taskId, userId });\r\n        if (res) {\r\n            return res.data;\r\n        }\r\n    } catch (e) {\r\n        console.log(e.message);\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const updateTask = async (details) => {\r\n    let formData = new FormData();\r\n    Object.entries(details).forEach(f => {\r\n        if (f[0] === 'images') {\r\n            for (let i = 0; i < details.images.length; i++) {\r\n                formData.append(\"images\", details.images[i]);\r\n              }\r\n        } else if (f[0] === 'uploadedImages') { \r\n            formData.append(\"uploadedImages\", JSON.stringify(f[1]))\r\n        } else if (f[1] instanceof Array ) {\r\n            formData.append(f[0], JSON.stringify(f[1]))\r\n        } else {\r\n            formData.append(f[0], f[1])\r\n        }\r\n    });\r\n    let config = {\r\n        headers: {\r\n            'Content-Type': `multipart/form-data`\r\n        }\r\n    }\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/tasks/updateTask`, formData, config); \r\n        if (res) {\r\n            return res.data\r\n        };\r\n    } catch(e) {\r\n        console.log(e)\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const getTasksStatusList = async () => {\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/statuses/getStatusList`, { module: 'tasks' });\r\n        if (res.status === 200) {\r\n            return res.data;\r\n        }\r\n    } catch(e) {\r\n        console.log(e)\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const getTasksStatusListSuggestions = async () => {\r\n    const data = await getTasksStatusList();\r\n    let statusList = [];\r\n    if (data.length) { \r\n        data.forEach(st => {\r\n            statusList.push({\r\n                label: i18next.t(`tasksModule.statuses.${st.statusId}`),\r\n                value: st._id\r\n            })\r\n        });\r\n    }\r\n    return statusList;\r\n}\r\n\r\nexport const updateTaskSchedule = async (taskId, schedule) => {\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/tasks/updateTaskSchedule`, { taskId, schedule });\r\n        if (res.status === 200) {\r\n            return res.data;\r\n        }\r\n    } catch(e) {\r\n        console.log(e)\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const getTaskOptionsByAssetOrSystem = async (asset, system) => {\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/tasks/getTaskOptions`, { asset, system });\r\n        let options = [];\r\n        if (!res) return [];\r\n        res.data.forEach(t => {\r\n            options.push({ label: t.taskId, value: t._id})\r\n        });\r\n        return options;\r\n    } catch(e) {\r\n        console.log(e)\r\n        return null;\r\n    }\r\n}","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\TaskSteps.js",["546","547","548","549"],"import React, { useEffect, useState } from 'react';\r\nimport { makeStyles, Grid, Collapse, TextField, FormControlLabel, Checkbox, IconButton, Button } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteOutlineRoundedIcon from '@material-ui/icons/DeleteOutlineRounded';\r\n\r\n\r\nexport const TaskSteps = ({ data,  isUsingSteps, handleChange, isSequential, toggleIsSequential, addStep, removeStep }) => {\r\n\r\n    const classes = useStyles();\r\n    const { t, i18n } = useTranslation();\r\n    const [ isSeq, setIsSeq ] = useState(isSequential);\r\n    const [ steps, setSteps ] = useState(data || [{ order: 1, description: ''}]);\r\n\r\n    useEffect(() => {\r\n        setSteps(data)\r\n    }, [data]);\r\n\r\n    useEffect(() => {\r\n        setIsSeq(isSequential);\r\n    }, [isSequential])\r\n\r\n    return (\r\n        <Collapse in={isUsingSteps} >\r\n            <Grid container>\r\n                {/* <Grid item xs={12}>\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox \r\n                                checked={isSeq} \r\n                                onChange={toggleIsSequential}\r\n                                classes={{ root: classes.checkbox, checked: classes.checked}}\r\n                            />\r\n                        }\r\n                        className={classes.isSequential} \r\n                        label={t(\"tasksModule.upsert.isSequential\")}\r\n                    />\r\n                </Grid> */}\r\n                {\r\n                    steps.map((step, i) => \r\n                    <Grid container className={classes.textContainer}>\r\n                        <Grid item xs={10}>\r\n                            <TextField\r\n                                variant={\"outlined\"}\r\n                                label={`${t(`tasksModule.upsert.step`)} ${step.order}`}\r\n                                value={ step.description }\r\n                                onChange={handleChange(i)}\r\n                                className={classes.textField}\r\n                                size={'medium'}\r\n                                multiline={true}\r\n                                helperText={ `${60 - step.description.length} ${t(\"tasksModule.upsert.titleLimit\")}` }\r\n                                inputProps={{\r\n                                    maxLength: 60\r\n                                }}\r\n                                FormHelperTextProps={{\r\n                                    style: { color: 'rgba(255,255,255,0.6)' }\r\n                                }}\r\n                                \r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n                            <IconButton\r\n                                className={classes.iconBtn}\r\n                                onClick={removeStep(step.order)}\r\n                            >\r\n                                <DeleteOutlineRoundedIcon className={classes.icon} />\r\n                            </IconButton>\r\n                        </Grid>\r\n                    </Grid>\r\n                    ) \r\n                }\r\n                <Grid item xs={12}>\r\n                    <Button \r\n                        className={classes.addBtn}\r\n                        startIcon={ <AddIcon className={classes.addIcon} />}\r\n                        onClick={addStep}\r\n                    >\r\n                        {t(\"tasksModule.upsert.addStep\")}\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Collapse>\r\n\r\n    )\r\n} \r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    textContainer: {\r\n        padding: '5px',\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    textField: {\r\n        width: '100%',\r\n        '& fieldset': {\r\n            borderRadius: '5px',\r\n        },  \r\n    },\r\n    isSequential: {\r\n        color: 'white',\r\n        padding: '0px 15px 10px'\r\n    },\r\n    checkbox: {\r\n        color: 'rgba(255,255,255,0.2)',\r\n        '&$checked': {\r\n          color: 'rgba(255,255,255,0.8)',\r\n        },\r\n    },\r\n    checked: {},\r\n    addBtn: {\r\n        color: 'rgba(255,255,255,0.6)',\r\n        fontSize: '16px',\r\n        border: '1px solid rgba(255,255,255,0.6)' ,\r\n        borderRadius: '50px',\r\n        padding: '5px 30px 5px 15px',\r\n        margin: '5px',\r\n        whiteSpace: 'nowrap',\r\n        '&:hover': {\r\n            background: 'rgba(255,255,255,0.8)',\r\n            color: 'rgba(0,0,0,0.8)',\r\n\r\n        }   \r\n    },\r\n    iconBtn: {\r\n        color: 'rgba(255,255,255,0.6)',\r\n        fontSize: '16px',\r\n        border: '1px solid rgba(255,255,255,0.6)' ,\r\n        borderRadius: '50px',\r\n        padding: '10px',\r\n        margin: '0 10px 20px',\r\n        '&:hover': {\r\n            background: 'rgba(255,255,255,0.8)',\r\n            color: 'rgba(0,0,0,0.8)',\r\n\r\n        }   \r\n    }\r\n}))","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\Tasks.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\TasksList.js",["550"],"import { Fade, Grid, LinearProgress, makeStyles } from '@material-ui/core';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useLocation } from 'react-router';\r\nimport { getTasks } from '../../../api/tasksApi';\r\nimport { AuthContext } from '../../../context/AuthContext';\r\nimport { useQuery } from '../../reuseables/customHooks/useQuery';\r\nimport { TaskMinified } from './TaskMinified';\r\nimport { TasksControls } from './TasksControls';\r\n\r\nexport const TasksList = () => {\r\n\tconst classes = useStyles();\r\n\tconst location = useLocation();\r\n\tconst query = useQuery(location.search)\r\n\tconst { auth } = useContext(AuthContext);\r\n\tconst { t } = useTranslation();\r\n\tconst [isLoading, setIsLoading] = useState(true);\r\n\tconst [tasks, setTasks] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tgetTasks(auth.user.tenant, query)\r\n\t\t\t.then((data) => {\r\n\t\t\t\tsetTasks(data);\r\n\t\t\t\tconsole.log(data);\r\n\t\t\t})\r\n\t\t\t.finally(() => {\r\n\t\t\t\tsetIsLoading(false);\r\n\t\t\t});\r\n\t}, [isLoading]);\r\n\r\n\tuseEffect(() => {\r\n        setIsLoading(true)\r\n    }, [location.search])\r\n\r\n\treturn (\r\n\t\t<Grid container justify=\"center\">\r\n\t\t\t<div className={classes.pageModule}>{t('tasksModule.tasks')}</div>\r\n\t\t\t<Grid item xs={12}>\r\n\t\t\t\t<TasksControls />\r\n\t\t\t</Grid>\r\n\t\t\t{\r\n\t\t\t\tisLoading ?\r\n                <LinearProgress />\r\n\t\t\t\t:\r\n\t\t\t\t<Fade in={!isLoading}>\r\n\t\t\t\t\t<Grid container className={classes.listContainer}>\r\n\t\t\t\t\t\t{tasks.map((task, i) => (\r\n\t\t\t\t\t\t\t<TaskMinified data={task} key={i} />\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Fade>\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t</Grid>\r\n\t);\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tlistContainer: {\r\n\t\tpadding: '8px 0',\r\n\t},\r\n\tpageModule: {\r\n\t\tcolor: 'white',\r\n\t\tpadding: '10px 40px',\r\n\t\tfontSize: '18px',\r\n\t\tbackground: 'rgba(0,0,0,0.6)',\r\n\t\tmargin: '0px auto 5px',\r\n\t\twidth: '30%',\r\n\t\ttextAlign: 'center',\r\n\t\tborderRadius: '0 0 25px 25px',\r\n\t\tlineHeight: '1',\r\n\t},\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\TaskView.js",["551","552"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\TaskMinified.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\ItemLink.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\TimeActive.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\TaskViewControls.js",["553","554","555","556"],"import {\r\n\tMenuItem,\r\n\tmakeStyles,\r\n\tIconButton,\r\n\tListItemIcon,\r\n\tMenu,\r\n\tFade,\r\n} from '@material-ui/core';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport DoubleArrowIcon from '@material-ui/icons/DoubleArrow';\r\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\r\nimport TransferWithinAStationRoundedIcon from '@material-ui/icons/TransferWithinAStationRounded';\r\nimport AccessAlarmRoundedIcon from '@material-ui/icons/AccessAlarmRounded';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport { LanguageContext } from '../../../context/LanguageContext';\r\nimport clsx from 'clsx';\r\nimport CloseRoundedIcon from '@material-ui/icons/CloseRounded';\r\n\r\nexport const TaskViewControls = ({\r\n\tid,\r\n\ttaskId,\r\n\teditTask,\r\n\tupdateOwner,\r\n\tchangeStatus,\r\n\thandleScheduler\r\n}) => {\r\n\tconst classes = useStyles();\r\n\tconst { lang } = useContext(LanguageContext);\r\n\tconst { t, i18n } = useTranslation();\r\n\tconst [expanded, setExpanded] = useState(null);\r\n\r\n\tconst openInNewWindow = () => {\r\n\t\twindow.open(`http://localhost:3000/workspace/tasks/${taskId}`);\r\n\t};\r\n\r\n\tconst handleExpanded = (event) => {\r\n\t\tif (expanded) {\r\n\t\t\tsetExpanded(null);\r\n\t\t}\r\n\t\tsetExpanded(event.currentTarget);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<IconButton className={classes.expandIcon} onClick={handleExpanded}>\r\n\t\t\t\t<MoreVertIcon className={classes.icon} />\r\n\t\t\t</IconButton>\r\n\t\t\t<Menu\r\n                onClick={() => setExpanded(null)}\r\n\t\t\t\tclassName={classes.container}\r\n\t\t\t\tanchorEl={expanded}\r\n\t\t\t\topen={Boolean(expanded)}\r\n\t\t\t\tonClose={() => setExpanded(null)}\r\n\t\t\t\tclasses={{\r\n\t\t\t\t\tpaper: classes.menu,\r\n\t\t\t\t}}\r\n\t\t\t\tanchorOrigin={{\r\n\t\t\t\t\tvertical: 'bottom',\r\n\t\t\t\t\thorizontal: 'left',\r\n\t\t\t\t}}\r\n\t\t\t\ttransformOrigin={{\r\n\t\t\t\t\tvertical: 'top',\r\n\t\t\t\t\thorizontal: 'left',\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<div\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tdirection: lang.code === 'he' ? 'rtl' : 'ltr',\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tclassName={classes.menuHeader}\r\n\t\t\t\t>\r\n\t\t\t\t\t{t('tasksModule.controls.taskMenu')}\r\n\t\t\t\t\t<IconButton\r\n                        style={{ display: 'flex', justifyContent: 'flex-end' }}\r\n                        onClick={() => setExpanded(null)}\r\n                        className={classes.close}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<CloseRoundedIcon className={classes.icon} />\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t</div>\r\n\t\t\t\t<MenuItem\r\n\t\t\t\t\tstyle={{ direction: lang.code === 'he' ? 'rtl' : 'ltr' }}\r\n\t\t\t\t\tclassName={classes.iconBtn}\r\n\t\t\t\t\tonClick={openInNewWindow}\r\n\t\t\t\t>\r\n\t\t\t\t\t<ListItemIcon>\r\n\t\t\t\t\t\t<OpenInNewIcon className={classes.icon} />\r\n\t\t\t\t\t</ListItemIcon>\r\n\t\t\t\t\t{t('general.openInNew')}\r\n\t\t\t\t</MenuItem>\r\n\r\n\t\t\t\t<MenuItem\r\n\t\t\t\t\tstyle={{ direction: lang.code === 'he' ? 'rtl' : 'ltr' }}\r\n\t\t\t\t\tclassName={classes.iconBtn}\r\n\t\t\t\t\tonClick={editTask}\r\n\t\t\t\t>\r\n\t\t\t\t\t<ListItemIcon>\r\n\t\t\t\t\t\t<CreateIcon className={classes.icon} />\r\n\t\t\t\t\t</ListItemIcon>\r\n\t\t\t\t\t{t('tasksModule.controls.editDetails')}\r\n\t\t\t\t</MenuItem>\r\n\r\n\t\t\t\t<MenuItem\r\n\t\t\t\t\tstyle={{ direction: lang.code === 'he' ? 'rtl' : 'ltr' }}\r\n\t\t\t\t\tclassName={classes.iconBtn}\r\n\t\t\t\t\tonClick={updateOwner}\r\n\t\t\t\t>\r\n\t\t\t\t\t<ListItemIcon>\r\n\t\t\t\t\t\t<TransferWithinAStationRoundedIcon\r\n\t\t\t\t\t\t\tclassName={classes.icon}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</ListItemIcon>\r\n\t\t\t\t\t{t('tasksModule.controls.changeOwner')}\r\n\t\t\t\t</MenuItem>\r\n\r\n\t\t\t\t<MenuItem\r\n\t\t\t\t\tstyle={{ direction: lang.code === 'he' ? 'rtl' : 'ltr' }}\r\n\t\t\t\t\tclassName={classes.iconBtn}\r\n\t\t\t\t\tonClick={changeStatus}\r\n\t\t\t\t>\r\n\t\t\t\t\t<ListItemIcon>\r\n\t\t\t\t\t\t<DoubleArrowIcon className={classes.icon} />\r\n\t\t\t\t\t</ListItemIcon>\r\n\t\t\t\t\t{t('tasksModule.controls.changeStatus')}\r\n\t\t\t\t</MenuItem>\r\n\r\n\t\t\t\t<MenuItem\r\n\t\t\t\t\tstyle={{ direction: lang.code === 'he' ? 'rtl' : 'ltr' }}\r\n\t\t\t\t\tclassName={classes.iconBtn}\r\n\t\t\t\t\tonClick={handleScheduler}\r\n\t\t\t\t>\r\n\t\t\t\t\t<ListItemIcon>\r\n\t\t\t\t\t\t<AccessAlarmRoundedIcon className={classes.icon} />\r\n\t\t\t\t\t</ListItemIcon>\r\n\t\t\t\t\t{t('tasksModule.controls.schedule')}\r\n\t\t\t\t</MenuItem>\r\n\t\t\t</Menu>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tcontainer: {\r\n\t\tdisplay: 'flex',\r\n    },\r\n    expandIcon: {\r\n        color: 'white',\r\n        background: 'rgba(0,0,0,0.3)',\r\n        '&:hover': {\r\n            background: 'rgba(0,0,0,0.5)',\r\n        }\r\n    },\r\n\ticonBtn: {\r\n        color: 'white',\r\n        marginRight: '20px',\r\n        borderRadius: '0 25px 25px 0',\r\n        '&:hover': {\r\n            transform: 'scale(1.077)'\r\n        }\r\n\t},\r\n\ticon: {\r\n\t\tfontSize: '20px',\r\n\t\tcolor: 'white'\r\n\t},\r\n\tmenu: {\r\n\t\tbackground: 'rgba(0,0,0,0.7)',\r\n\t\tbackdropFilter: 'blur(10px)',\r\n\t\tcolor: 'white',\r\n\t\tboxShadow: 'rgba(0,0,0,0.4) 0 0 2px 1px',\r\n\t\tborderRadius: '10px'\r\n\t},\r\n\tmenuitem: {\r\n\t\tminWidth: '200px',\r\n    },\r\n    menuHeader: {\r\n        borderBottom: '1px solid rgba(255,255,255,0.2)',\r\n        marginBottom: '10px',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        padding: '5px 10px 5px 20px',\r\n        alignItems: 'center',\r\n        outline: 'none'\r\n    },\r\n    close: {\r\n        padding: '6px',\r\n        margin: 0\r\n    }\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\tasks\\TasksControls.js",["557","558"],"import {\r\n\tButton,\r\n\tCollapse,\r\n\tGrid,\r\n\tmakeStyles,\r\n\tuseMediaQuery,\r\n} from '@material-ui/core';\r\nimport { ClearRounded } from '@material-ui/icons';\r\nimport BlurOnRoundedIcon from '@material-ui/icons/BlurOnRounded';\r\nimport DoubleArrowIcon from '@material-ui/icons/DoubleArrow';\r\nimport ExpandMoreRoundedIcon from '@material-ui/icons/ExpandMoreRounded';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport PersonRoundedIcon from '@material-ui/icons/PersonRounded';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport { getAsset, getFullAddress } from '../../../api/assetsApi';\r\nimport { removeQueryParam } from '../../../api/genericApi';\r\nimport {\r\n\tgetAssetsSuggestions,\r\n\tgetSystemsByAssetOptions,\r\n} from '../../../api/systemsApi';\r\nimport { getTasksStatusListSuggestions } from '../../../api/tasksApi';\r\nimport { createUserOptions } from '../../../api/userApi';\r\nimport { useQuery } from '../../reuseables/customHooks/useQuery';\r\nimport { FilterByMultiSelect } from '../../reuseables/FilterByMultiSelect';\r\nimport { SearchBoxSelect } from '../../reuseables/SearchBoxSelect';\r\n\r\nexport const TasksControls = () => {\r\n\tconst history = useHistory();\r\n\tconst location = useLocation();\r\n\tconst query = useQuery(location.search);\r\n\tconst classes = useStyles();\r\n\tconst downSm = useMediaQuery((theme) => theme.breakpoints.down('md'));\r\n\tconst { t, i18n } = useTranslation();\r\n\tconst [reloadedValue, setReloadedValue] = useState(null);\r\n\tconst [collapsed, setCollapsed] = useState(!downSm ? true : false);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (query.asset) {\r\n\t\t\thandleReloaded(query.asset).then((data) => {\r\n\t\t\t\tif (data) {\r\n\t\t\t\t\tsetReloadedValue(data);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tsetReloadedValue({\r\n\t\t\t\tlabel: '',\r\n\t\t\t\tvalue: null,\r\n\t\t\t});\r\n\t\t\thistory.push({\r\n\t\t\t\tpath: location.pathname,\r\n\t\t\t\tsearch: removeQueryParam(location.search, 'system'),\r\n\t\t\t});\r\n\t\t}\r\n\t}, [location.search]);\r\n\r\n\tconst handleReloaded = async (assetId) => {\r\n\t\tconst res = await getAsset(assetId, false);\r\n\t\tif (res) {\r\n\t\t\treturn {\r\n\t\t\t\tlabel: getFullAddress(res),\r\n\t\t\t\tvalue: res._id,\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n\r\n\tconst toggleCollapse = () => {\r\n\t\tif (collapsed) {\r\n\t\t\tsetCollapsed(false);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsetCollapsed(true);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t{downSm && (\r\n\t\t\t\t<Grid container justify=\"center\">\r\n\t\t\t\t\t<Grid item xs={12} className={classes.gridItem}>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tclassName={classes.sortandfilter}\r\n\t\t\t\t\t\t\tstartIcon={\r\n\t\t\t\t\t\t\t\t<FilterListIcon className={classes.icon} />\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tendIcon={\r\n\t\t\t\t\t\t\t\tcollapsed ? (\r\n\t\t\t\t\t\t\t\t\t<ClearRounded />\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t<ExpandMoreRoundedIcon />\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tonClick={toggleCollapse}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{t(\r\n\t\t\t\t\t\t\t\t`tasksModule.${\r\n\t\t\t\t\t\t\t\t\tcollapsed ? 'hide' : 'show'\r\n\t\t\t\t\t\t\t\t}Filters`\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t)}\r\n\t\t\t<Collapse in={collapsed}>\r\n\t\t\t\t<Grid container justify=\"center\">\r\n\t\t\t\t\t<Grid item xs={12} className={classes.gridItem}>\r\n\t\t\t\t\t\t{reloadedValue && (\r\n\t\t\t\t\t\t\t<SearchBoxSelect\r\n\t\t\t\t\t\t\t\tsuggestionsFunc={getAssetsSuggestions}\r\n\t\t\t\t\t\t\t\tplaceholder={t('systemsModule.filterByAsset')}\r\n\t\t\t\t\t\t\t\tfilterField={'asset'}\r\n\t\t\t\t\t\t\t\treloadedLabel={reloadedValue.label}\r\n\t\t\t\t\t\t\t\treloadedValue={reloadedValue.value}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t{query.asset && (\r\n\t\t\t\t\t\t\t<FilterByMultiSelect\r\n\t\t\t\t\t\t\t\toptionsFunc={() =>\r\n\t\t\t\t\t\t\t\t\tgetSystemsByAssetOptions(query.asset)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tplaceholder={t(\r\n\t\t\t\t\t\t\t\t\t'systemsModule.filterBySystemName'\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\tfilterIcon={\r\n\t\t\t\t\t\t\t\t\t<BlurOnRoundedIcon\r\n\t\t\t\t\t\t\t\t\t\tclassName={classes.icon}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tfilterField={'system'}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t<FilterByMultiSelect\r\n\t\t\t\t\t\t\toptionsFunc={getTasksStatusListSuggestions}\r\n\t\t\t\t\t\t\tplaceholder={t('tasksModule.filterByStatus')}\r\n\t\t\t\t\t\t\tfilterIcon={\r\n\t\t\t\t\t\t\t\t<DoubleArrowIcon className={classes.icon} />\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfilterField={'status'}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<Grid item xs={12} className={classes.gridItem}>\r\n\t\t\t\t\t\t<FilterByMultiSelect\r\n\t\t\t\t\t\t\toptionsFunc={createUserOptions}\r\n\t\t\t\t\t\t\tplaceholder={t('tasksModule.filterByTaskOwner')}\r\n\t\t\t\t\t\t\tfilterIcon={\r\n\t\t\t\t\t\t\t\t<PersonRoundedIcon className={classes.icon} />\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfilterField={'owner'}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Collapse>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nconst useStyles = makeStyles((them) => ({\r\n\tgridItem: {\r\n\t\tdisplay: 'flex',\r\n\t\tjustifyContent: 'center',\r\n\t\talignItems: 'flex-start',\r\n\t\tflexWrap: 'wrap',\r\n\t},\r\n\ticon: {\r\n\t\tfontSize: '20px',\r\n\t\tmarginLeft: '4px',\r\n\t\tcolor: 'white',\r\n\t\tborderRadius: '50px',\r\n\t\tpadding: '6px',\r\n\t\tborder: '1px solid rgba(255,255,255,0.2)',\r\n\t},\r\n\tsortandfilter: {\r\n\t\tborder: '1px solid rgba(255,255,255,0.2)',\r\n\t\tbackground: 'rgba(0,0,0,0.7)',\r\n\t\tcolor: 'white',\r\n\t\tborderRadius: '50px',\r\n\t\tpadding: '5px 25px 5px 3px',\r\n\t\twhiteSpace: 'nowrap',\r\n\t\t'&:hover': {\r\n\t\t\tbackground: 'black',\r\n\t\t},\r\n\t},\r\n\ttypeGroup: {\r\n\t\tmargin: '5px',\r\n\t\theight: '45px',\r\n\t},\r\n\tmodeBtn: {\r\n\t\tpadding: '0 15px 0 5px',\r\n\t\tcolor: 'white',\r\n\t\twidth: 'auto',\r\n\t\twhiteSpace: 'nowrap',\r\n\t\tborder: '1px solid rgba(255,255,255,0.2)',\r\n\t},\r\n\tlistBtn: {\r\n\t\tborderRadius: '25px 0 0 25px',\r\n\t},\r\n\tblocksBtn: {\r\n\t\tborderRadius: '0px 25px 25px 0px',\r\n\t},\r\n\tmodeBtnActive: {\r\n\t\tbackground: 'rgba(0,0,0,0.6)',\r\n\t},\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\scheduler\\Scheduler.js",["559","560","561"],"import {\r\n\tBackdrop,\r\n\tButton,\r\n\tFade,\r\n\tGrid,\r\n\tmakeStyles,\r\n\tModal,\r\n\tPaper,\r\n} from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { LanguageContext } from '../../../context/LanguageContext';\r\nimport { ScheduleItem } from './ScheduleItem';\r\nimport clsx from 'clsx';\r\nimport { AuthContext } from '../../../context/AuthContext';\r\n\r\nconst intervals = ['day', 'week', 'month', 'year', 'date'];\r\nconst months = [\r\n\t'january',\r\n\t'february',\r\n\t'march',\r\n\t'april',\r\n\t'may',\r\n\t'june',\r\n\t'july',\r\n\t'august',\r\n\t'september',\r\n\t'october',\r\n\t'november',\r\n\t'december',\r\n];\r\n\r\nexport const Scheduler = ({ scData, handleSave, handleClose }) => {\r\n\tconst classes = useStyles();\r\n\tconst { lang } = useContext(LanguageContext);\r\n\tconst { t } = useTranslation();\r\n\tconst { auth } = useContext(AuthContext);\r\n\tconst [schedules, setSchedules] = useState([\r\n\t\t{\r\n\t\t\ttenant: auth.user.tenant,\r\n\t\t\tcreatedBy: auth.user._id,\r\n\t\t\tstartDate: '',\r\n\t\t\tinterval: '',\r\n\t\t\tintervalNumber: 1\r\n\t\t},\r\n\t]);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetSchedules(scData)\r\n\t}, [scData])\r\n\r\n\tconst updateSchedules = async (data, index) => {\r\n\t\tlet scs = [...schedules];\r\n\t\tscs[index] = data;\r\n\t\tsetSchedules(scs);\r\n\t};\r\n\r\n\tconst removeSchedule = (index) => (event) => {\r\n\t\tlet scs = schedules.filter((s, i) => s._id !== index && index !== i);\r\n\t\tsetSchedules(scs);\r\n\t};\r\n\r\n\tconst handleAddSchedule = () => {\r\n\t\tsetSchedules([\r\n\t\t\t...schedules,\r\n\t\t\t{\r\n\t\t\t\ttenant: auth.user.tenant,\r\n\t\t\t\tcreatedBy: auth.user._id,\r\n\t\t\t\tstartDate: '',\r\n\t\t\t\tinterval: '',\r\n\t\t\t\tintervalNumber: 1\r\n\t\t\t},\r\n\t\t]);\r\n\t};\r\n\r\n\tconst handleConfirm = async () => {\r\n\t\tconsole.log(schedules)\r\n\t\tawait handleSave(schedules);\r\n\t\thandleClose();\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Modal\r\n\t\t\topen={true}\r\n\t\t\tonClose={handleClose}\r\n\t\t\tcloseAfterTransition\r\n\t\t\tBackdropComponent={Backdrop}\r\n\t\t\tBackdropProps={{\r\n\t\t\t\ttimeout: 500,\r\n\t\t\t}}\r\n\t\t\tclassName={classes.modal}\r\n\t\t>\r\n\t\t\t<Fade in={true}>\r\n\t\t\t\t<Grid\r\n\t\t\t\t\tcontainer\r\n\t\t\t\t\tjustify=\"center\"\r\n\t\t\t\t\talignItems=\"center\"\r\n\t\t\t\t\tstyle={{ outline: '0' }}\r\n\t\t\t\t\tclassName={classes.gridCont}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Grid item xs={12} sm={9} md={6} lg={6} xl={4}>\r\n\t\t\t\t\t\t<Paper\r\n\t\t\t\t\t\t\televation={6}\r\n\t\t\t\t\t\t\tclassName={classes.paper}\r\n\t\t\t\t\t\t\tstyle={{ direction: lang.dir }}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Grid container>\r\n\t\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\t\t\txs={12}\r\n\t\t\t\t\t\t\t\t\tclassName={classes.headerRow}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<div className={classes.title}>\r\n\t\t\t\t\t\t\t\t\t\t{t('tasksModule.upsert.scheduleTitle')}\r\n\t\t\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\t\t\t\t\tclasses.notificationsInstructions\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t{t(\r\n\t\t\t\t\t\t\t\t\t\t\t\t'tasksModule.upsert.notificationsInstructions'\r\n\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tschedules.length ? \r\n\t\t\t\t\t\t\t\t\tschedules.map((sc, i) => (\r\n\t\t\t\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\t\t\t\t\txs={12}\r\n\t\t\t\t\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\t\t\t\t\tclasses.scheduleContainer\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<ScheduleItem\r\n\t\t\t\t\t\t\t\t\t\t\t\tscData={sc}\r\n\t\t\t\t\t\t\t\t\t\t\t\tupdateSchedules={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tupdateSchedules\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\tremoveSchedule={removeSchedule}\r\n\t\t\t\t\t\t\t\t\t\t\t\tindex={i}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t)) :\r\n\t\t\t\t\t\t\t\t\t<div className={classes.noItems}>\r\n\t\t\t\t\t\t\t\t\t\t{t(\"scheduler.noItems\")}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\t\tclassName={classes.addBtn}\r\n\t\t\t\t\t\t\t\t\t\t\tstartIcon={\r\n\t\t\t\t\t\t\t\t\t\t\t\t<AddIcon\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={classes.addIcon}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tonClick={handleAddSchedule}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t{t(\r\n\t\t\t\t\t\t\t\t\t\t\t\t'tasksModule.upsert.addScheduling'\r\n\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\r\n\r\n\t\t\t\t\t\t\t\t<Grid item xs={12} className={classes.controls}>\r\n\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\tclassName={clsx(\r\n\t\t\t\t\t\t\t\t\t\t\tclasses.control,\r\n\t\t\t\t\t\t\t\t\t\t\tclasses.save\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\tonClick={handleConfirm}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{t('controls.confirm')}\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\tclassName={clsx(\r\n\t\t\t\t\t\t\t\t\t\t\tclasses.control,\r\n\t\t\t\t\t\t\t\t\t\t\tclasses.cancel\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\tonClick={handleClose}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{t('controls.cancel')}\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Fade>\r\n\t\t</Modal>\r\n\t);\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tmodal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backdropFilter: 'blur(10px)'   \r\n    },\r\n\tpaper: {\r\n        background: 'rgba(0,0,0,0.4)',\r\n        border: '1px solid rgba(255,255,255,0.2)',\r\n        borderRadius: '10px',\r\n        padding: '10px 20px',\r\n        overflowY: 'overlay',\r\n        height: '80vh',\r\n        [theme.breakpoints.down('sm')]: {\r\n            height: '81vh',\r\n            borderRadius: '0',\r\n            border: '0',\r\n\t\t\tpadding: '10px 5px',\r\n\t\t\tposition: 'absolute',\r\n\t\t\ttop: 0\r\n        },\r\n        '&:focus': {\r\n            outline: 'none'\r\n        }\r\n\t},\r\n\theaderRow: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        width: '100%',      \r\n        borderBottom: '1px solid rgba(255,255,255,0.2)',\r\n    },\r\n    title: {\r\n        color: 'white',\r\n        padding: '20px 10px 10px',\r\n        fontSize: '24px'\r\n    },\r\n\tscheduleContainer: {\r\n\t\tborder: '1px solid rgba(255,255,255, 0.2)',\r\n\t\tborderRadius: '10px',\r\n\t\tpadding: '10px',\r\n\t\tmargin: '10px',\r\n\t\theight: 'fit-content',\r\n\t},\r\n\ttextContainer: {\r\n\t\tpadding: '5px',\r\n\t\tdisplay: 'flex',\r\n\t\talignItems: 'center',\r\n\t},\r\n\tselectInput: {\r\n\t\twidth: '100%',\r\n\t\t'& fieldset': {\r\n\t\t\tborderRadius: '5px',\r\n\t\t},\r\n\t},\r\n\tmenupaper: {\r\n\t\tbackground: 'rgba(0,0,0,0.8)',\r\n\t\tbackdropFilter: 'blur(10px)',\r\n\t\theight: '200px',\r\n\t\toverflowY: 'auto',\r\n\t\tborder: '1px solid rgba(255,255,255,0.2)',\r\n\t\tmarginRight: '7px',\r\n\t\tmarginLeft: '-5px',\r\n\t},\r\n\tmenuitem: {\r\n\t\tcolor: 'white',\r\n\t\twidth: '100%',\r\n\t\t'&:hover': {\r\n\t\t\tbackground: 'rgba(255,255,255,0.1)',\r\n\t\t},\r\n\t},\r\n\taddBtn: {\r\n\t\tcolor: 'rgba(255,255,255,0.6)',\r\n\t\tfontSize: '16px',\r\n\t\tborder: '1px solid rgba(255,255,255,0.6)',\r\n\t\tborderRadius: '50px',\r\n\t\tpadding: '8px 30px 8px 15px',\r\n\t\tmargin: '10px',\r\n\t\twhiteSpace: 'nowrap',\r\n\t\t'&:hover': {\r\n\t\t\tbackground: 'rgba(255,255,255,0.8)',\r\n\t\t\tcolor: 'rgba(0,0,0,0.8)',\r\n\t\t},\r\n\t},\r\n\ticonBtn: {\r\n\t\tcolor: 'rgba(255,255,255,0.6)',\r\n\t\tfontSize: '16px',\r\n\t\tborder: '1px solid rgba(255,255,255,0.6)',\r\n\t\tborderRadius: '50px',\r\n\t\tpadding: '10px',\r\n\t\tmargin: '0 10px',\r\n\t\t'&:hover': {\r\n\t\t\tbackground: 'rgba(255,255,255,0.8)',\r\n\t\t\tcolor: 'rgba(0,0,0,0.8)',\r\n\t\t},\r\n\t},\r\n\tnotificationsInstructions: {\r\n\t\tcolor: 'rgba(255,255,255,0.6)',\r\n\t\tfontSize: '12px',\r\n\t\tpadding: '10px 0',\r\n\t},\r\n\trepeatLabel: {\r\n\t\tcolor: 'white',\r\n\t},\r\n\ttextField: {\r\n\t\twidth: '100%',\r\n\t\t'& fieldset': {\r\n\t\t\tborderRadius: '5px',\r\n\t\t},\r\n\t},\r\n\ttextField: {\r\n\t\twidth: '100%',\r\n\t\t'& fieldset': {\r\n\t\t\tborderRadius: '5px',\r\n\t\t},\r\n\t},\r\n\tcontrols: {\r\n\t\tborderTop: '1px solid rgba(255,255,255,0.2)',\r\n\t\tdisplay: 'flex',\r\n\t\tjustifyContent: 'space-between',\r\n\t\tpadding: '10px',\r\n\t\tmarginTop: '100px'\r\n\t},\r\n\tcontrol: {\r\n\t\twidth: '30%',\r\n\t\tborder: '1px solid rgba(255,255,255,0.5)',\r\n\t\tfontSize: '16px',\r\n\t\tmargin: '5px',\r\n\t\tpadding: '5px 30px',\r\n\t\tborderRadius: '30px',\r\n\t\tcolor: 'white',\r\n\t},\r\n\tsave: {\r\n\t\tbackground: 'rgba(0,0,0,0.2)',\r\n\t\t'&:hover': {\r\n\t\t\tbackground: 'black',\r\n\t\t},\r\n\t\t'&:disabled': {\r\n\t\t\tcolor: 'rgba(255,255,255,0.3)',\r\n\t\t},\r\n\t},\r\n\tcancel: {\r\n\t\t'&:hover': {\r\n\t\t\tboxShadow: 'inset rgba(255,255,255,0.3) 0 0 2px 1px',\r\n\t\t},\r\n\t},\r\n\tnoItems: {\r\n\t\tcolor: 'white',\r\n\t\tpadding: '10px 20px',\r\n\t\tborderRadius: '50px',\r\n\t\tmargin: '10px',\r\n\t\tbackground: 'rgba(0,0,0,0.5)'\r\n\t}\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\scheduler\\ScheduleItem.js",["562","563","564","565","566"],"import {\r\n\tGrid,\r\n\tIconButton,\r\n\tmakeStyles,\r\n\tMenuItem,\r\n\tSelect,\r\n\tTextField\r\n} from '@material-ui/core';\r\nimport DeleteOutlineRoundedIcon from '@material-ui/icons/DeleteOutlineRounded';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { getNextIterationDate } from '../../../api/genericApi';\r\nimport { LanguageContext } from '../../../context/LanguageContext';\r\nimport { CustomDatePicker } from '../datepickers/CustomeDatePicker';\r\n\r\nconst days = [\r\n\t'sunday',\r\n\t'monday',\r\n\t'tuesday',\r\n\t'wednesday',\r\n\t'thursday',\r\n\t'friday',\r\n\t'saturday',\r\n];\r\nconst intervals = ['day', 'week', 'month', 'year', 'date'];\r\nconst months = [\r\n\t'january',\r\n\t'february',\r\n\t'march',\r\n\t'april',\r\n\t'may',\r\n\t'june',\r\n\t'july',\r\n\t'august',\r\n\t'september',\r\n\t'october',\r\n\t'november',\r\n\t'december',\r\n];\r\n\r\nexport const ScheduleItem = ({\r\n\tscData,\r\n\tupdateSchedules,\r\n\tindex,\r\n\tremoveSchedule,\r\n}) => {\r\n\tconst classes = useStyles();\r\n\tconst { lang } = useContext(LanguageContext);\r\n\tconst { t } = useTranslation();\r\n\tconst [schedule, setSchedule] = useState(scData);\r\n\r\n\tuseEffect(() => {\r\n\t\tupdateSchedules(schedule, index);\r\n\t}, [schedule]);\r\n\r\n\tconst handleChangeStartDate = (date) => {\r\n\t\tsetSchedule({\r\n\t\t\t...schedule,\r\n\t\t\tstartDate: date,\r\n\t\t});\r\n\t};\r\n\r\n\tconst handleChange = (fieldName, payload) => (event) => {\r\n\t\tconsole.log(fieldName, payload);\r\n\t\tsetSchedule({\r\n\t\t\t...schedule,\r\n\t\t\t[fieldName]: payload ? payload : event.target.value,\r\n\t\t});\r\n\t};\r\n\r\n\tconst handleCalcNextIteration = () => {\r\n\t\treturn getNextIterationDate(\r\n\t\t\tschedule.startDate,\r\n\t\t\tschedule.interval,\r\n\t\t\tschedule.intervalNumber,\r\n\t\t\tlang.dateonly\r\n\t\t);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Grid container className={classes.textContainer}>\r\n\t\t\t<Grid container className={classes.gridItem}>\r\n\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t<CustomDatePicker\r\n\t\t\t\t\t\tlabel={t('scheduler.startDate')}\r\n\t\t\t\t\t\tdata={schedule.startDate}\r\n\t\t\t\t\t\thandleChange={handleChangeStartDate}\r\n\t\t\t\t\t\tdisablePast\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t\t<Grid container className={classes.gridItem}>\r\n\t\t\t\t<Grid item xs={4} lg={6} xl={6}>\r\n\t\t\t\t\t<div className={classes.label}>\r\n\t\t\t\t\t\t{t('scheduler.repeatEvery')}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid item xs={3} xl={2} className={classes.intervalNumber}>\r\n\t\t\t\t\t<TextField\r\n\t\t\t\t\t\tvariant={'outlined'}\r\n\t\t\t\t\t\tvalue={schedule.intervalNumber}\r\n\t\t\t\t\t\tonChange={handleChange('intervalNumber')}\r\n\t\t\t\t\t\tclassName={classes.textField}\r\n\t\t\t\t\t\tsize={'medium'}\r\n\t\t\t\t\t\ttype=\"tel\"\r\n\t\t\t\t\t\tinputProps={{\r\n\t\t\t\t\t\t\tmaxLength: 2\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid item xs={5} lg={6} xl={4}>\r\n\t\t\t\t\t<Select\r\n\t\t\t\t\t\tvariant={'outlined'}\r\n\t\t\t\t\t\tvalue={schedule.interval}\r\n\t\t\t\t\t\tonChange={handleChange('interval')}\r\n\t\t\t\t\t\tclassName={classes.selectInput}\r\n\t\t\t\t\t\tMenuProps={{\r\n\t\t\t\t\t\t\tanchorOrigin: {\r\n\t\t\t\t\t\t\t\tvertical: 'bottom',\r\n\t\t\t\t\t\t\t\thorizontal: 'center',\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\ttransformOrigin: {\r\n\t\t\t\t\t\t\t\tvertical: 'top',\r\n\t\t\t\t\t\t\t\thorizontal: 'center',\r\n\t\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\t\tclasses: {\r\n\t\t\t\t\t\t\t\tpaper: classes.menupaper,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{intervals.map((interval, i) => {\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\tschedule.intervalNumber > 1 &&\r\n\t\t\t\t\t\t\t\tinterval === 'date'\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<MenuItem\r\n\t\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\t\tvalue={interval}\r\n\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\tdirection: lang.dir,\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\tclassName={classes.menuitem}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{schedule.intervalNumber > 1\r\n\t\t\t\t\t\t\t\t\t\t? t(`dates.${interval}s`)\r\n\t\t\t\t\t\t\t\t\t\t: t(`dates.${interval}`)}\r\n\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</Select>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t\t{Boolean(schedule.interval) &&\r\n\t\t\t\tBoolean(schedule.intervalNumber) &&\r\n\t\t\t\tBoolean(schedule.startDate) && (\r\n\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t<div className={classes.nextIteration}>\r\n\t\t\t\t\t\t\t{`${t(\r\n\t\t\t\t\t\t\t\t'scheduler.nextIteration'\r\n\t\t\t\t\t\t\t)} ${handleCalcNextIteration()}`}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t)}\r\n\r\n\t\t\t<Grid item xs={12} className={classes.remove}>\r\n\t\t\t\t<IconButton\r\n\t\t\t\t\tclassName={classes.iconBtn}\r\n\t\t\t\t\tonClick={removeSchedule(index)}\r\n\t\t\t\t>\r\n\t\t\t\t\t<DeleteOutlineRoundedIcon className={classes.icon} />\r\n\t\t\t\t</IconButton>\r\n\t\t\t</Grid>\r\n\t\t</Grid>\r\n\t);\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tmodal: {\r\n\t\tdisplay: 'flex',\r\n\t\talignItems: 'center',\r\n\t\tjustifyContent: 'center',\r\n\t\tbackdropFilter: 'blur(10px)',\r\n\t\toutline: 'none !important',\r\n\t},\r\n\tpaper: {\r\n\t\tbackground: 'rgba(0,0,0,0.4)',\r\n\t\tborder: '1px solid rgba(255,255,255,0.2)',\r\n\t\tborderRadius: '10px',\r\n\t\tpadding: '10px 20px',\r\n\t\toverflowY: 'overlay',\r\n\t\theight: '80vh',\r\n\t\t[theme.breakpoints.down('sm')]: {\r\n\t\t\theight: '81vh',\r\n\t\t\tborderRadius: '0',\r\n\t\t\tborder: '0',\r\n\t\t\tpadding: '10px 5px',\r\n\t\t},\r\n\t\t'&:focus': {\r\n\t\t\toutline: 'none',\r\n\t\t},\r\n\t},\r\n\tscheduleContainer: {\r\n\t\tborder: '1px solid rgba(255,255,255, 0.2)',\r\n\t\tborderRadius: '10px',\r\n\t\tpadding: '10px',\r\n\t\tmargin: '10px',\r\n\t},\r\n\ttextContainer: {\r\n\t\tpadding: '5px',\r\n\t\tdisplay: 'flex',\r\n\t\talignItems: 'center',\r\n\t},\r\n\tselectInput: {\r\n\t\twidth: '100%',\r\n\t\t'& fieldset': {\r\n\t\t\tborderRadius: '5px',\r\n\t\t},\r\n\t},\r\n\tmenupaper: {\r\n\t\tbackground: 'rgba(0,0,0,0.8)',\r\n\t\tbackdropFilter: 'blur(10px)',\r\n\t\theight: '200px',\r\n\t\toverflowY: 'auto',\r\n\t\tborder: '1px solid rgba(255,255,255,0.2)',\r\n\t\tmarginRight: '7px',\r\n\t\tmarginLeft: '-5px',\r\n\t},\r\n\tmenuitem: {\r\n\t\tcolor: 'white',\r\n\t\twidth: '100%',\r\n\t\t'&:hover': {\r\n\t\t\tbackground: 'rgba(255,255,255,0.1)',\r\n\t\t},\r\n\t},\r\n\taddBtn: {\r\n\t\tcolor: 'rgba(255,255,255,0.6)',\r\n\t\tfontSize: '16px',\r\n\t\tborder: '1px solid rgba(255,255,255,0.6)',\r\n\t\tborderRadius: '50px',\r\n\t\tpadding: '5px 30px 5px 15px',\r\n\t\tmargin: '5px 5px 15px',\r\n\t\twhiteSpace: 'nowrap',\r\n\t\t'&:hover': {\r\n\t\t\tbackground: 'rgba(255,255,255,0.8)',\r\n\t\t\tcolor: 'rgba(0,0,0,0.8)',\r\n\t\t},\r\n\t},\r\n\ticonBtn: {\r\n\t\tcolor: 'rgba(255,255,255,0.6)',\r\n\t\tfontSize: '16px',\r\n\t\tborder: '1px solid rgba(255,255,255,0.6)',\r\n\t\tborderRadius: '50px',\r\n\t\tpadding: '10px',\r\n\t\tmargin: '0 10px',\r\n\t\t'&:hover': {\r\n\t\t\tbackground: 'rgba(255,255,255,0.8)',\r\n\t\t\tcolor: 'rgba(0,0,0,0.8)',\r\n\t\t},\r\n\t},\r\n\tnotificationsInstructions: {\r\n\t\tcolor: 'rgba(255,255,255,0.6)',\r\n\t\tfontSize: '12px',\r\n\t\tpadding: '10px',\r\n\t},\r\n\tlabel: {\r\n\t\tcolor: 'white',\r\n\t\tpadding: '0 10px',\r\n\t},\r\n\ttextField: {\r\n\t\twidth: '100%',\r\n\t\t'& fieldset': {\r\n\t\t\tborderRadius: '5px',\r\n\t\t},\r\n\t},\r\n\ttextField: {\r\n\t\twidth: '100%',\r\n\t\t'& fieldset': {\r\n\t\t\tborderRadius: '5px',\r\n\t\t},\r\n\t},\r\n\tgridItem: {\r\n\t\tdisplay: 'flex',\r\n\t\talignItems: 'center',\r\n\t\tpadding: '5px 10px',\r\n\t\t[theme.breakpoints.down('sm')]: {\r\n\t\t\tpadding: '5px',\r\n\t\t},\r\n\t},\r\n\tnextIteration: {\r\n\t\tpadding: '10px 20px',\r\n\t\tcolor: 'rgba(255,255,255,0.5)',\r\n\t\tfontSize: '16px',\r\n\t\ttextAlign: 'right',\r\n\t},\r\n\tremove: {\r\n\t\tdisplay: 'flex',\r\n\t\tjustifyContent: 'flex-end',\r\n\t\tmargin: '10px',\r\n\t},\r\n\tdayContainer: {\r\n\t\tdisplay: 'flex',\r\n\t\tjustifyContent: 'flex-end',\r\n\t\talignItems: 'center',\r\n\t\tcolor: 'white',\r\n\t\tfontSize: '14px',\r\n\t},\r\n\tday: {\r\n\t\tdisplay: 'grid',\r\n\t\tplaceItems: 'center',\r\n\t\tbackground: 'rgba(0,0,0,0.3)',\r\n\t\tborder: '1px solid rgba(255,255,255,0.2)',\r\n\t\tborderRadius: '50px',\r\n\t\theight: '30px',\r\n\t\twidth: '30px',\r\n\t\tmargin: '0 3px',\r\n\t\tcursor: 'pointer',\r\n\t\t'&:hover': {\r\n\t\t\tbackground: 'rgba(255,255,255,0.4)',\r\n\t\t},\r\n\t},\r\n\tdayChosen: {\r\n\t\tbackground: 'white',\r\n\t\tcolor: 'black',\r\n\t},\r\n\tintervalNumber: {\r\n\t\tpaddingRight: '10px',\r\n\t},\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\datepickers\\CustomDateTimePicker.js",["567"],"import DateFnsUtils from '@date-io/date-fns';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { DateTimePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport heLocale from 'date-fns/locale/he';\r\nimport React, {useContext} from 'react';\r\nimport { LanguageContext } from '../../../context/LanguageContext';\r\n\r\nexport const CustomDateTimePicker = ({ data, handleChange, label, disablePast }) => {\r\n\tconst classes = useStyles();\r\n\tconst { lang } = useContext(LanguageContext);\r\n\r\n\treturn (\r\n\t\r\n\t\t\t<MuiPickersUtilsProvider utils={DateFnsUtils} locale={heLocale}>\r\n\t\t\t\t<DateTimePicker\r\n\t\t\t\t\tformat={lang.dateformat}\r\n\t\t\t\t\tlabel={label}\r\n\t\t\t\t\tvalue={data || null}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\tinputVariant={'outlined'}\r\n\t\t\t\t\tclassName={classes.textField}\r\n\t\t\t\t\tautoOk={true}\r\n\t\t\t\t\tampm={false}\r\n\t\t\t\t\tdisableToolbar={true}\r\n\t\t\t\t\tvariant={'inline'}\r\n\t\t\t\t\tdisablePast={disablePast}\r\n\t\t\t\t/>\r\n\t\t\t</MuiPickersUtilsProvider>\r\n\t);\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\ttextField: {\r\n\t\twidth: '100%',\r\n\t\t'& fieldset': {\r\n\t\t\tborderRadius: '5px',\r\n\t\t},\r\n\t},\r\n\ttextField: {\r\n\t\twidth: '100%',\r\n\t\t'& fieldset': {\r\n\t\t\tborderRadius: '5px',\r\n\t\t},\r\n\t},\r\n}));\r\n",["568","569"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\datepickers\\CustomTimePicker.js",["570"],"import DateFnsUtils from '@date-io/date-fns';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport {  MuiPickersUtilsProvider, TimePicker } from '@material-ui/pickers';\r\nimport heLocale from 'date-fns/locale/he';\r\nimport React, {useContext} from 'react';\r\nimport { LanguageContext } from '../../../context/LanguageContext';\r\n\r\nexport const CustomTimePicker = ({ data, handleChange, label }) => {\r\n\tconst classes = useStyles();\r\n\tconst { lang } = useContext(LanguageContext);\r\n\r\n\treturn (\r\n\t\r\n\t\t\t<MuiPickersUtilsProvider utils={DateFnsUtils} locale={heLocale}>\r\n\t\t\t\t<TimePicker\r\n\t\t\t\t\tformat={lang.timeonly}\r\n\t\t\t\t\tlabel={label}\r\n\t\t\t\t\tvalue={data || null}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\tinputVariant={'outlined'}\r\n\t\t\t\t\tclassName={classes.textField}\r\n\t\t\t\t\tautoOk={true}\r\n\t\t\t\t\tampm={false}\r\n\t\t\t\t\tvariant={'inline'}\r\n\t\t\t\t\tdisableToolbar={true}\r\n                    views={[\"hours\", \"minutes\"]}\r\n\t\t\t\t/>\r\n\t\t\t</MuiPickersUtilsProvider>\r\n\t);\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\ttextField: {\r\n\t\twidth: '100%',\r\n\t\t'& fieldset': {\r\n\t\t\tborderRadius: '5px',\r\n\t\t},\r\n\t},\r\n\ttextField: {\r\n\t\twidth: '100%',\r\n\t\t'& fieldset': {\r\n\t\t\tborderRadius: '5px',\r\n\t\t},\r\n\t},\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\scheduler\\DayOfWeek.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\reuseables\\datepickers\\CustomeDatePicker.js",["571"],"import DateFnsUtils from '@date-io/date-fns';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { DatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport heLocale from 'date-fns/locale/he';\r\nimport React, {useContext} from 'react';\r\nimport { LanguageContext } from '../../../context/LanguageContext';\r\n\r\nexport const CustomDatePicker = ({ data, handleChange, label, disablePast }) => {\r\n\tconst classes = useStyles();\r\n\tconst { lang } = useContext(LanguageContext);\r\n\r\n\treturn (\r\n\t\r\n\t\t\t<MuiPickersUtilsProvider utils={DateFnsUtils} locale={heLocale}>\r\n\t\t\t\t<DatePicker\r\n\t\t\t\t\tformat={lang.dateonly}\r\n\t\t\t\t\tlabel={label}\r\n\t\t\t\t\tvalue={data || null}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\tinputVariant={'outlined'}\r\n\t\t\t\t\tclassName={classes.textField}\r\n\t\t\t\t\tautoOk={true}\r\n\t\t\t\t\tampm={false}\r\n\t\t\t\t\tdisableToolbar={true}\r\n\t\t\t\t\tvariant={'inline'}\r\n\t\t\t\t\tdisablePast={disablePast}\r\n\t\t\t\t/>\r\n\t\t\t</MuiPickersUtilsProvider>\r\n\t);\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\ttextField: {\r\n\t\twidth: '100%',\r\n\t\t'& fieldset': {\r\n\t\t\tborderRadius: '5px',\r\n\t\t},\r\n\t},\r\n\ttextField: {\r\n\t\twidth: '100%',\r\n\t\t'& fieldset': {\r\n\t\t\tborderRadius: '5px',\r\n\t\t},\r\n\t},\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\documents\\UpsertDocument.js",["572","573","574","575","576"],"import {\r\n\tAvatar,\r\n\tBackdrop,\r\n\tButton,\r\n\tChip,\r\n\tFade,\r\n\tFormHelperText,\r\n\tGrid,\r\n\tIconButton,\r\n\tLinearProgress,\r\n\tmakeStyles,\r\n\tMenuItem,\r\n\tModal,\r\n\tPaper,\r\n\tSelect,\r\n\tTextField,\r\n\tuseMediaQuery,\r\n} from '@material-ui/core';\r\nimport { ClearRounded } from '@material-ui/icons';\r\nimport clsx from 'clsx';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { getFaults } from '../../../api/faultsApi';\r\nimport { getFullName } from '../../../api/genericApi';\r\nimport {\r\n\tcreateSystemMenuOptions,\r\n\tgetAssetsSuggestions,\r\n\tgetSystemsByAsset,\r\n} from '../../../api/systemsApi';\r\nimport { getTasks } from '../../../api/tasksApi';\r\nimport { createUserOptions } from '../../../api/userApi';\r\nimport { AuthContext } from '../../../context/AuthContext';\r\nimport { LanguageContext } from '../../../context/LanguageContext';\r\nimport { UserItem } from '../../user/UserItem';\r\n\r\nexport const UpsertDocument = ({\r\n\thandleClose,\r\n\thandleSave,\r\n\thandleUpdate,\r\n\tdocumentId,\r\n}) => {\r\n\tconst classes = useStyles();\r\n\tconst { lang } = useContext(LanguageContext);\r\n\tconst { auth } = useContext(AuthContext);\r\n\tconst downSm = useMediaQuery((theme) => theme.breakpoints.down('md'));\r\n\tconst { t, i18n } = useTranslation();\r\n\tconst [errors, setErrors] = useState([]);\r\n\tconst [assets, setAssets] = useState([]);\r\n\tconst [systems, setSystems] = useState([]);\r\n\tconst [tasks, setTasks] = useState([]);\r\n\tconst [faults, setFaults] = useState([]);\r\n\tconst [userList, setUserList] = useState([]);\r\n\tconst [isLoading, setIsLoading] = useState(true);\r\n\tconst [mode, setMode] = useState(handleUpdate ? 'update' : 'create');\r\n\tconst [details, setDetails] = useState({\r\n\t\ttenant: auth.user.tenant,\r\n\t\tdescription: '',\r\n\t\tasset: '',\r\n\t\tsystem: '',\r\n\t\tfault: '',\r\n\t\ttask: '',\r\n\t\tuser: '',\r\n\t\tcreatedBy: auth.user._id,\r\n\t\tfile: null,\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n\t\tcreateUserOptions()\r\n\t\t\t.then((data) => {\r\n\t\t\t\tsetUserList(data);\r\n\t\t\t\treturn getAssetsSuggestions();\r\n\t\t\t})\r\n\t\t\t.then((data) => {\r\n\t\t\t\tsetAssets(data);\r\n\t\t\t})\r\n\t\t\t.finally(() => {\r\n\t\t\t\tsetIsLoading(false);\r\n\t\t\t});\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n        if (!details.asset) {\r\n\t\t\tsetTasks([]);\r\n\t\t\tsetFaults([]);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tPromise.all([\r\n\t\t\tgetTasks(auth.user.tenant, {\r\n\t\t\t\tasset: details.asset,\r\n\t\t\t\tsystem: details.system || null,\r\n\t\t\t}),\r\n\t\t\tgetFaults(auth.user.tenant, {\r\n\t\t\t\tasset: details.asset,\r\n\t\t\t\tsystem: details.system || null,\r\n\t\t\t}),\r\n\t\t]).then((res) => {\r\n\t\t\tlet tasksOptions = [];\r\n\t\t\tlet faultsOptions = [];\r\n\t\t\tres[0].forEach((task) => {\r\n\t\t\t\ttasksOptions.push({\r\n\t\t\t\t\ttext: `${task.taskId} | ${task.title}`,\r\n\t\t\t\t\tvalue: task._id,\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\tres[1].forEach((fault) => {\r\n\t\t\t\tfaultsOptions.push({\r\n\t\t\t\t\ttext: `${fault.faultId} | ${fault.title}`,\r\n\t\t\t\t\tvalue: fault._id,\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\tsetTasks(tasksOptions);\r\n\t\t\tsetFaults(faultsOptions);\r\n\t\t});\r\n\t}, [details.asset, details.system]);\r\n\r\n\tconst validateFields = () => {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tlet errList = [];\r\n\t\t\t\r\n\r\n\t\t\tif (errList.length) {\r\n\t\t\t\tsetErrors(errList);\r\n\t\t\t\tresolve(false);\r\n\t\t\t}\r\n\t\t\tresolve(true);\r\n\t\t});\r\n\t};\r\n\r\n\tconst loadSystemOptions = async (assetId) => {\r\n\t\treturn getSystemsByAsset(assetId)\r\n\t\t\t.then((systems) => {\r\n\t\t\t\treturn createSystemMenuOptions(systems);\r\n\t\t\t})\r\n\t\t\t.then((data) => {\r\n\t\t\t\tsetSystems(data);\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t};\r\n\r\n\tconst handleConfirm = () => {\r\n\t\tvalidateFields().then((res) => {\r\n\t\t\tif (!res) return;\r\n\t\t\thandleSave(details);\r\n\t\t});\r\n\t};\r\n\r\n\tconst handleChange = (field) => async (event) => {\r\n\t\tsetDetails({\r\n\t\t\t...details,\r\n\t\t\t[field]: event.target.value,\r\n\t\t});\r\n\t\tif (field === 'asset') {\r\n\t\t\tif (event.target.value) {\r\n\t\t\t\tawait loadSystemOptions(event.target.value);\r\n\t\t\t} else {\r\n\t\t\t\tsetDetails({\r\n\t\t\t\t\t...details,\r\n\t\t\t\t\ttask: '',\r\n\t\t\t\t\tfault: '',\r\n\t\t\t\t\tsystem: '',\r\n\t\t\t\t\tasset: ''\r\n\t\t\t\t});\r\n\t\t\t\tsetSystems([]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (errors.length) {\r\n\t\t\tsetErrors(errors.filter((err) => err.field !== field));\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleFileUpload = (event) => {\r\n\t\tconsole.log(event.target.files[0])\r\n\t\tsetDetails({\r\n\t\t\t...details,\r\n\t\t\tfile: event.target.files[0],\r\n\t\t});\r\n\t};\r\n\r\n\treturn isLoading ? (\r\n\t\t<LinearProgress />\r\n\t) : (\r\n\t\t<Modal\r\n\t\t\topen={true}\r\n\t\t\tonClose={handleClose}\r\n\t\t\tcloseAfterTransition\r\n\t\t\tBackdropComponent={Backdrop}\r\n\t\t\tBackdropProps={{\r\n\t\t\t\ttimeout: 500,\r\n\t\t\t}}\r\n\t\t\tclassName={classes.modal}\r\n\t\t>\r\n\t\t\t<Fade in={true}>\r\n\t\t\t\t<Grid\r\n\t\t\t\t\tcontainer\r\n\t\t\t\t\tjustify=\"center\"\r\n\t\t\t\t\talignItems=\"center\"\r\n\t\t\t\t\tstyle={{ outline: '0' }}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Grid\r\n\t\t\t\t\t\titem\r\n\t\t\t\t\t\txs={12}\r\n\t\t\t\t\t\tsm={10}\r\n\t\t\t\t\t\tmd={8}\r\n\t\t\t\t\t\tlg={8}\r\n\t\t\t\t\t\txl={6}\r\n\t\t\t\t\t\tclassName={classes.gridCont}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Paper\r\n\t\t\t\t\t\t\televation={6}\r\n\t\t\t\t\t\t\tclassName={classes.paper}\r\n\t\t\t\t\t\t\tstyle={{ direction: lang.dir }}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<Grid container>\r\n\t\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\t\t\txs={12}\r\n\t\t\t\t\t\t\t\t\tclassName={classes.headerRow}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<div className={classes.title}>\r\n\t\t\t\t\t\t\t\t\t\t{t(\r\n\t\t\t\t\t\t\t\t\t\t\t'documentsModule.upsert.createDocument'\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className={classes.close}>\r\n\t\t\t\t\t\t\t\t\t\t<IconButton\r\n\t\t\t\t\t\t\t\t\t\t\tclassName={classes.iconBtn}\r\n\t\t\t\t\t\t\t\t\t\t\tonClick={handleClose}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<ClearRounded\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={classes.icon}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t\t\t<Grid item xs={12} className={classes.section}>\r\n\t\t\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t\t\t<div className={classes.sectionTitle}>\r\n\t\t\t\t\t\t\t\t\t\t\t{t(\r\n\t\t\t\t\t\t\t\t\t\t\t\t'documentsModule.upsert.generalDetails'\r\n\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\t\t\t\txs={12}\r\n\t\t\t\t\t\t\t\t\t\tclassName={classes.fields}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<Grid container justify=\"flex-start\">\r\n\t\t\t\t\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\t\t\t\t\t\txs={12}\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclasses.textContainer\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvariant={'outlined'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel={t(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t`documentsModule.upsert.description`\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={details.description}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={handleChange(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'description'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclasses.textField\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsize={'medium'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\t\t\txs={12}\r\n\t\t\t\t\t\t\t\t\tsm={6}\r\n\t\t\t\t\t\t\t\t\tmd={6}\r\n\t\t\t\t\t\t\t\t\tlg={6}\r\n\t\t\t\t\t\t\t\t\txl={7}\r\n\t\t\t\t\t\t\t\t\tclassName={classes.section}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t\t\t<div className={classes.sectionTitle}>\r\n\t\t\t\t\t\t\t\t\t\t\t{t('documentsModule.upsert.asset')}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\t\t\t\txs={12}\r\n\t\t\t\t\t\t\t\t\t\tclassName={classes.fields}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<Grid container justify=\"flex-start\">\r\n\t\t\t\t\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\t\t\t\t\t\txs={12}\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclasses.textContainer\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvariant={'outlined'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\terror={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\terrors.filter(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(e) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te.field ===\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`asset`\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t).length > 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={details.asset}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={handleChange(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t`asset`\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclasses.selectInput\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tMenuProps={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tanchorOrigin: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvertical: 'bottom',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thorizontal:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'center',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttransformOrigin: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvertical: 'top',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thorizontal:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'center',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tgetContentAnchorEl: null,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclasses: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpaper:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclasses.menupaper,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{assets.map((asset, i) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<MenuItem\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={asset.value}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdirection:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlang.dir,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclasses.menuitem\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{asset.text}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{errors.filter(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t(e) => e.field === 'asset'\r\n\t\t\t\t\t\t\t\t\t\t\t\t).length > 0 && (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<FormHelperText\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: '#f44336',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarginRight: '15px',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{t('errors.isRequired')}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</FormHelperText>\r\n\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\t\t\txs={12}\r\n\t\t\t\t\t\t\t\t\tsm={6}\r\n\t\t\t\t\t\t\t\t\tmd={4}\r\n\t\t\t\t\t\t\t\t\tlg={4}\r\n\t\t\t\t\t\t\t\t\txl={4}\r\n\t\t\t\t\t\t\t\t\tclassName={classes.section}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t\t\t<div className={classes.sectionTitle}>\r\n\t\t\t\t\t\t\t\t\t\t\t{t('documentsModule.upsert.system')}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\t\t\t\txs={12}\r\n\t\t\t\t\t\t\t\t\t\tclassName={classes.fields}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<Grid container justify=\"flex-start\">\r\n\t\t\t\t\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\t\t\t\t\t\txs={12}\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclasses.textContainer\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvariant={'outlined'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\terror={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\terrors.filter(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(e) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te.field ===\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`system`\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t).length > 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={details.system}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={handleChange(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t`system`\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclasses.selectInput\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tMenuProps={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tanchorOrigin: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvertical: 'bottom',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thorizontal:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'center',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttransformOrigin: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvertical: 'top',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thorizontal:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'center',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tgetContentAnchorEl: null,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclasses: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpaper:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclasses.menupaper,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{systems.map(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(system, i) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<MenuItem\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsystem.value\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdirection:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlang.dir,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclasses.menuitem\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{system.text}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{errors.filter(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t(e) => e.field === 'asset'\r\n\t\t\t\t\t\t\t\t\t\t\t\t).length > 0 && (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<FormHelperText\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: '#f44336',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarginRight: '15px',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{t('errors.isRequired')}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</FormHelperText>\r\n\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t{Boolean(tasks.length) && (\r\n\t\t\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\t\t\t\txs={12}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tclassName={classes.section}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={classes.sectionTitle}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{t(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'documentsModule.upsert.task'\r\n\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\t\t\t\t\txs={12}\r\n\t\t\t\t\t\t\t\t\t\t\tclassName={classes.fields}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\t\t\t\t\tcontainer\r\n\t\t\t\t\t\t\t\t\t\t\t\tjustify=\"flex-start\"\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\t\t\t\t\t\t\txs={12}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclasses.textContainer\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvariant={'outlined'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\terror={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\terrors.filter(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(e) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te.field ===\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`task`\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t).length > 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={details.task}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={handleChange(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`task`\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclasses.selectInput\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tMenuProps={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tanchorOrigin: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvertical:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'bottom',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thorizontal:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'center',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttransformOrigin: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvertical: 'top',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thorizontal:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'center',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgetContentAnchorEl: null,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclasses: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpaper:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclasses.menupaper,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{tasks.map(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(task, i) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<MenuItem\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttask.value\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdirection:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlang.dir,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclasses.menuitem\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{task.text}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{errors.filter(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(e) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te.field === 'task'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t).length > 0 && (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FormHelperText\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'#f44336',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarginRight:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'15px',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{t(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'errors.isRequired'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</FormHelperText>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t{Boolean(faults.length) && (\r\n\t\t\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\t\t\t\txs={12}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tclassName={classes.section}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={classes.sectionTitle}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{t(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'documentsModule.upsert.fault'\r\n\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\t\t\t\t\txs={12}\r\n\t\t\t\t\t\t\t\t\t\t\tclassName={classes.fields}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\t\t\t\t\tcontainer\r\n\t\t\t\t\t\t\t\t\t\t\t\tjustify=\"flex-start\"\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\t\t\t\t\t\t\txs={12}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclasses.textContainer\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvariant={'outlined'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\terror={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\terrors.filter(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(e) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te.field ===\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`fault`\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t).length > 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={details.fault}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={handleChange(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`fault`\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclasses.selectInput\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tMenuProps={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tanchorOrigin: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvertical:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'bottom',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thorizontal:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'center',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttransformOrigin: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvertical: 'top',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thorizontal:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'center',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgetContentAnchorEl: null,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclasses: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpaper:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclasses.menupaper,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{faults.map(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(fault, i) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<MenuItem\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfault.value\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdirection:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlang.dir,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclasses.menuitem\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{fault.text}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{errors.filter(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(e) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te.field === 'fault'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t).length > 0 && (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<FormHelperText\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'#f44336',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarginRight:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'15px',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{t(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'errors.isRequired'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</FormHelperText>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\t\t\txs={12}\r\n\t\t\t\t\t\t\t\t\tsm={6}\r\n\t\t\t\t\t\t\t\t\tmd={6}\r\n\t\t\t\t\t\t\t\t\tlg={4}\r\n\t\t\t\t\t\t\t\t\txl={4}\r\n\t\t\t\t\t\t\t\t\tclassName={classes.section}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t\t\t<div className={classes.sectionTitle}>\r\n\t\t\t\t\t\t\t\t\t\t\t{t('documentsModule.upsert.user')}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\t\t\t\txs={12}\r\n\t\t\t\t\t\t\t\t\t\tclassName={classes.fields}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\t\t\t\t\txs={12}\r\n\t\t\t\t\t\t\t\t\t\t\tclassName={classes.textContainer}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\t\t\t\t\tvariant={'outlined'}\r\n\t\t\t\t\t\t\t\t\t\t\t\terror={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\terrors.filter(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(e) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te.field === `user`\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t).length > 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={details.owner}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={handleChange(`user`)}\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={classes.selectInput}\r\n\t\t\t\t\t\t\t\t\t\t\t\tMenuProps={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tanchorOrigin: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvertical: 'bottom',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thorizontal: 'center',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttransformOrigin: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvertical: 'top',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thorizontal: 'center',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tgetContentAnchorEl: null,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclasses: {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpaper:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclasses.menupaper,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\trenderValue={(selected) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet user = userList.find(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(f) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tf._id === selected\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Chip\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize={'medium'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tavatar={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Avatar\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theight:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'40px',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twidth:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'40px',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tuser.avatar\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel={getFullName(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tuser\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclasses.chip\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{userList.map((user, i) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<MenuItem\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={user.value}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdirection: lang.dir,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclasses.menuitem\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclasses.userCont\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<UserItem\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tuser={user}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tavatarSize={40}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize={13}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshowName\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t{mode === 'create' && (\r\n\t\t\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\t\t\t\txs={12}\r\n\t\t\t\t\t\t\t\t\t\tmd={6}\r\n\t\t\t\t\t\t\t\t\t\tclassName={classes.section}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={classes.sectionTitle}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{t(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t'documentsModule.upsert.document'\r\n\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\t\t\t\t\txs={12}\r\n\t\t\t\t\t\t\t\t\t\t\tclassName={classes.fields}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\t\t\t\t\tcontainer\r\n\t\t\t\t\t\t\t\t\t\t\t\tjustify=\"flex-start\"\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Grid\r\n\t\t\t\t\t\t\t\t\t\t\t\t\titem\r\n\t\t\t\t\t\t\t\t\t\t\t\t\txs={12}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclasses.textContainer\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomponent={'label'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvariant={'contained'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclasses.uploadBtn\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{t(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'documentsModule.upsert.uploadDocument'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taccept=\".doc,.docx,.pdf\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"file\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleFileUpload\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thidden\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclasses.filesUploaded\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{details.file\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? `1 ${t(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'documentsModule.upsert.fileSelected'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  )}`\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: `${t(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'documentsModule.upsert.noFileSelected'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  )}`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t\t<Grid item xs={12} className={classes.controls}>\r\n\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\tclassName={clsx(\r\n\t\t\t\t\t\t\t\t\t\t\tclasses.control,\r\n\t\t\t\t\t\t\t\t\t\t\tclasses.save\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\tonClick={handleConfirm}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{t('controls.confirm')}\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\tclassName={clsx(\r\n\t\t\t\t\t\t\t\t\t\t\tclasses.control,\r\n\t\t\t\t\t\t\t\t\t\t\tclasses.cancel\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\tonClick={handleClose}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{t('controls.cancel')}\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Fade>\r\n\t\t</Modal>\r\n\t);\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tmodal: {\r\n\t\tdisplay: 'flex',\r\n\t\talignItems: 'center',\r\n\t\tjustifyContent: 'center',\r\n\t\tbackdropFilter: 'blur(10px)',\r\n\t},\r\n\r\n\tgridCont: {\r\n\t\theight: 'fit-content',\r\n\t},\r\n\tpaper: {\r\n\t\tbackground: 'rgba(0,0,0,0.4)',\r\n\t\tborder: '1px solid rgba(255,255,255,0.2)',\r\n\t\tborderRadius: '10px',\r\n\t\tpadding: '10px 20px',\r\n\t\toverflowY: 'overlay',\r\n\t\theight: '80vh',\r\n\t\t[theme.breakpoints.down('sm')]: {\r\n\t\t\theight: '81vh',\r\n\t\t\tborderRadius: '0',\r\n\t\t\tborder: '0',\r\n\t\t\tpadding: '10px 5px',\r\n\t\t},\r\n\t\t'&:focus': {\r\n\t\t\toutline: 'none',\r\n\t\t},\r\n\t},\r\n\theaderRow: {\r\n\t\tdisplay: 'flex',\r\n\t\tjustifyContent: 'space-between',\r\n\t\talignItems: 'center',\r\n\t\twidth: '100%',\r\n\t\tborderBottom: '1px solid rgba(255,255,255,0.2)',\r\n\t},\r\n\ttitle: {\r\n\t\tcolor: 'white',\r\n\t\tpadding: '20px 10px 10px',\r\n\t\tfontSize: '20px',\r\n\t\twhiteSpace: 'nowrap',\r\n\t},\r\n\ticonBtn: {\r\n\t\tmargin: '10px',\r\n\t\t'&:hover': {\r\n\t\t\tbackground: 'rgba(0,0,0,0.3)',\r\n\t\t},\r\n\t},\r\n\ticon: {\r\n\t\tcolor: 'white',\r\n\t\tfontSize: '20px',\r\n\t},\r\n\tsection: {\r\n\t\tmargin: '10px 5px',\r\n\t},\r\n\tsectionTitle: {\r\n\t\tcolor: 'white',\r\n\t\tfontSize: '16px',\r\n\t\tpadding: '10px 20px',\r\n\t\twidth: 'fit-content',\r\n\t\tborderRadius: '10px 10px 0 0',\r\n\t\tbackground: 'rgba(0,0,0,0.4)',\r\n\t\twhiteSpace: 'nowrap',\r\n\t},\r\n\tfields: {\r\n\t\tpadding: '10px 20px',\r\n\t\tborderRadius: '0px 10px 10px 10px',\r\n\t\tbackground: 'rgba(0,0,0,0.4)',\r\n\t\t[theme.breakpoints.down('sm')]: {\r\n\t\t\tpadding: '10px',\r\n\t\t},\r\n\t},\r\n\ttextContainer: {\r\n\t\tpadding: '5px',\r\n\t},\r\n\ttextField: {\r\n\t\twidth: '100%',\r\n\t\t'& fieldset': {\r\n\t\t\tborderRadius: '5px',\r\n\t\t},\r\n\t},\r\n\tselectInput: {\r\n\t\twidth: '100%',\r\n\t\t'& fieldset': {\r\n\t\t\tborderRadius: '5px',\r\n\t\t},\r\n\t},\r\n\tmenupaper: {\r\n\t\tbackground: 'rgba(0,0,0,0.8)',\r\n\t\tbackdropFilter: 'blur(10px)',\r\n\t\theight: '200px',\r\n\t\toverflowY: 'auto',\r\n\t\tborder: '1px solid rgba(255,255,255,0.2)',\r\n\t\tmarginRight: '7px',\r\n\t\tmarginLeft: '-5px',\r\n\t},\r\n\tmenuitem: {\r\n\t\tcolor: 'white',\r\n\t\twidth: '100%',\r\n\t\t'&:hover': {\r\n\t\t\tbackground: 'rgba(255,255,255,0.1)',\r\n\t\t},\r\n\t},\r\n\tcontrols: {\r\n\t\tborderTop: '1px solid rgba(255,255,255,0.2)',\r\n\t\tpadding: '10px 0',\r\n\t\tdisplay: 'flex',\r\n\t\tjustifyContent: 'space-between',\r\n\t},\r\n\tcontrol: {\r\n\t\twidth: '30%',\r\n\t\tborder: '1px solid rgba(255,255,255,0.5)',\r\n\t\tfontSize: '16px',\r\n\t\tmargin: '5px',\r\n\t\tpadding: '5px 30px',\r\n\t\tborderRadius: '30px',\r\n\t\tcolor: 'white',\r\n\t},\r\n\tsave: {\r\n\t\tbackground: 'rgba(0,0,0,0.2)',\r\n\t\t'&:hover': {\r\n\t\t\tbackground: 'black',\r\n\t\t},\r\n\t\t'&:disabled': {\r\n\t\t\tcolor: 'rgba(255,255,255,0.3)',\r\n\t\t},\r\n\t},\r\n\tcancel: {\r\n\t\t'&:hover': {\r\n\t\t\tboxShadow: 'inset rgba(255,255,255,0.3) 0 0 2px 1px',\r\n\t\t},\r\n\t},\r\n\tchips: {\r\n\t\tdisplay: 'flex',\r\n\t\tflexWrap: 'wrap',\r\n\t},\r\n\tchip: {\r\n\t\theight: '50px',\r\n\t\tfontSize: '14px',\r\n\t\tborderRadius: '50px',\r\n\t\tdisplay: 'flex',\r\n\t\tjustifyContent: 'flex-start',\r\n\t\tcolor: 'white',\r\n\t\tborder: '1px solid rgba(255,255,255,0.2)',\r\n\t\tbackground: 'rgba(0,0,0,0.6)',\r\n\t\t'&:hover': {\r\n\t\t\tbackground: 'rgba(0,0,0,0.6)',\r\n\t\t\tboxShadow: 'inset lightgrey 0px 0px 1px 1px',\r\n\t\t},\r\n\t},\r\n\tuserCont: {\r\n\t\theight: 'fit-content',\r\n\t\tpadding: 0,\r\n\t\tmargin: 0,\r\n\t\tmargin: '5px 0',\r\n\t},\r\n\tchipsCont: {\r\n\t\theight: 'fit-content',\r\n\t\tpadding: 0,\r\n\t\tmargin: '3px',\r\n\t\tborderRadius: '50px',\r\n\t\tbackground: 'rgba(255,255,255,0.1)',\r\n\t\tboxShadow: 'inset rgba(0,0,0,0.5) 0px 0px 2px 1px',\r\n\t\tdisplay: 'flex',\r\n\t\tjutifyContent: 'space-between',\r\n\t\talignItems: 'center',\r\n\t},\r\n\tremoveIcon: {\r\n\t\tcolor: 'rgba(255,255,255,0.2)',\r\n\t\tpadding: '5px',\r\n\t\tmarginRight: '5px',\r\n\t\tborderRadius: '50px',\r\n\t\t'&:hover': {\r\n\t\t\tbackground: 'rgba(0,0,0,0.8)',\r\n\t\t\tcolor: 'white',\r\n\t\t},\r\n\t},\r\n\tradioGroup: {\r\n\t\tcolor: 'white',\r\n\t\tdisplay: 'flex',\r\n\t\tflexDirection: 'row',\r\n\t\talignitems: 'center',\r\n\t},\r\n\tradioBtn: {\r\n\t\tcolor: 'white',\r\n\t\tpadding: '15px',\r\n\t},\r\n\tfilesUploaded: {\r\n\t\tcolor: 'white',\r\n\t\tpadding: '0 15px',\r\n\t},\r\n\tuploadBtn: {\r\n\t\tmargin: '9px 0',\r\n\t\tbackground: 'rgba(0,0,0,0.1)',\r\n\t\tcolor: 'white',\r\n\t\tborder: '1px solid rgba(255,255,255,0.2)',\r\n\t\tborderRadius: '50px',\r\n\t\twhiteSpace: 'nowrap',\r\n\t\t'&:hover': {\r\n\t\t\tboxShadow: 'inset white 0 0 2px 1px',\r\n\t\t\tbackground: 'rgba(0,0,0,0.3)',\r\n\t\t},\r\n\t},\r\n\timageRow: {\r\n\t\tdisplay: 'flex',\r\n\t\talignItems: 'center',\r\n\t\tjustifyContent: 'space-between',\r\n\t\tpadding: '10px 5px',\r\n\t\tborderBottom: '1px solid rgba(255,255,255,0.2)',\r\n\t},\r\n\tpreviewImage: {\r\n\t\theight: '50px',\r\n\t\twidth: '100px',\r\n\t},\r\n\tremoveImageBtn: {\r\n\t\tcolor: 'rgba(255,255,255,0.5)',\r\n\t\tborder: '1px solid rgba(255,255,255,0.5)',\r\n\t\tborderRadius: '50px',\r\n\t\tpadding: '6px',\r\n\t\t'&:hover': {\r\n\t\t\tcolor: 'white',\r\n\t\t\tborderColor: 'white',\r\n\t\t},\r\n\t},\r\n\tuploadedImagesTitle: {\r\n\t\tcolor: 'white',\r\n\t\tpadding: '10px 5px',\r\n\t\tborderBottom: '1px solid rgba(255,255,255,0.2)',\r\n\t},\r\n\tswitchLabel: {\r\n\t\tcolor: 'white',\r\n\t},\r\n\tswitchBase: {\r\n\t\tcolor: 'rgba(255,255,255,0.4)',\r\n\t\t'&$checked': {\r\n\t\t\tcolor: 'rgba(255,255,255,1)',\r\n\t\t},\r\n\t\t'&$checked + $track': {\r\n\t\t\tbackgroundColor: 'rgba(255,255,255,0.8)',\r\n\t\t},\r\n\t},\r\n\tchecked: {},\r\n\ttrack: {\r\n\t\tbackgroundColor: 'rgba(255,255,255,0.4)',\r\n\t},\r\n\tnotificationsInstructions: {\r\n\t\tcolor: 'rgba(255,255,255,0.6)',\r\n\t\tfontSize: '12px',\r\n\t\tmarginBottom: '10px',\r\n\t},\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\documents\\Documents.js",["577"],"import { Grid, LinearProgress, makeStyles } from '@material-ui/core';\r\nimport React, { useState, useEffect, useContext } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useLocation } from 'react-router';\r\nimport {\r\n\tgetDocuments,\r\n\tdeleteDocument,\r\n\tdownloadDocument,\r\n} from '../../../api/documentsApi';\r\nimport { AuthContext } from '../../../context/AuthContext';\r\nimport { AlertDialog } from '../../reuseables/AlertDialog';\r\nimport { useQuery } from '../../reuseables/customHooks/useQuery';\r\nimport { Document } from './Document';\r\nimport { DocumentsControls } from './DocumentsControls';\r\n\r\nexport const Documents = () => {\r\n\tconst classes = useStyles();\r\n\tconst location = useLocation();\r\n\tconst query = useQuery(location.search);\r\n\tconst { auth } = useContext(AuthContext);\r\n\tconst { t } = useTranslation();\r\n\tconst [docs, setDocs] = useState([]);\r\n\tconst [isLoading, setIsLoading] = useState(true);\r\n\tconst [alertDialog, setAlertDialog] = useState(null);\r\n\r\n\tuseEffect(() => {\r\n\t\tgetDocuments(auth.user.tenant, query)\r\n\t\t\t.then((data) => {\r\n\t\t\t\tconsole.log(data);\r\n\t\t\t\tsetDocs(data);\r\n\t\t\t})\r\n\t\t\t.finally(() => {\r\n\t\t\t\tsetIsLoading(false);\r\n\t\t\t});\r\n\t}, [isLoading]);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetIsLoading(true);\r\n\t}, [location.search]);\r\n\r\n\tconst deleteFile = (documentId, desc) => (event) => {\r\n\t\tsetAlertDialog({\r\n\t\t\ttext: `${t('documentsModule.deleteFilePrompt')} \"${desc}\"?`,\r\n\t\t\ttitle: t('documentsModule.deleteFileTitle'),\r\n\t\t\thandleConfirm: async () => {\r\n\t\t\t\tconst res = await deleteDocument(auth.user.tenant, documentId);\r\n\t\t\t\tif (res) {\r\n\t\t\t\t\tsetDocs(docs.filter((d) => d._id !== res._id));\r\n\t\t\t\t\tsetAlertDialog(null);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\thandleCancel: () => setAlertDialog(null),\r\n\t\t});\r\n\t};\r\n\r\n\tconst downloadFile = (url) => {\r\n\t\tdownloadDocument(url);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Grid container justify=\"center\">\r\n\t\t\t<div className={classes.pageModule}>\r\n\t\t\t\t{t('documentsModule.documents')}\r\n\t\t\t</div>\r\n\t\t\t<Grid item xs={12}>\r\n\t\t\t\t<DocumentsControls />\r\n\t\t\t</Grid>\r\n\t\t\t{isLoading ? (\r\n\t\t\t\t<LinearProgress />\r\n\t\t\t) : (\r\n\t\t\t\t<Grid\r\n\t\t\t\t\tcontainer\r\n\t\t\t\t\tjustify=\"center\"\r\n\t\t\t\t\tclassName={classes.docsContainer}\r\n\t\t\t\t\tspacing={2}\r\n\t\t\t\t>\r\n\t\t\t\t\t{docs.map((d, i) => (\r\n\t\t\t\t\t\t<Grid item xs={12} sm={8} md={5} lg={4} xl={3} key={i}>\r\n\t\t\t\t\t\t\t<Document\r\n\t\t\t\t\t\t\t\tdata={d}\r\n\t\t\t\t\t\t\t\tdeleteFile={deleteFile}\r\n\t\t\t\t\t\t\t\tdownloadFile={downloadFile}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</Grid>\r\n\t\t\t)}\r\n\t\t\t{Boolean(alertDialog) && (\r\n\t\t\t\t<AlertDialog\r\n\t\t\t\t\talertDialog={alertDialog}\r\n\t\t\t\t\topen={Boolean(alertDialog)}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t</Grid>\r\n\t);\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tpageModule: {\r\n\t\tcolor: 'white',\r\n\t\tpadding: '10px 40px',\r\n\t\tfontSize: '18px',\r\n\t\tbackground: 'rgba(0,0,0,0.6)',\r\n\t\tmargin: '0px auto 5px',\r\n\t\twidth: '30%',\r\n\t\ttextAlign: 'center',\r\n\t\tborderRadius: '0 0 25px 25px',\r\n\t\tlineHeight: '1',\r\n\t},\r\n\tdocsContainer: {\r\n\t\tpadding: '10px',\r\n\t},\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\documentsApi.js",["578"],"import axios from 'axios';\r\nimport i18next from 'i18next';\r\nimport path from 'path';\r\n\r\nexport const getDocuments = async (tenant, filters) => {\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/documents/getDocuments`, { tenant, filters });\r\n        if (res) {\r\n            return res.data;\r\n        }\r\n        return [];\r\n    } catch(e) {\r\n        console.log(e)\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const deleteDocument = async (tenant, documentId) => {\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/documents/deleteDocument`, { tenant, documentId });\r\n        if (res) {\r\n            return res.data;\r\n        }\r\n        return [];\r\n    } catch(e) {\r\n        console.log(e)\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const getFileTypeName = (type) => {\r\n    if (type === '.doc' || type === '.docx') {\r\n        return 'MS Word'\r\n    } else if (type === '.xls' || type === '.xlsx') {\r\n        return 'MS Excel'\r\n    } else if (type === '.ppt' || type === '.pptx') {\r\n        return 'MS PowerPoint'\r\n    } else if (type === '.csv') {\r\n        return 'CSV File'\r\n    } else if(type === 'pdf') {\r\n        return 'PDF File'\r\n    };\r\n    return 'Text File'\r\n}\r\n\r\nexport const downloadDocument = async (url) => {\r\n    const filename = path.basename(url);\r\n    try {\r\n       const res = await axios({\r\n            method: 'get',\r\n            url: `${process.env.REACT_APP_BACKEND_URL}/documents/download?url=${url}`,\r\n            responseType: 'blob'\r\n        });\r\n        const file = window.URL.createObjectURL(new Blob([res.data]));\r\n        const link = document.createElement('a');\r\n        link.href = file;\r\n        link.setAttribute('download', filename);\r\n        document.body.appendChild(link);\r\n        link.click();\r\n    } catch(e) {\r\n        console.log(e)\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const uploadDocument = async (details) => {\r\n    let formData = new FormData();\r\n    Object.entries(details).forEach(f => {   \r\n        if(!f[1]) return;\r\n        formData.append(f[0], f[1])\r\n    });\r\n    let config = {\r\n        headers: {\r\n            'Content-Type': `multipart/form-data`\r\n        }\r\n    }\r\n    try {\r\n        const res = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/documents/createDocument`, formData, config);\r\n        if (res) {\r\n            return res.data;\r\n        }\r\n        return [];\r\n    } catch(e) {\r\n        console.log(e)\r\n        return null;\r\n    }\r\n}","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\documents\\Document.js",["579","580"],"import { Grid, IconButton, makeStyles } from '@material-ui/core';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { getFullAddress } from '../../../api/assetsApi';\r\nimport { getFileTypeName } from '../../../api/documentsApi';\r\nimport { ItemLink } from '../../reuseables/ItemLink';\r\nimport { UserItem } from '../../user/UserItem';\r\nimport { DocumentControls } from './DocumentControls';\r\n\r\nexport const Document = ({ data, deleteFile, downloadFile }) => {\r\n    \r\n    const classes = useStyles();\r\n    const { t } = useTranslation();\r\n    \r\n\r\n\treturn (\r\n\t\t<Grid container className={classes.docContainer}>\r\n\t\t\t<Grid item xs={9} className={classes.descContainer}>\r\n\t\t\t\t<div className={classes.description}>{data.description}</div>\r\n\t\t\t\t<div className={classes.docId}>{data.docId}</div>\r\n\t\t\t</Grid>\r\n\t\t\t<Grid item xs={3} className={classes.controls}>\r\n\t\t\t\t<DocumentControls \r\n\t\t\t\t\tdeleteFile={deleteFile(data._id, data.description)}\r\n\t\t\t\t\tdownloadFile={() => downloadFile(data.url)}\r\n                />\r\n\t\t\t</Grid>\r\n\t\t\t<Grid item xs={12} className={classes.dataContainer}>\r\n\t\t\t\t<Grid container className={classes.relationContainer}>\r\n\t\t\t\t\t<Grid item xs={12} className={classes.gridItem}>\r\n\t\t\t\t\t\t<div className={classes.relationLabel}>\r\n\t\t\t\t\t\t\t{t('documentsModule.upsert.asset')}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className={classes.relationData}>\r\n\t\t\t\t\t\t\t{data.asset\r\n\t\t\t\t\t\t\t\t? getFullAddress(data.asset)\r\n\t\t\t\t\t\t\t\t: t('general.noData')}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid container className={classes.relationContainer}>\r\n\t\t\t\t\t<Grid item xs={6} className={classes.gridItem}>\r\n\t\t\t\t\t\t<div className={classes.relationLabel}>\r\n\t\t\t\t\t\t\t{t('documentsModule.upsert.system')}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className={classes.relationData}>\r\n\t\t\t\t\t\t\t{data.system\r\n\t\t\t\t\t\t\t\t? data.system.name\r\n\t\t\t\t\t\t\t\t: t('general.noData')}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={6} className={classes.gridItem}>\r\n\t\t\t\t\t\t<div className={classes.relationLabel}>\r\n\t\t\t\t\t\t\t{t('documentsModule.upsert.fault')}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className={classes.relationData}>\r\n\t\t\t\t\t\t\t{data.fault ? (\r\n\t\t\t\t\t\t\t\t<ItemLink\r\n\t\t\t\t\t\t\t\t\titemId={data.fault.faultId}\r\n\t\t\t\t\t\t\t\t\tmodule=\"faults\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\tt('general.noData')\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid container className={classes.relationContainer}>\r\n\t\t\t\t\t<Grid item xs={6} className={classes.gridItem}>\r\n\t\t\t\t\t\t<div className={classes.relationLabel}>\r\n\t\t\t\t\t\t\t{t('documentsModule.upsert.task')}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className={classes.relationData}>\r\n\t\t\t\t\t\t\t{data.task ? data.task.taskId : t('general.noData')}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={6} className={classes.gridItem}>\r\n\t\t\t\t\t\t<div className={classes.relationLabel}>\r\n\t\t\t\t\t\t\t{t('documentsModule.upsert.filetype')}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className={classes.relationData}>\r\n\t\t\t\t\t\t\t{getFileTypeName(data.type)}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid container className={classes.relationContainer}>\r\n\t\t\t\t\t<Grid item xs={12} className={classes.gridItem}>\r\n\t\t\t\t\t\t<div className={classes.relationLabel}>\r\n\t\t\t\t\t\t\t{t('documentsModule.upsert.user')}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className={classes.relationData}>\r\n\t\t\t\t\t\t\t{data.user ? (\r\n\t\t\t\t\t\t\t\t<div className={classes.userContainer}>\r\n\t\t\t\t\t\t\t\t\t<UserItem\r\n\t\t\t\t\t\t\t\t\t\tuser={data.user}\r\n\t\t\t\t\t\t\t\t\t\tshowName\r\n\t\t\t\t\t\t\t\t\t\tsize={11}\r\n\t\t\t\t\t\t\t\t\t\tavatarSize={30}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\tt('general.noData')\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t</Grid>\r\n\t);\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tdocContainer: {\r\n\t\tcolor: 'white',\r\n\t\tbackground: 'rgba(0,0,0,0.3)',\r\n\t\tborder: '1px solid rgba(255,255,255,0.2)',\r\n\t\tborderRadius: '10px',\r\n\t\tpadding: '20px',\r\n\t},\r\n\tdescContainer: {\r\n\t\tfontSize: '16px',\r\n\t\tdisplay: 'flex',\r\n\t\tflexDirection: 'column',\r\n\t\tjustifyContent: 'center',\r\n\t},\r\n\tdocId: {\r\n\t\tfontSize: '13px',\r\n\t\tpadding: '5px'\r\n\t},\r\n\trelationContainer: {\r\n\t\tpadding: '5px 10px',\r\n\t\tdisplay: 'flex',\r\n\t\tjustifyContent: 'space-between',\r\n\t\tcolor: 'white',\r\n\t\tborderBottom: '1px solid rgba(255,255,255,0.2)',\r\n\t},\r\n\tgridItem: {\r\n\t\tdisplay: 'flex',\r\n\t\tflexDirection: 'column',\r\n\t},\r\n\trelationLabel: {\r\n\t\tpadding: '3px 0',\r\n\t\tfontSize: '12px',\r\n\t\tcolor: 'rgba(255,255,255,0.6)',\r\n\t},\r\n\trelationData: {\r\n\t\tfontSize: '14px',\r\n\t},\r\n\tcontrols: {\r\n\t\tdisplay: 'flex',\r\n\t\tjustifyContent: 'flex-end',\r\n\t\talignItems: 'center',\r\n\t\tpadding: '10px 0',\r\n\t},\r\n\texpandIcon: {\r\n\t\tcolor: 'white',\r\n\t\tpadding: '10px',\r\n\t\tbackground: 'rgba(0,0,0,0.3)',\r\n\t\t'&:hover': {\r\n\t\t\tbackground: 'rgba(0,0,0,0.5)',\r\n\t\t},\r\n\t},\r\n\ticon: {\r\n\t\tfontSize: '18px',\r\n\t},\r\n\tdataContainer: {\r\n\t\tpadding: '10px 10px 20px',\r\n\t\tbackground: 'rgba(0,0,0,0.3)',\r\n\t\tborderRadius: '10px',\r\n\t\tmargin: '10px 0 0',\r\n\t},\r\n\tsideGridItem: {\r\n\t\tdisplay: 'flex',\r\n\t\tflexDirection: 'column',\r\n\t\tjustifyContent: 'center',\r\n\t\talignItems: 'center',\r\n\t\tpadding: '10px',\r\n\t},\r\n\tfileTypeContainer: {\r\n\t\tdisplay: 'flex',\r\n\t\tflexDirection: 'column',\r\n\t\talignItems: 'center',\r\n\t\tjustifyContent: 'center',\r\n\t\tbackground: 'rgba(0,0,0,0.3)',\r\n\t\tborderRadius: '5px',\r\n\t\tpadding: '15px 10px',\r\n\t},\r\n\tfileTypeIcon: {\r\n\t\tfontSize: '48px',\r\n\t\tcolor: 'rgba(255,255,255,0.5)',\r\n\t},\r\n\tfileTypeData: {\r\n\t\tdirection: 'rtl',\r\n\t\tcolor: 'rgba(255,255,255,0.8)',\r\n\t},\r\n\tuserContainer: {\r\n\t\tbackground: 'rgba(0,0,0,0.3)',\r\n\t\tborderRadius: '50px',\r\n\t\tpadding: '5px 20px 5px 5px',\r\n\t\twidth: 'fit-content',\r\n\t},\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\documents\\DocumentControls.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\datapages\\documents\\DocumentsControls.js",["581","582","583"],"import {\r\n    Button,\r\n    Collapse,\r\n    Grid,\r\n    makeStyles,\r\n    useMediaQuery\r\n} from '@material-ui/core';\r\nimport { ClearRounded } from '@material-ui/icons';\r\nimport ExpandMoreRoundedIcon from '@material-ui/icons/ExpandMoreRounded';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport PersonRoundedIcon from '@material-ui/icons/PersonRounded';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport { getAsset, getFullAddress } from '../../../api/assetsApi';\r\nimport {\r\n    getFaultOptionsByAssetOrSystem\r\n} from '../../../api/faultsApi';\r\nimport { removeQueryParam } from '../../../api/genericApi';\r\nimport {\r\n    getAssetsSuggestions,\r\n    getSystemsByAssetOptions\r\n} from '../../../api/systemsApi';\r\nimport { getTaskOptionsByAssetOrSystem } from '../../../api/tasksApi';\r\nimport { createUserOptions } from '../../../api/userApi';\r\nimport { useQuery } from '../../reuseables/customHooks/useQuery';\r\nimport { FilterByMultiSelect } from '../../reuseables/FilterByMultiSelect';\r\nimport { SearchBoxSelect } from '../../reuseables/SearchBoxSelect';\r\nimport WarningRoundedIcon from '@material-ui/icons/WarningRounded';\r\nimport DescriptionRoundedIcon from '@material-ui/icons/DescriptionRounded';\r\nimport BlurOnRoundedIcon from '@material-ui/icons/BlurOnRounded';\r\n\r\n\r\nexport const DocumentsControls = ({}) => {\r\n\tconst history = useHistory();\r\n\tconst location = useLocation();\r\n\tconst query = useQuery(location.search);\r\n\tconst classes = useStyles();\r\n\tconst downSm = useMediaQuery((theme) => theme.breakpoints.down('md'));\r\n\tconst { t, i18n } = useTranslation();\r\n\tconst [reloadedValue, setReloadedValue] = useState(null);\r\n\tconst [collapsed, setCollapsed] = useState(!downSm ? true : false);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (query.asset) {\r\n\t\t\thandleReloaded(query.asset).then((data) => {\r\n\t\t\t\tif (data) {\r\n\t\t\t\t\tsetReloadedValue(data);\r\n\t\t\t\t}\r\n            });\r\n            \r\n\t\t} else {\r\n\t\t\tsetReloadedValue({\r\n\t\t\t\tlabel: '',\r\n\t\t\t\tvalue: null,\r\n\t\t\t});\r\n\t\t\thistory.push({\r\n\t\t\t\tpath: location.pathname,\r\n\t\t\t\tsearch: removeQueryParam(location.search, 'system'),\r\n\t\t\t});\r\n\t\t}\r\n\t}, [location.search]);\r\n\r\n\tconst handleReloaded = async (assetId) => {\r\n\t\tconst res = await getAsset(assetId, false);\r\n\t\tif (res) {\r\n\t\t\treturn {\r\n\t\t\t\tlabel: getFullAddress(res),\r\n\t\t\t\tvalue: res._id,\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n\r\n\tconst toggleCollapse = () => {\r\n\t\tif (collapsed) {\r\n\t\t\tsetCollapsed(false);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsetCollapsed(true);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t{downSm && (\r\n\t\t\t\t<Grid container justify=\"center\">\r\n\t\t\t\t\t<Grid item xs={12} className={classes.gridItem}>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tclassName={classes.sortandfilter}\r\n\t\t\t\t\t\t\tstartIcon={\r\n\t\t\t\t\t\t\t\t<FilterListIcon className={classes.icon} />\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tendIcon={\r\n\t\t\t\t\t\t\t\tcollapsed ? (\r\n\t\t\t\t\t\t\t\t\t<ClearRounded />\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t<ExpandMoreRoundedIcon />\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tonClick={toggleCollapse}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{t(\r\n\t\t\t\t\t\t\t\t`filters.${\r\n\t\t\t\t\t\t\t\t\tcollapsed ? 'hide' : 'show'\r\n\t\t\t\t\t\t\t\t}Filters`\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t)}\r\n\t\t\t<Collapse in={collapsed}>\r\n\t\t\t\t<Grid container justify=\"center\">\r\n\t\t\t\t\t<Grid item xs={12} className={classes.gridItem}>\r\n\t\t\t\t\t\t{reloadedValue && (\r\n\t\t\t\t\t\t\t<SearchBoxSelect\r\n\t\t\t\t\t\t\t\tsuggestionsFunc={getAssetsSuggestions}\r\n\t\t\t\t\t\t\t\tplaceholder={t('filters.filterByAsset')}\r\n\t\t\t\t\t\t\t\tfilterField={'asset'}\r\n\t\t\t\t\t\t\t\treloadedLabel={reloadedValue.label}\r\n\t\t\t\t\t\t\t\treloadedValue={reloadedValue.value}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t{query.asset && (\r\n\t\t\t\t\t\t\t<FilterByMultiSelect\r\n\t\t\t\t\t\t\t\toptionsFunc={() =>\r\n\t\t\t\t\t\t\t\t\tgetSystemsByAssetOptions(query.asset)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tplaceholder={t('filters.filterBySystemName')}\r\n\t\t\t\t\t\t\t\tfilterIcon={\r\n\t\t\t\t\t\t\t\t\t<BlurOnRoundedIcon className={classes.icon} />\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tfilterField={'system'}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t<Grid item xs={12} className={classes.gridItem}>\r\n\t\t\t\t\t\t<FilterByMultiSelect\r\n\t\t\t\t\t\t\toptionsFunc={createUserOptions}\r\n\t\t\t\t\t\t\tplaceholder={t('filters.filterByUser')}\r\n\t\t\t\t\t\t\tfilterIcon={\r\n\t\t\t\t\t\t\t\t<PersonRoundedIcon className={classes.icon} />\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfilterField={'user'}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<FilterByMultiSelect\r\n\t\t\t\t\t\t\toptionsFunc={() =>\r\n\t\t\t\t\t\t\t\tgetFaultOptionsByAssetOrSystem(\r\n\t\t\t\t\t\t\t\t\tquery.asset,\r\n\t\t\t\t\t\t\t\t\tquery.system\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tplaceholder={t('filters.filterByFault')}\r\n\t\t\t\t\t\t\tfilterIcon={\r\n\t\t\t\t\t\t\t\t<WarningRoundedIcon className={classes.icon} />\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfilterField={'fault'}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<FilterByMultiSelect\r\n\t\t\t\t\t\t\toptionsFunc={() =>\r\n\t\t\t\t\t\t\t\tgetTaskOptionsByAssetOrSystem(\r\n\t\t\t\t\t\t\t\t\tquery.asset,\r\n\t\t\t\t\t\t\t\t\tquery.system\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tplaceholder={t('filters.filterByTask')}\r\n\t\t\t\t\t\t\tfilterIcon={\r\n\t\t\t\t\t\t\t\t<DescriptionRoundedIcon className={classes.icon} />\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfilterField={'task'}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Collapse>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nconst useStyles = makeStyles((them) => ({\r\n\tgridItem: {\r\n\t\tdisplay: 'flex',\r\n\t\tjustifyContent: 'center',\r\n\t\talignItems: 'flex-start',\r\n\t\tflexWrap: 'wrap',\r\n\t},\r\n\ticon: {\r\n\t\tfontSize: '20px',\r\n\t\tmarginLeft: '4px',\r\n\t\tcolor: 'white',\r\n\t\tborderRadius: '50px',\r\n\t\tpadding: '6px',\r\n\t\tborder: '1px solid rgba(255,255,255,0.2)',\r\n\t},\r\n\tsortandfilter: {\r\n\t\tborder: '1px solid rgba(255,255,255,0.2)',\r\n\t\tbackground: 'rgba(0,0,0,0.7)',\r\n\t\tcolor: 'white',\r\n\t\tborderRadius: '50px',\r\n\t\tpadding: '5px 25px 5px 3px',\r\n\t\twhiteSpace: 'nowrap',\r\n\t\t'&:hover': {\r\n\t\t\tbackground: 'black',\r\n\t\t},\r\n\t},\r\n\ttypeGroup: {\r\n\t\tmargin: '5px',\r\n\t\theight: '45px',\r\n\t},\r\n\tmodeBtn: {\r\n\t\tpadding: '0 15px 0 5px',\r\n\t\tcolor: 'white',\r\n\t\twidth: 'auto',\r\n\t\twhiteSpace: 'nowrap',\r\n\t\tborder: '1px solid rgba(255,255,255,0.2)',\r\n\t},\r\n\tlistBtn: {\r\n\t\tborderRadius: '25px 0 0 25px',\r\n\t},\r\n\tblocksBtn: {\r\n\t\tborderRadius: '0px 25px 25px 0px',\r\n\t},\r\n\tmodeBtnActive: {\r\n\t\tbackground: 'rgba(0,0,0,0.6)',\r\n\t},\r\n}));\r\n","C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\api\\notificationsApi.js",[],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\Notifications.js",["584","585","586","587"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\components\\controls\\navbar\\Notiofication.js",["588","589","590","591","592","593","594","595","596","597"],"C:\\Users\\Niv Mimran\\projects\\leev\\leev-fe\\src\\context\\NotificationsContext.js",[],{"ruleId":"598","replacedBy":"599"},{"ruleId":"600","replacedBy":"601"},{"ruleId":"602","severity":1,"message":"603","line":1,"column":42,"nodeType":"604","messageId":"605","endLine":1,"endColumn":51},{"ruleId":"606","severity":1,"message":"607","line":14,"column":27,"nodeType":"608","messageId":"609","endLine":14,"endColumn":29},{"ruleId":"610","severity":1,"message":"611","line":32,"column":8,"nodeType":"612","endLine":32,"endColumn":10,"suggestions":"613"},{"ruleId":"610","severity":1,"message":"614","line":34,"column":8,"nodeType":"612","endLine":34,"endColumn":10,"suggestions":"615"},{"ruleId":"610","severity":1,"message":"616","line":27,"column":8,"nodeType":"612","endLine":27,"endColumn":26,"suggestions":"617"},{"ruleId":"602","severity":1,"message":"618","line":4,"column":10,"nodeType":"604","messageId":"605","endLine":4,"endColumn":20},{"ruleId":"602","severity":1,"message":"619","line":19,"column":16,"nodeType":"604","messageId":"605","endLine":19,"endColumn":20},{"ruleId":"602","severity":1,"message":"619","line":22,"column":13,"nodeType":"604","messageId":"605","endLine":22,"endColumn":17},{"ruleId":"602","severity":1,"message":"620","line":3,"column":21,"nodeType":"604","messageId":"605","endLine":3,"endColumn":32},{"ruleId":"602","severity":1,"message":"619","line":15,"column":16,"nodeType":"604","messageId":"605","endLine":15,"endColumn":20},{"ruleId":"610","severity":1,"message":"621","line":38,"column":8,"nodeType":"612","endLine":38,"endColumn":19,"suggestions":"622"},{"ruleId":"602","severity":1,"message":"603","line":1,"column":17,"nodeType":"604","messageId":"605","endLine":1,"endColumn":26},{"ruleId":"602","severity":1,"message":"623","line":2,"column":108,"nodeType":"604","messageId":"605","endLine":2,"endColumn":116},{"ruleId":"602","severity":1,"message":"624","line":2,"column":118,"nodeType":"604","messageId":"605","endLine":2,"endColumn":123},{"ruleId":"602","severity":1,"message":"625","line":17,"column":10,"nodeType":"604","messageId":"605","endLine":17,"endColumn":21},{"ruleId":"602","severity":1,"message":"619","line":25,"column":16,"nodeType":"604","messageId":"605","endLine":25,"endColumn":20},{"ruleId":"626","severity":1,"message":"627","line":207,"column":9,"nodeType":"628","messageId":"609","endLine":207,"endColumn":19},{"ruleId":"602","severity":1,"message":"629","line":4,"column":8,"nodeType":"604","messageId":"605","endLine":4,"endColumn":25},{"ruleId":"602","severity":1,"message":"630","line":9,"column":10,"nodeType":"604","messageId":"605","endLine":9,"endColumn":29},{"ruleId":"602","severity":1,"message":"619","line":43,"column":16,"nodeType":"604","messageId":"605","endLine":43,"endColumn":20},{"ruleId":"602","severity":1,"message":"619","line":9,"column":13,"nodeType":"604","messageId":"605","endLine":9,"endColumn":17},{"ruleId":"602","severity":1,"message":"619","line":19,"column":16,"nodeType":"604","messageId":"605","endLine":19,"endColumn":20},{"ruleId":"610","severity":1,"message":"631","line":33,"column":8,"nodeType":"612","endLine":33,"endColumn":16,"suggestions":"632"},{"ruleId":"633","severity":1,"message":"634","line":77,"column":18,"nodeType":"635","messageId":"636","endLine":77,"endColumn":19,"suggestions":"637"},{"ruleId":"602","severity":1,"message":"638","line":3,"column":43,"nodeType":"604","messageId":"605","endLine":3,"endColumn":62},{"ruleId":"602","severity":1,"message":"639","line":4,"column":50,"nodeType":"604","messageId":"605","endLine":4,"endColumn":54},{"ruleId":"610","severity":1,"message":"640","line":22,"column":8,"nodeType":"612","endLine":22,"endColumn":20,"suggestions":"641"},{"ruleId":"610","severity":1,"message":"642","line":25,"column":8,"nodeType":"612","endLine":25,"endColumn":10,"suggestions":"643"},{"ruleId":"610","severity":1,"message":"644","line":41,"column":8,"nodeType":"612","endLine":41,"endColumn":15,"suggestions":"645"},{"ruleId":"610","severity":1,"message":"646","line":31,"column":8,"nodeType":"612","endLine":31,"endColumn":10,"suggestions":"647"},{"ruleId":"610","severity":1,"message":"644","line":49,"column":8,"nodeType":"612","endLine":49,"endColumn":16,"suggestions":"648"},{"ruleId":"602","severity":1,"message":"649","line":1,"column":44,"nodeType":"604","messageId":"605","endLine":1,"endColumn":57},{"ruleId":"610","severity":1,"message":"621","line":41,"column":8,"nodeType":"612","endLine":41,"endColumn":19,"suggestions":"650"},{"ruleId":"602","severity":1,"message":"619","line":37,"column":16,"nodeType":"604","messageId":"605","endLine":37,"endColumn":20},{"ruleId":"610","severity":1,"message":"651","line":60,"column":8,"nodeType":"612","endLine":60,"endColumn":25,"suggestions":"652"},{"ruleId":"610","severity":1,"message":"653","line":30,"column":8,"nodeType":"612","endLine":30,"endColumn":20,"suggestions":"654"},{"ruleId":"610","severity":1,"message":"655","line":45,"column":8,"nodeType":"612","endLine":45,"endColumn":15,"suggestions":"656"},{"ruleId":"657","severity":1,"message":"658","line":82,"column":42,"nodeType":"659","messageId":"609","endLine":82,"endColumn":44},{"ruleId":"602","severity":1,"message":"623","line":3,"column":2,"nodeType":"604","messageId":"605","endLine":3,"endColumn":10},{"ruleId":"602","severity":1,"message":"624","line":7,"column":2,"nodeType":"604","messageId":"605","endLine":7,"endColumn":7},{"ruleId":"602","severity":1,"message":"619","line":27,"column":13,"nodeType":"604","messageId":"605","endLine":27,"endColumn":17},{"ruleId":"602","severity":1,"message":"619","line":15,"column":16,"nodeType":"604","messageId":"605","endLine":15,"endColumn":20},{"ruleId":"602","severity":1,"message":"660","line":16,"column":11,"nodeType":"604","messageId":"605","endLine":16,"endColumn":17},{"ruleId":"602","severity":1,"message":"660","line":15,"column":11,"nodeType":"604","messageId":"605","endLine":15,"endColumn":17},{"ruleId":"602","severity":1,"message":"619","line":16,"column":16,"nodeType":"604","messageId":"605","endLine":16,"endColumn":20},{"ruleId":"610","severity":1,"message":"661","line":26,"column":8,"nodeType":"612","endLine":26,"endColumn":10,"suggestions":"662"},{"ruleId":"602","severity":1,"message":"619","line":9,"column":16,"nodeType":"604","messageId":"605","endLine":9,"endColumn":20},{"ruleId":"602","severity":1,"message":"603","line":1,"column":17,"nodeType":"604","messageId":"605","endLine":1,"endColumn":26},{"ruleId":"602","severity":1,"message":"663","line":1,"column":28,"nodeType":"604","messageId":"605","endLine":1,"endColumn":36},{"ruleId":"602","severity":1,"message":"664","line":2,"column":34,"nodeType":"604","messageId":"605","endLine":2,"endColumn":39},{"ruleId":"602","severity":1,"message":"619","line":16,"column":16,"nodeType":"604","messageId":"605","endLine":16,"endColumn":20},{"ruleId":"602","severity":1,"message":"619","line":20,"column":16,"nodeType":"604","messageId":"605","endLine":20,"endColumn":20},{"ruleId":"626","severity":1,"message":"665","line":212,"column":9,"nodeType":"628","messageId":"609","endLine":212,"endColumn":16},{"ruleId":"602","severity":1,"message":"619","line":39,"column":13,"nodeType":"604","messageId":"605","endLine":39,"endColumn":17},{"ruleId":"610","severity":1,"message":"666","line":60,"column":5,"nodeType":"612","endLine":60,"endColumn":22,"suggestions":"667"},{"ruleId":"602","severity":1,"message":"668","line":3,"column":10,"nodeType":"604","messageId":"605","endLine":3,"endColumn":24},{"ruleId":"602","severity":1,"message":"669","line":3,"column":10,"nodeType":"604","messageId":"605","endLine":3,"endColumn":20},{"ruleId":"602","severity":1,"message":"670","line":5,"column":10,"nodeType":"604","messageId":"605","endLine":5,"endColumn":18},{"ruleId":"602","severity":1,"message":"671","line":11,"column":11,"nodeType":"604","messageId":"605","endLine":11,"endColumn":19},{"ruleId":"602","severity":1,"message":"649","line":1,"column":28,"nodeType":"604","messageId":"605","endLine":1,"endColumn":41},{"ruleId":"602","severity":1,"message":"672","line":3,"column":10,"nodeType":"604","messageId":"605","endLine":3,"endColumn":24},{"ruleId":"602","severity":1,"message":"619","line":15,"column":16,"nodeType":"604","messageId":"605","endLine":15,"endColumn":20},{"ruleId":"673","severity":1,"message":"674","line":28,"column":68,"nodeType":"675","endLine":28,"endColumn":92},{"ruleId":"602","severity":1,"message":"676","line":3,"column":10,"nodeType":"604","messageId":"605","endLine":3,"endColumn":20},{"ruleId":"610","severity":1,"message":"677","line":55,"column":8,"nodeType":"612","endLine":55,"endColumn":28,"suggestions":"678"},{"ruleId":"602","severity":1,"message":"679","line":2,"column":22,"nodeType":"604","messageId":"605","endLine":2,"endColumn":27},{"ruleId":"602","severity":1,"message":"680","line":15,"column":13,"nodeType":"604","messageId":"605","endLine":15,"endColumn":20},{"ruleId":"602","severity":1,"message":"681","line":16,"column":13,"nodeType":"604","messageId":"605","endLine":16,"endColumn":27},{"ruleId":"682","severity":1,"message":"683","line":115,"column":13,"nodeType":"684","endLine":115,"endColumn":58},{"ruleId":"602","severity":1,"message":"619","line":13,"column":16,"nodeType":"604","messageId":"605","endLine":13,"endColumn":20},{"ruleId":"602","severity":1,"message":"685","line":37,"column":23,"nodeType":"604","messageId":"605","endLine":37,"endColumn":26},{"ruleId":"602","severity":1,"message":"649","line":1,"column":103,"nodeType":"604","messageId":"605","endLine":1,"endColumn":116},{"ruleId":"602","severity":1,"message":"669","line":10,"column":10,"nodeType":"604","messageId":"605","endLine":10,"endColumn":20},{"ruleId":"602","severity":1,"message":"686","line":10,"column":22,"nodeType":"604","messageId":"605","endLine":10,"endColumn":33},{"ruleId":"657","severity":1,"message":"658","line":139,"column":44,"nodeType":"659","messageId":"609","endLine":139,"endColumn":46},{"ruleId":"602","severity":1,"message":"649","line":1,"column":44,"nodeType":"604","messageId":"605","endLine":1,"endColumn":57},{"ruleId":"610","severity":1,"message":"687","line":38,"column":8,"nodeType":"612","endLine":38,"endColumn":19,"suggestions":"688"},{"ruleId":"610","severity":1,"message":"631","line":49,"column":8,"nodeType":"612","endLine":49,"endColumn":18,"suggestions":"689"},{"ruleId":"602","severity":1,"message":"690","line":111,"column":7,"nodeType":"604","messageId":"605","endLine":111,"endColumn":16},{"ruleId":"602","severity":1,"message":"691","line":2,"column":38,"nodeType":"604","messageId":"605","endLine":2,"endColumn":45},{"ruleId":"602","severity":1,"message":"692","line":7,"column":10,"nodeType":"604","messageId":"605","endLine":7,"endColumn":22},{"ruleId":"602","severity":1,"message":"660","line":12,"column":11,"nodeType":"604","messageId":"605","endLine":12,"endColumn":17},{"ruleId":"602","severity":1,"message":"619","line":15,"column":16,"nodeType":"604","messageId":"605","endLine":15,"endColumn":20},{"ruleId":"602","severity":1,"message":"649","line":2,"column":174,"nodeType":"604","messageId":"605","endLine":2,"endColumn":187},{"ruleId":"602","severity":1,"message":"693","line":12,"column":10,"nodeType":"604","messageId":"605","endLine":12,"endColumn":21},{"ruleId":"602","severity":1,"message":"694","line":23,"column":19,"nodeType":"604","messageId":"605","endLine":23,"endColumn":26},{"ruleId":"626","severity":1,"message":"695","line":394,"column":53,"nodeType":"628","messageId":"609","endLine":394,"endColumn":60},{"ruleId":"626","severity":1,"message":"696","line":913,"column":9,"nodeType":"628","messageId":"609","endLine":913,"endColumn":15},{"ruleId":"602","severity":1,"message":"649","line":1,"column":153,"nodeType":"604","messageId":"605","endLine":1,"endColumn":166},{"ruleId":"602","severity":1,"message":"694","line":23,"column":19,"nodeType":"604","messageId":"605","endLine":23,"endColumn":26},{"ruleId":"610","severity":1,"message":"697","line":71,"column":8,"nodeType":"612","endLine":71,"endColumn":10,"suggestions":"698"},{"ruleId":"682","severity":1,"message":"683","line":449,"column":73,"nodeType":"684","endLine":449,"endColumn":125},{"ruleId":"626","severity":1,"message":"696","line":644,"column":9,"nodeType":"628","messageId":"609","endLine":644,"endColumn":15},{"ruleId":"602","severity":1,"message":"660","line":15,"column":11,"nodeType":"604","messageId":"605","endLine":15,"endColumn":17},{"ruleId":"602","severity":1,"message":"619","line":16,"column":16,"nodeType":"604","messageId":"605","endLine":16,"endColumn":20},{"ruleId":"610","severity":1,"message":"699","line":28,"column":8,"nodeType":"612","endLine":28,"endColumn":10,"suggestions":"700"},{"ruleId":"602","severity":1,"message":"649","line":1,"column":139,"nodeType":"604","messageId":"605","endLine":1,"endColumn":152},{"ruleId":"602","severity":1,"message":"694","line":18,"column":19,"nodeType":"604","messageId":"605","endLine":18,"endColumn":26},{"ruleId":"610","severity":1,"message":"701","line":59,"column":7,"nodeType":"612","endLine":59,"endColumn":9,"suggestions":"702"},{"ruleId":"602","severity":1,"message":"660","line":15,"column":11,"nodeType":"604","messageId":"605","endLine":15,"endColumn":17},{"ruleId":"602","severity":1,"message":"619","line":16,"column":16,"nodeType":"604","messageId":"605","endLine":16,"endColumn":20},{"ruleId":"610","severity":1,"message":"703","line":25,"column":8,"nodeType":"612","endLine":25,"endColumn":10,"suggestions":"704"},{"ruleId":"602","severity":1,"message":"619","line":17,"column":20,"nodeType":"604","messageId":"605","endLine":17,"endColumn":24},{"ruleId":"602","severity":1,"message":"660","line":15,"column":11,"nodeType":"604","messageId":"605","endLine":15,"endColumn":17},{"ruleId":"602","severity":1,"message":"619","line":16,"column":16,"nodeType":"604","messageId":"605","endLine":16,"endColumn":20},{"ruleId":"610","severity":1,"message":"705","line":29,"column":8,"nodeType":"612","endLine":29,"endColumn":10,"suggestions":"706"},{"ruleId":"602","severity":1,"message":"707","line":6,"column":8,"nodeType":"604","messageId":"605","endLine":6,"endColumn":23},{"ruleId":"602","severity":1,"message":"708","line":1,"column":42,"nodeType":"604","messageId":"605","endLine":1,"endColumn":50},{"ruleId":"602","severity":1,"message":"660","line":20,"column":11,"nodeType":"604","messageId":"605","endLine":20,"endColumn":17},{"ruleId":"602","severity":1,"message":"619","line":21,"column":16,"nodeType":"604","messageId":"605","endLine":21,"endColumn":20},{"ruleId":"602","severity":1,"message":"694","line":22,"column":19,"nodeType":"604","messageId":"605","endLine":22,"endColumn":26},{"ruleId":"610","severity":1,"message":"709","line":52,"column":8,"nodeType":"612","endLine":52,"endColumn":30,"suggestions":"710"},{"ruleId":"610","severity":1,"message":"711","line":80,"column":8,"nodeType":"612","endLine":80,"endColumn":10,"suggestions":"712"},{"ruleId":"682","severity":1,"message":"683","line":567,"column":73,"nodeType":"684","endLine":567,"endColumn":125},{"ruleId":"626","severity":1,"message":"696","line":762,"column":9,"nodeType":"628","messageId":"609","endLine":762,"endColumn":15},{"ruleId":"602","severity":1,"message":"713","line":2,"column":10,"nodeType":"604","messageId":"605","endLine":2,"endColumn":28},{"ruleId":"602","severity":1,"message":"714","line":2,"column":49,"nodeType":"604","messageId":"605","endLine":2,"endColumn":65},{"ruleId":"602","severity":1,"message":"715","line":2,"column":67,"nodeType":"604","messageId":"605","endLine":2,"endColumn":75},{"ruleId":"602","severity":1,"message":"619","line":11,"column":16,"nodeType":"604","messageId":"605","endLine":11,"endColumn":20},{"ruleId":"602","severity":1,"message":"716","line":12,"column":13,"nodeType":"604","messageId":"605","endLine":12,"endColumn":18},{"ruleId":"610","severity":1,"message":"717","line":29,"column":5,"nodeType":"612","endLine":29,"endColumn":16,"suggestions":"718"},{"ruleId":"602","severity":1,"message":"660","line":46,"column":8,"nodeType":"604","messageId":"605","endLine":46,"endColumn":14},{"ruleId":"610","severity":1,"message":"719","line":68,"column":5,"nodeType":"612","endLine":68,"endColumn":7,"suggestions":"720"},{"ruleId":"602","severity":1,"message":"721","line":7,"column":2,"nodeType":"604","messageId":"605","endLine":7,"endColumn":6},{"ruleId":"602","severity":1,"message":"603","line":14,"column":29,"nodeType":"604","messageId":"605","endLine":14,"endColumn":38},{"ruleId":"602","severity":1,"message":"722","line":18,"column":8,"nodeType":"604","messageId":"605","endLine":18,"endColumn":12},{"ruleId":"602","severity":1,"message":"619","line":31,"column":13,"nodeType":"604","messageId":"605","endLine":31,"endColumn":17},{"ruleId":"602","severity":1,"message":"619","line":35,"column":13,"nodeType":"604","messageId":"605","endLine":35,"endColumn":17},{"ruleId":"610","severity":1,"message":"666","line":56,"column":5,"nodeType":"612","endLine":56,"endColumn":22,"suggestions":"723"},{"ruleId":"602","severity":1,"message":"724","line":18,"column":7,"nodeType":"604","messageId":"605","endLine":18,"endColumn":16},{"ruleId":"602","severity":1,"message":"725","line":19,"column":7,"nodeType":"604","messageId":"605","endLine":19,"endColumn":13},{"ruleId":"626","severity":1,"message":"726","line":312,"column":2,"nodeType":"628","messageId":"609","endLine":312,"endColumn":11},{"ruleId":"602","severity":1,"message":"727","line":16,"column":7,"nodeType":"604","messageId":"605","endLine":16,"endColumn":11},{"ruleId":"602","severity":1,"message":"725","line":26,"column":7,"nodeType":"604","messageId":"605","endLine":26,"endColumn":13},{"ruleId":"610","severity":1,"message":"728","line":54,"column":5,"nodeType":"612","endLine":54,"endColumn":15,"suggestions":"729"},{"ruleId":"730","severity":1,"message":"731","line":137,"column":9,"nodeType":"732","messageId":"733","endLine":137,"endColumn":16},{"ruleId":"626","severity":1,"message":"726","line":278,"column":2,"nodeType":"628","messageId":"609","endLine":278,"endColumn":11},{"ruleId":"626","severity":1,"message":"726","line":39,"column":2,"nodeType":"628","messageId":"609","endLine":39,"endColumn":11},{"ruleId":"598","replacedBy":"734"},{"ruleId":"600","replacedBy":"735"},{"ruleId":"626","severity":1,"message":"726","line":39,"column":2,"nodeType":"628","messageId":"609","endLine":39,"endColumn":11},{"ruleId":"626","severity":1,"message":"726","line":39,"column":2,"nodeType":"628","messageId":"609","endLine":39,"endColumn":11},{"ruleId":"602","severity":1,"message":"660","line":45,"column":8,"nodeType":"604","messageId":"605","endLine":45,"endColumn":14},{"ruleId":"602","severity":1,"message":"619","line":46,"column":13,"nodeType":"604","messageId":"605","endLine":46,"endColumn":17},{"ruleId":"602","severity":1,"message":"694","line":54,"column":15,"nodeType":"604","messageId":"605","endLine":54,"endColumn":22},{"ruleId":"610","severity":1,"message":"736","line":114,"column":5,"nodeType":"612","endLine":114,"endColumn":36,"suggestions":"737"},{"ruleId":"626","severity":1,"message":"696","line":1045,"column":3,"nodeType":"628","messageId":"609","endLine":1045,"endColumn":9},{"ruleId":"610","severity":1,"message":"717","line":35,"column":5,"nodeType":"612","endLine":35,"endColumn":16,"suggestions":"738"},{"ruleId":"602","severity":1,"message":"739","line":2,"column":8,"nodeType":"604","messageId":"605","endLine":2,"endColumn":15},{"ruleId":"602","severity":1,"message":"740","line":1,"column":16,"nodeType":"604","messageId":"605","endLine":1,"endColumn":26},{"ruleId":"602","severity":1,"message":"741","line":2,"column":8,"nodeType":"604","messageId":"605","endLine":2,"endColumn":20},{"ruleId":"606","severity":1,"message":"607","line":34,"column":35,"nodeType":"608","messageId":"609","endLine":34,"endColumn":37},{"ruleId":"602","severity":1,"message":"619","line":40,"column":13,"nodeType":"604","messageId":"605","endLine":40,"endColumn":17},{"ruleId":"610","severity":1,"message":"666","line":62,"column":5,"nodeType":"612","endLine":62,"endColumn":22,"suggestions":"742"},{"ruleId":"602","severity":1,"message":"619","line":23,"column":13,"nodeType":"604","messageId":"605","endLine":23,"endColumn":17},{"ruleId":"602","severity":1,"message":"743","line":27,"column":8,"nodeType":"604","messageId":"605","endLine":27,"endColumn":15},{"ruleId":"626","severity":1,"message":"744","line":114,"column":3,"nodeType":"628","messageId":"609","endLine":114,"endColumn":15},{"ruleId":"626","severity":1,"message":"696","line":130,"column":3,"nodeType":"628","messageId":"609","endLine":130,"endColumn":9},{"ruleId":"602","severity":1,"message":"649","line":3,"column":5,"nodeType":"604","messageId":"605","endLine":3,"endColumn":18},{"ruleId":"602","severity":1,"message":"740","line":4,"column":5,"nodeType":"604","messageId":"605","endLine":4,"endColumn":15},{"ruleId":"602","severity":1,"message":"745","line":8,"column":8,"nodeType":"604","messageId":"605","endLine":8,"endColumn":31},{"ruleId":"602","severity":1,"message":"746","line":11,"column":8,"nodeType":"604","messageId":"605","endLine":11,"endColumn":24},{"ruleId":"602","severity":1,"message":"747","line":12,"column":8,"nodeType":"604","messageId":"605","endLine":12,"endColumn":37},{"ruleId":"602","severity":1,"message":"748","line":13,"column":8,"nodeType":"604","messageId":"605","endLine":13,"endColumn":30},{"ruleId":"602","severity":1,"message":"749","line":15,"column":29,"nodeType":"604","messageId":"605","endLine":15,"endColumn":40},{"ruleId":"602","severity":1,"message":"750","line":15,"column":42,"nodeType":"604","messageId":"605","endLine":15,"endColumn":58},{"ruleId":"602","severity":1,"message":"619","line":23,"column":13,"nodeType":"604","messageId":"605","endLine":23,"endColumn":17},{"ruleId":"626","severity":1,"message":"665","line":160,"column":9,"nodeType":"628","messageId":"609","endLine":160,"endColumn":16},"no-native-reassign",["751"],"no-negated-in-lhs",["752"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setAuth'. Either include it or remove the dependency array.","ArrayExpression",["753"],"React Hook useEffect has a missing dependency: 'checkUserAuthentication'. Either include it or remove the dependency array.",["754"],"React Hook useEffect has missing dependencies: 'notifications' and 'setNotifications'. Either include them or remove the dependency array.",["755"],"'withStyles' is defined but never used.","'i18n' is assigned a value but never used.","'removeAsset' is defined but never used.","React Hook useEffect has a missing dependency: 'location.search'. Either include it or remove the dependency array.",["756"],"'Backdrop' is defined but never used.","'Modal' is defined but never used.","'UpdateOwner' is defined but never used.","no-dupe-keys","Duplicate key 'background'.","ObjectExpression","'SearchRoundedIcon' is defined but never used.","'FilterByMultiSelect' is defined but never used.","React Hook useEffect has missing dependencies: 'history', 'location.pathname', and 'location.search'. Either include them or remove the dependency array.",["757"],"no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["758","759"],"'queryParamsToObject' is defined but never used.","'Grid' is defined but never used.","React Hook useEffect has missing dependencies: 'filterField', 'handleSearch', and 'query'. Either include them or remove the dependency array.",["760"],"React Hook useEffect has a missing dependency: 'optionsFunc'. Either include it or remove the dependency array. If 'optionsFunc' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["761"],"React Hook useEffect has missing dependencies: 'filterField', 'history', 'location.pathname', 'location.search', and 'query'. Either include them or remove the dependency array.",["762"],"React Hook useEffect has missing dependencies: 'filterField', 'optionsFunc', and 'query'. Either include them or remove the dependency array. If 'optionsFunc' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["763"],["764"],"'useMediaQuery' is defined but never used.",["765"],"React Hook useEffect has a missing dependency: 'query.asset'. Either include it or remove the dependency array.",["766"],"React Hook useEffect has a missing dependency: 'handleSearch'. Either include it or remove the dependency array.",["767"],"React Hook useEffect has missing dependencies: 'filterField', 'history', 'location.pathname', and 'location.search'. Either include them or remove the dependency array.",["768"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'downSm' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'linkedUsers'. Either include it or remove the dependency array.",["769"],"'useState' is defined but never used.","'Paper' is defined but never used.","Duplicate key 'padding'.","React Hook useEffect has missing dependencies: 'history', 'location.pathname', and 'query.asset'. Either include them or remove the dependency array.",["770"],"'getFullAddress' is defined but never used.","'useHistory' is defined but never used.","'useQuery' is defined but never used.","'location' is assigned a value but never used.","'useTranslation' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'makeStyles' is defined but never used.","React Hook useEffect has missing dependencies: 'fid' and 'history'. Either include them or remove the dependency array.",["771"],"'Slide' is defined but never used.","'slideIn' is assigned a value but never used.","'slideDirection' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'res' is assigned a value but never used.","'useLocation' is defined but never used.","React Hook useEffect has missing dependencies: 'auth.user.tenant', 'query', and 'setFaults'. Either include them or remove the dependency array.",["772"],["773"],"'useStyles' is assigned a value but never used.","'Tooltip' is defined but never used.","'UpsertSystem' is defined but never used.","'AuthContext' is defined but never used.","'setMode' is assigned a value but never used.","Duplicate key 'classes'.","Duplicate key 'margin'.","React Hook useEffect has a missing dependency: 'faultId'. Either include it or remove the dependency array.",["774"],"React Hook useEffect has a missing dependency: 'currentOwner'. Either include it or remove the dependency array.",["775"],"React Hook useEffect has a missing dependency: 'assetId'. Either include it or remove the dependency array.",["776"],"React Hook useEffect has a missing dependency: 'followerList'. Either include it or remove the dependency array. If 'setUserList' needs the current value of 'followerList', you can also switch to useReducer instead of useState and read 'followerList' in the reducer.",["777"],"React Hook useEffect has a missing dependency: 'currentStatus'. Either include it or remove the dependency array.",["778"],"'DoubleArrowIcon' is defined but never used.","'Collapse' is defined but never used.","React Hook useEffect has missing dependencies: 'details' and 'mode'. Either include them or remove the dependency array. You can also do a functional update 'setDetails(d => ...)' if you only need 'details' in the 'setDetails' call.",["779"],"React Hook useEffect has a missing dependency: 'taskId'. Either include it or remove the dependency array.",["780"],"'specialStringPurge' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'isSeq' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'auth.user.tenant' and 'query'. Either include them or remove the dependency array.",["781"],"React Hook useEffect has missing dependencies: 'history' and 'taskId'. Either include them or remove the dependency array.",["782"],"'Fade' is defined but never used.","'clsx' is defined but never used.",["783"],"'intervals' is assigned a value but never used.","'months' is assigned a value but never used.","Duplicate key 'textField'.","'days' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'index' and 'updateSchedules'. Either include them or remove the dependency array. If 'updateSchedules' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["784"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue",["751"],["752"],"React Hook useEffect has a missing dependency: 'auth.user.tenant'. Either include it or remove the dependency array.",["785"],["786"],"'i18next' is defined but never used.","'IconButton' is defined but never used.","'MoreVertIcon' is defined but never used.",["787"],"'matches' is assigned a value but never used.","Duplicate key 'borderRadius'.","'AddLocationOutlinedIcon' is defined but never used.","'ClearRoundedIcon' is defined but never used.","'CheckCircleOutlineRoundedIcon' is defined but never used.","'CheckCircleRoundedIcon' is defined but never used.","'getFullName' is defined but never used.","'updateStateField' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"788","fix":"789"},{"desc":"790","fix":"791"},{"desc":"792","fix":"793"},{"desc":"794","fix":"795"},{"desc":"796","fix":"797"},{"messageId":"798","fix":"799","desc":"800"},{"messageId":"801","fix":"802","desc":"803"},{"desc":"804","fix":"805"},{"desc":"806","fix":"807"},{"desc":"808","fix":"809"},{"desc":"810","fix":"811"},{"desc":"812","fix":"813"},{"desc":"794","fix":"814"},{"desc":"815","fix":"816"},{"desc":"817","fix":"818"},{"desc":"819","fix":"820"},{"desc":"821","fix":"822"},{"desc":"823","fix":"824"},{"desc":"825","fix":"826"},{"desc":"827","fix":"828"},{"desc":"829","fix":"830"},{"desc":"831","fix":"832"},{"desc":"833","fix":"834"},{"desc":"835","fix":"836"},{"desc":"837","fix":"838"},{"desc":"839","fix":"840"},{"desc":"841","fix":"842"},{"desc":"843","fix":"844"},{"desc":"845","fix":"846"},{"desc":"847","fix":"848"},{"desc":"823","fix":"849"},{"desc":"850","fix":"851"},{"desc":"852","fix":"853"},{"desc":"845","fix":"854"},{"desc":"823","fix":"855"},"Update the dependencies array to be: [setAuth]",{"range":"856","text":"857"},"Update the dependencies array to be: [checkUserAuthentication]",{"range":"858","text":"859"},"Update the dependencies array to be: [notificationPage, notifications, setNotifications]",{"range":"860","text":"861"},"Update the dependencies array to be: [isLoading, location.search]",{"range":"862","text":"863"},"Update the dependencies array to be: [history, location.pathname, location.search, values]",{"range":"864","text":"865"},"removeEscape",{"range":"866","text":"867"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"868","text":"869"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [filterField, handleSearch, query, searchText]",{"range":"870","text":"871"},"Update the dependencies array to be: [optionsFunc]",{"range":"872","text":"873"},"Update the dependencies array to be: [filterField, history, location.pathname, location.search, query, value]",{"range":"874","text":"875"},"Update the dependencies array to be: [filterField, optionsFunc, query]",{"range":"876","text":"877"},"Update the dependencies array to be: [filterField, history, location.pathname, location.search, query, values]",{"range":"878","text":"879"},{"range":"880","text":"863"},"Update the dependencies array to be: [location.search, query.asset]",{"range":"881","text":"882"},"Update the dependencies array to be: [handleSearch, searchText]",{"range":"883","text":"884"},"Update the dependencies array to be: [filterField, history, location.pathname, location.search, value]",{"range":"885","text":"886"},"Update the dependencies array to be: [linkedUsers]",{"range":"887","text":"888"},"Update the dependencies array to be: [history, location.pathname, location.search, query.asset]",{"range":"889","text":"890"},"Update the dependencies array to be: [faultData, faultId, fid, history]",{"range":"891","text":"892"},"Update the dependencies array to be: [auth.user.tenant, isLoading, query, setFaults]",{"range":"893","text":"894"},"Update the dependencies array to be: [history, location.pathname, location.search, viewType]",{"range":"895","text":"896"},"Update the dependencies array to be: [faultId]",{"range":"897","text":"898"},"Update the dependencies array to be: [currentOwner]",{"range":"899","text":"900"},"Update the dependencies array to be: [assetId]",{"range":"901","text":"902"},"Update the dependencies array to be: [followerList]",{"range":"903","text":"904"},"Update the dependencies array to be: [currentStatus]",{"range":"905","text":"906"},"Update the dependencies array to be: [details, details.isUsingSteps, mode]",{"range":"907","text":"908"},"Update the dependencies array to be: [taskId]",{"range":"909","text":"910"},"Update the dependencies array to be: [auth.user.tenant, isLoading, query]",{"range":"911","text":"912"},"Update the dependencies array to be: [history, taskId]",{"range":"913","text":"914"},{"range":"915","text":"890"},"Update the dependencies array to be: [index, schedule, updateSchedules]",{"range":"916","text":"917"},"Update the dependencies array to be: [auth.user.tenant, details.asset, details.system]",{"range":"918","text":"919"},{"range":"920","text":"912"},{"range":"921","text":"890"},[1132,1134],"[setAuth]",[1038,1040],"[checkUserAuthentication]",[1181,1199],"[notificationPage, notifications, setNotifications]",[1323,1334],"[isLoading, location.search]",[1451,1459],"[history, location.pathname, location.search, values]",[1995,1996],"",[1995,1995],"\\",[1105,1117],"[filterField, handleSearch, query, searchText]",[1078,1080],"[optionsFunc]",[1553,1560],"[filterField, history, location.pathname, location.search, query, value]",[1345,1347],"[filterField, optionsFunc, query]",[1874,1882],"[filterField, history, location.pathname, location.search, query, values]",[1411,1422],[2096,2113],"[location.search, query.asset]",[1483,1495],"[handleSearch, searchText]",[1942,1949],"[filterField, history, location.pathname, location.search, value]",[1105,1107],"[linkedUsers]",[2204,2221],"[history, location.pathname, location.search, query.asset]",[2408,2428],"[faultData, faultId, fid, history]",[1492,1503],"[auth.user.tenant, isLoading, query, setFaults]",[1806,1816],"[history, location.pathname, location.search, viewType]",[2713,2715],"[faultId]",[1167,1169],"[currentOwner]",[2058,2060],"[assetId]",[1092,1094],"[followerList]",[1238,1240],"[currentStatus]",[2383,2405],"[details, details.isUsingSteps, mode]",[3253,3255],"[taskId]",[1020,1031],"[auth.user.tenant, isLoading, query]",[2490,2492],"[history, taskId]",[1993,2010],[1178,1188],"[index, schedule, updateSchedules]",[2900,2931],"[auth.user.tenant, details.asset, details.system]",[1183,1194],[2206,2223]]